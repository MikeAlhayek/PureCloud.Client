using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.Text.Json.Serialization;
using PureCloudPlatform.Client.V2.Client;

namespace PureCloudPlatform.Client.V2.Model
{
    /// <summary>
    /// Open Messaging rich media message structure
    /// </summary>
    [DataContract]
    public partial class OpenInboundNormalizedReceipt :  IEquatable<OpenInboundNormalizedReceipt>
    {
        /// <summary>
        /// Message receipt status.
        /// </summary>
        /// <value>Message receipt status.</value>
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Your SDK version is out of date and an unknown enum value was encountered. 
            /// Please upgrade the SDK using the command "Upgrade-Package PureCloudApiSdk" 
            /// in the Package Manager Console
            /// </summary>
            [EnumMember(Value = "OUTDATED_SDK_VERSION")]
            OutdatedSdkVersion,
            
            /// <summary>
            /// Enum Sent for "Sent"
            /// </summary>
            [EnumMember(Value = "Sent")]
            Sent,
            
            /// <summary>
            /// Enum Delivered for "Delivered"
            /// </summary>
            [EnumMember(Value = "Delivered")]
            Delivered,
            
            /// <summary>
            /// Enum Failed for "Failed"
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed,
            
            /// <summary>
            /// Enum Published for "Published"
            /// </summary>
            [EnumMember(Value = "Published")]
            Published,
            
            /// <summary>
            /// Enum Removed for "Removed"
            /// </summary>
            [EnumMember(Value = "Removed")]
            Removed
        }
        /// <summary>
        /// Message receipt status.
        /// </summary>
        /// <value>Message receipt status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OpenInboundNormalizedReceipt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OpenInboundNormalizedReceipt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenInboundNormalizedReceipt" /> class.
        /// </summary>
        /// <param name="Id">The original unique message Id generated by the messaging platform, that this receipt message is referencing. (required).</param>
        /// <param name="Channel">Channel-specific information that describes the message and the message channel/provider. (required).</param>
        /// <param name="Status">Message receipt status. (required).</param>
        /// <param name="Reasons">List of reasons for a message receipt that indicates the message has failed. Only used with Failed status..</param>
        /// <param name="IsFinalReceipt">Indicates if this is the last message receipt for this message, or if another message receipt can be expected..</param>
        public OpenInboundNormalizedReceipt(string Id = null, OpenInboundMessagingReceiptChannel Channel = null, StatusEnum? Status = null, List<ConversationReason> Reasons = null, bool? IsFinalReceipt = null)
        {
            this.Id = Id;
            this.Channel = Channel;
            this.Status = Status;
            this.Reasons = Reasons;
            this.IsFinalReceipt = IsFinalReceipt;
            
        }
        


        /// <summary>
        /// The original unique message Id generated by the messaging platform, that this receipt message is referencing.
        /// </summary>
        /// <value>The original unique message Id generated by the messaging platform, that this receipt message is referencing.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }



        /// <summary>
        /// Channel-specific information that describes the message and the message channel/provider.
        /// </summary>
        /// <value>Channel-specific information that describes the message and the message channel/provider.</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public OpenInboundMessagingReceiptChannel Channel { get; set; }





        /// <summary>
        /// List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.
        /// </summary>
        /// <value>List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.</value>
        [DataMember(Name="reasons", EmitDefaultValue=false)]
        public List<ConversationReason> Reasons { get; set; }



        /// <summary>
        /// Indicates if this is the last message receipt for this message, or if another message receipt can be expected.
        /// </summary>
        /// <value>Indicates if this is the last message receipt for this message, or if another message receipt can be expected.</value>
        [DataMember(Name="isFinalReceipt", EmitDefaultValue=false)]
        public bool? IsFinalReceipt { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenInboundNormalizedReceipt {\n");

            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reasons: ").Append(Reasons).Append("\n");
            sb.Append("  IsFinalReceipt: ").Append(IsFinalReceipt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                Formatting = Formatting.Indented
            });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OpenInboundNormalizedReceipt);
        }

        /// <summary>
        /// Returns true if OpenInboundNormalizedReceipt instances are equal
        /// </summary>
        /// <param name="other">Instance of OpenInboundNormalizedReceipt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenInboundNormalizedReceipt other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return true &&
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) &&
                (
                    this.Channel == other.Channel ||
                    this.Channel != null &&
                    this.Channel.Equals(other.Channel)
                ) &&
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) &&
                (
                    this.Reasons == other.Reasons ||
                    this.Reasons != null &&
                    this.Reasons.SequenceEqual(other.Reasons)
                ) &&
                (
                    this.IsFinalReceipt == other.IsFinalReceipt ||
                    this.IsFinalReceipt != null &&
                    this.IsFinalReceipt.Equals(other.IsFinalReceipt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();

                if (this.Channel != null)
                    hash = hash * 59 + this.Channel.GetHashCode();

                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();

                if (this.Reasons != null)
                    hash = hash * 59 + this.Reasons.GetHashCode();

                if (this.IsFinalReceipt != null)
                    hash = hash * 59 + this.IsFinalReceipt.GetHashCode();

                return hash;
            }
        }
    }

}
