using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;

namespace PureCloud.Client.Models;

/// <summary>
/// Open Messaging rich media message structure
/// </summary>

public partial class OpenReceiptNormalizedMessage : IEquatable<OpenReceiptNormalizedMessage>
{
    /// <summary>
    /// Message type.
    /// </summary>
    /// <value>Message type.</value>
    
    public enum TypeEnum
    {
        /// <summary>
        /// Your SDK version is out of date and an unknown enum value was encountered. 
        /// Please upgrade the SDK using the command "Upgrade-Package PureCloudApiSdk" 
        /// in the Package Manager Console
        /// </summary>
        [EnumMember(Value = "OUTDATED_SDK_VERSION")]
        OutdatedSdkVersion,

        /// <summary>
        /// Enum Receipt for "Receipt"
        /// </summary>
        [EnumMember(Value = "Receipt")]
        Receipt
    }
    /// <summary>
    /// Message receipt status.
    /// </summary>
    /// <value>Message receipt status.</value>
    
    public enum StatusEnum
    {
        /// <summary>
        /// Your SDK version is out of date and an unknown enum value was encountered. 
        /// Please upgrade the SDK using the command "Upgrade-Package PureCloudApiSdk" 
        /// in the Package Manager Console
        /// </summary>
        [EnumMember(Value = "OUTDATED_SDK_VERSION")]
        OutdatedSdkVersion,

        /// <summary>
        /// Enum Sent for "Sent"
        /// </summary>
        [EnumMember(Value = "Sent")]
        Sent,

        /// <summary>
        /// Enum Delivered for "Delivered"
        /// </summary>
        [EnumMember(Value = "Delivered")]
        Delivered,

        /// <summary>
        /// Enum Failed for "Failed"
        /// </summary>
        [EnumMember(Value = "Failed")]
        Failed,

        /// <summary>
        /// Enum Published for "Published"
        /// </summary>
        [EnumMember(Value = "Published")]
        Published,

        /// <summary>
        /// Enum Removed for "Removed"
        /// </summary>
        [EnumMember(Value = "Removed")]
        Removed
    }
    /// <summary>
    /// The direction of the message.
    /// </summary>
    /// <value>The direction of the message.</value>
    
    public enum DirectionEnum
    {
        /// <summary>
        /// Your SDK version is out of date and an unknown enum value was encountered. 
        /// Please upgrade the SDK using the command "Upgrade-Package PureCloudApiSdk" 
        /// in the Package Manager Console
        /// </summary>
        [EnumMember(Value = "OUTDATED_SDK_VERSION")]
        OutdatedSdkVersion,

        /// <summary>
        /// Enum Inbound for "Inbound"
        /// </summary>
        [EnumMember(Value = "Inbound")]
        Inbound,

        /// <summary>
        /// Enum Outbound for "Outbound"
        /// </summary>
        [EnumMember(Value = "Outbound")]
        Outbound
    }
    /// <summary>
    /// Message type.
    /// </summary>
    /// <value>Message type.</value>
    [JsonPropertyName("type")]
    public TypeEnum? Type { get; set; }
    /// <summary>
    /// Message receipt status.
    /// </summary>
    /// <value>Message receipt status.</value>
    [JsonPropertyName("status")]
    public StatusEnum? Status { get; set; }
    /// <summary>
    /// The direction of the message.
    /// </summary>
    /// <value>The direction of the message.</value>
    [JsonPropertyName("direction")]
    public DirectionEnum? Direction { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="OpenReceiptNormalizedMessage" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected OpenReceiptNormalizedMessage() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="OpenReceiptNormalizedMessage" /> class.
    /// </summary>
    /// <param name="Id">The original unique message Id generated by the messaging platform, that this receipt message is referencing. (required).</param>
    /// <param name="Channel">Channel-specific information that describes the message and the message channel/provider. (required).</param>
    /// <param name="Type">Message type. (required).</param>
    /// <param name="Status">Message receipt status. (required).</param>
    /// <param name="Reasons">List of reasons for a message receipt that indicates the message has failed. Only used with Failed status..</param>
    /// <param name="IsFinalReceipt">Indicates if this is the last message receipt for this message, or if another message receipt can be expected..</param>
    /// <param name="Direction">The direction of the message. (required).</param>
    public OpenReceiptNormalizedMessage(string Id = null, OpenMessagingChannel Channel = null, TypeEnum? Type = null, StatusEnum? Status = null, List<ConversationReason> Reasons = null, bool? IsFinalReceipt = null, DirectionEnum? Direction = null)
    {
        this.Id = Id;
        this.Channel = Channel;
        this.Type = Type;
        this.Status = Status;
        this.Reasons = Reasons;
        this.IsFinalReceipt = IsFinalReceipt;
        this.Direction = Direction;

    }



    /// <summary>
    /// The original unique message Id generated by the messaging platform, that this receipt message is referencing.
    /// </summary>
    /// <value>The original unique message Id generated by the messaging platform, that this receipt message is referencing.</value>
    [JsonPropertyName("id")]
    public string Id { get; set; }



    /// <summary>
    /// Channel-specific information that describes the message and the message channel/provider.
    /// </summary>
    /// <value>Channel-specific information that describes the message and the message channel/provider.</value>
    [JsonPropertyName("channel")]
    public OpenMessagingChannel Channel { get; set; }







    /// <summary>
    /// List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.
    /// </summary>
    /// <value>List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.</value>
    [JsonPropertyName("reasons")]
    public List<ConversationReason> Reasons { get; set; }



    /// <summary>
    /// Indicates if this is the last message receipt for this message, or if another message receipt can be expected.
    /// </summary>
    /// <value>Indicates if this is the last message receipt for this message, or if another message receipt can be expected.</value>
    [JsonPropertyName("isFinalReceipt")]
    public bool? IsFinalReceipt { get; set; }




    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class OpenReceiptNormalizedMessage {\n");

        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Channel: ").Append(Channel).Append("\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  Reasons: ").Append(Reasons).Append("\n");
        sb.Append("  IsFinalReceipt: ").Append(IsFinalReceipt).Append("\n");
        sb.Append("  Direction: ").Append(Direction).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }


    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        return Equals(obj as OpenReceiptNormalizedMessage);
    }

    /// <summary>
    /// Returns true if OpenReceiptNormalizedMessage instances are equal
    /// </summary>
    /// <param name="other">Instance of OpenReceiptNormalizedMessage to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(OpenReceiptNormalizedMessage other)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        if (other == null)
        {
            return false;
        }

        return true &&
            (
                Id == other.Id ||
                Id != null &&
                Id.Equals(other.Id)
            ) &&
            (
                Channel == other.Channel ||
                Channel != null &&
                Channel.Equals(other.Channel)
            ) &&
            (
                Type == other.Type ||
                Type != null &&
                Type.Equals(other.Type)
            ) &&
            (
                Status == other.Status ||
                Status != null &&
                Status.Equals(other.Status)
            ) &&
            (
                Reasons == other.Reasons ||
                Reasons != null &&
                Reasons.SequenceEqual(other.Reasons)
            ) &&
            (
                IsFinalReceipt == other.IsFinalReceipt ||
                IsFinalReceipt != null &&
                IsFinalReceipt.Equals(other.IsFinalReceipt)
            ) &&
            (
                Direction == other.Direction ||
                Direction != null &&
                Direction.Equals(other.Direction)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        // credit: http://stackoverflow.com/a/263416/677735
        unchecked // Overflow is fine, just wrap
        {
            int hash = 41;
            // Suitable nullity checks etc, of course :)
            if (Id != null)
            {
                hash = hash * 59 + Id.GetHashCode();
            }

            if (Channel != null)
            {
                hash = hash * 59 + Channel.GetHashCode();
            }

            if (Type != null)
            {
                hash = hash * 59 + Type.GetHashCode();
            }

            if (Status != null)
            {
                hash = hash * 59 + Status.GetHashCode();
            }

            if (Reasons != null)
            {
                hash = hash * 59 + Reasons.GetHashCode();
            }

            if (IsFinalReceipt != null)
            {
                hash = hash * 59 + IsFinalReceipt.GetHashCode();
            }

            if (Direction != null)
            {
                hash = hash * 59 + Direction.GetHashCode();
            }

            return hash;
        }
    }
}
