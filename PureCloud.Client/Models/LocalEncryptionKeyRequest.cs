using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;

namespace PureCloud.Client.Models;

/// <summary>
/// LocalEncryptionKeyRequest
/// </summary>
[DataContract]
public partial class LocalEncryptionKeyRequest : IEquatable<LocalEncryptionKeyRequest>
{

    /// <summary>
    /// Initializes a new instance of the <see cref="LocalEncryptionKeyRequest" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected LocalEncryptionKeyRequest() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="LocalEncryptionKeyRequest" /> class.
    /// </summary>
    /// <param name="ConfigId">The local configuration id that contains metadata on private local service (required).</param>
    /// <param name="PublicKey">Base 64 encoded public key, generated by the local service. (required).</param>
    /// <param name="KeypairId">The key pair id from the local service. (required).</param>
    public LocalEncryptionKeyRequest(string ConfigId = null, string PublicKey = null, string KeypairId = null)
    {
        this.ConfigId = ConfigId;
        this.PublicKey = PublicKey;
        this.KeypairId = KeypairId;

    }



    /// <summary>
    /// The local configuration id that contains metadata on private local service
    /// </summary>
    /// <value>The local configuration id that contains metadata on private local service</value>
    [DataMember(Name = "configId", EmitDefaultValue = false)]
    public string ConfigId { get; set; }



    /// <summary>
    /// Base 64 encoded public key, generated by the local service.
    /// </summary>
    /// <value>Base 64 encoded public key, generated by the local service.</value>
    [DataMember(Name = "publicKey", EmitDefaultValue = false)]
    public string PublicKey { get; set; }



    /// <summary>
    /// The key pair id from the local service.
    /// </summary>
    /// <value>The key pair id from the local service.</value>
    [DataMember(Name = "keypairId", EmitDefaultValue = false)]
    public string KeypairId { get; set; }


    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class LocalEncryptionKeyRequest {\n");

        sb.Append("  ConfigId: ").Append(ConfigId).Append("\n");
        sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
        sb.Append("  KeypairId: ").Append(KeypairId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }


    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        return this.Equals(obj as LocalEncryptionKeyRequest);
    }

    /// <summary>
    /// Returns true if LocalEncryptionKeyRequest instances are equal
    /// </summary>
    /// <param name="other">Instance of LocalEncryptionKeyRequest to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(LocalEncryptionKeyRequest other)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        if (other == null)
        {
            return false;
        }

        return true &&
            (
                this.ConfigId == other.ConfigId ||
                this.ConfigId != null &&
                this.ConfigId.Equals(other.ConfigId)
            ) &&
            (
                this.PublicKey == other.PublicKey ||
                this.PublicKey != null &&
                this.PublicKey.Equals(other.PublicKey)
            ) &&
            (
                this.KeypairId == other.KeypairId ||
                this.KeypairId != null &&
                this.KeypairId.Equals(other.KeypairId)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        // credit: http://stackoverflow.com/a/263416/677735
        unchecked // Overflow is fine, just wrap
        {
            int hash = 41;
            // Suitable nullity checks etc, of course :)
            if (this.ConfigId != null)
            {
                hash = hash * 59 + this.ConfigId.GetHashCode();
            }

            if (this.PublicKey != null)
            {
                hash = hash * 59 + this.PublicKey.GetHashCode();
            }

            if (this.KeypairId != null)
            {
                hash = hash * 59 + this.KeypairId.GetHashCode();
            }

            return hash;
        }
    }
}
