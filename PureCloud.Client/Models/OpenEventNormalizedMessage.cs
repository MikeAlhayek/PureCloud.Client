using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;

namespace PureCloudPlatform.Client.V2.Model;

/// <summary>
/// Open Messaging rich media message structure
/// </summary>
[DataContract]
public partial class OpenEventNormalizedMessage : IEquatable<OpenEventNormalizedMessage>
{
    /// <summary>
    /// Message type.
    /// </summary>
    /// <value>Message type.</value>
    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum TypeEnum
    {
        /// <summary>
        /// Your SDK version is out of date and an unknown enum value was encountered. 
        /// Please upgrade the SDK using the command "Upgrade-Package PureCloudApiSdk" 
        /// in the Package Manager Console
        /// </summary>
        [EnumMember(Value = "OUTDATED_SDK_VERSION")]
        OutdatedSdkVersion,

        /// <summary>
        /// Enum Event for "Event"
        /// </summary>
        [EnumMember(Value = "Event")]
        Event
    }
    /// <summary>
    /// Message type.
    /// </summary>
    /// <value>Message type.</value>
    [DataMember(Name = "type", EmitDefaultValue = false)]
    public TypeEnum? Type { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="OpenEventNormalizedMessage" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected OpenEventNormalizedMessage() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="OpenEventNormalizedMessage" /> class.
    /// </summary>
    /// <param name="Id">Unique ID of the message generated by Messaging Platform..</param>
    /// <param name="Channel">Channel-specific information that describes the message and the message channel/provider. (required).</param>
    /// <param name="Type">Message type. (required).</param>
    /// <param name="Events">List of event elements..</param>
    public OpenEventNormalizedMessage(string Id = null, OpenMessagingChannel Channel = null, TypeEnum? Type = null, List<OpenMessageEvent> Events = null)
    {
        this.Id = Id;
        this.Channel = Channel;
        this.Type = Type;
        this.Events = Events;

    }



    /// <summary>
    /// Unique ID of the message generated by Messaging Platform.
    /// </summary>
    /// <value>Unique ID of the message generated by Messaging Platform.</value>
    [DataMember(Name = "id", EmitDefaultValue = false)]
    public string Id { get; set; }



    /// <summary>
    /// Channel-specific information that describes the message and the message channel/provider.
    /// </summary>
    /// <value>Channel-specific information that describes the message and the message channel/provider.</value>
    [DataMember(Name = "channel", EmitDefaultValue = false)]
    public OpenMessagingChannel Channel { get; set; }





    /// <summary>
    /// List of event elements.
    /// </summary>
    /// <value>List of event elements.</value>
    [DataMember(Name = "events", EmitDefaultValue = false)]
    public List<OpenMessageEvent> Events { get; set; }


    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class OpenEventNormalizedMessage {\n");

        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Channel: ").Append(Channel).Append("\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("  Events: ").Append(Events).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }


    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        return this.Equals(obj as OpenEventNormalizedMessage);
    }

    /// <summary>
    /// Returns true if OpenEventNormalizedMessage instances are equal
    /// </summary>
    /// <param name="other">Instance of OpenEventNormalizedMessage to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(OpenEventNormalizedMessage other)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        if (other == null)
        {
            return false;
        }

        return true &&
            (
                this.Id == other.Id ||
                this.Id != null &&
                this.Id.Equals(other.Id)
            ) &&
            (
                this.Channel == other.Channel ||
                this.Channel != null &&
                this.Channel.Equals(other.Channel)
            ) &&
            (
                this.Type == other.Type ||
                this.Type != null &&
                this.Type.Equals(other.Type)
            ) &&
            (
                this.Events == other.Events ||
                this.Events != null &&
                this.Events.SequenceEqual(other.Events)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        // credit: http://stackoverflow.com/a/263416/677735
        unchecked // Overflow is fine, just wrap
        {
            int hash = 41;
            // Suitable nullity checks etc, of course :)
            if (this.Id != null)
            {
                hash = hash * 59 + this.Id.GetHashCode();
            }

            if (this.Channel != null)
            {
                hash = hash * 59 + this.Channel.GetHashCode();
            }

            if (this.Type != null)
            {
                hash = hash * 59 + this.Type.GetHashCode();
            }

            if (this.Events != null)
            {
                hash = hash * 59 + this.Events.GetHashCode();
            }

            return hash;
        }
    }
}
