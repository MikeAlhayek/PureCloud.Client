using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;

namespace PureCloud.Client.Models;

/// <summary>
/// Open Messaging rich media message structure
/// </summary>

public partial class OpenMessageNormalizedMessage : IEquatable<OpenMessageNormalizedMessage>
{
    /// <summary>
    /// Message type.
    /// </summary>
    /// <value>Message type.</value>
    
    public enum TypeEnum
    {
        /// <summary>
        /// Your SDK version is out of date and an unknown enum value was encountered. 
        /// Please upgrade the SDK using the command "Upgrade-Package PureCloudApiSdk" 
        /// in the Package Manager Console
        /// </summary>
        [EnumMember(Value = "OUTDATED_SDK_VERSION")]
        OutdatedSdkVersion,

        /// <summary>
        /// Enum Text for "Text"
        /// </summary>
        [EnumMember(Value = "Text")]
        Text
    }
    /// <summary>
    /// Message type.
    /// </summary>
    /// <value>Message type.</value>
    [JsonPropertyName("type")]
    public TypeEnum? Type { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="OpenMessageNormalizedMessage" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected OpenMessageNormalizedMessage() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="OpenMessageNormalizedMessage" /> class.
    /// </summary>
    /// <param name="Id">Unique ID of the message generated by Messaging Platform..</param>
    /// <param name="Channel">Channel-specific information that describes the message and the message channel/provider. (required).</param>
    /// <param name="Type">Message type. (required).</param>
    /// <param name="Text">Message text..</param>
    /// <param name="Content">List of content elements..</param>
    /// <param name="Metadata">Additional metadata about this message..</param>
    /// <param name="ConversationId">The conversationId context for the message.</param>
    public OpenMessageNormalizedMessage(string Id = null, OpenMessagingChannel Channel = null, TypeEnum? Type = null, string Text = null, List<OpenMessageContent> Content = null, Dictionary<string, string> Metadata = null, string ConversationId = null)
    {
        this.Id = Id;
        this.Channel = Channel;
        this.Type = Type;
        this.Text = Text;
        this.Content = Content;
        this.Metadata = Metadata;
        this.ConversationId = ConversationId;

    }



    /// <summary>
    /// Unique ID of the message generated by Messaging Platform.
    /// </summary>
    /// <value>Unique ID of the message generated by Messaging Platform.</value>
    [JsonPropertyName("id")]
    public string Id { get; set; }



    /// <summary>
    /// Channel-specific information that describes the message and the message channel/provider.
    /// </summary>
    /// <value>Channel-specific information that describes the message and the message channel/provider.</value>
    [JsonPropertyName("channel")]
    public OpenMessagingChannel Channel { get; set; }





    /// <summary>
    /// Message text.
    /// </summary>
    /// <value>Message text.</value>
    [JsonPropertyName("text")]
    public string Text { get; set; }



    /// <summary>
    /// List of content elements.
    /// </summary>
    /// <value>List of content elements.</value>
    [JsonPropertyName("content")]
    public List<OpenMessageContent> Content { get; set; }



    /// <summary>
    /// Additional metadata about this message.
    /// </summary>
    /// <value>Additional metadata about this message.</value>
    [JsonPropertyName("metadata")]
    public Dictionary<string, string> Metadata { get; set; }



    /// <summary>
    /// The conversationId context for the message
    /// </summary>
    /// <value>The conversationId context for the message</value>
    [JsonPropertyName("conversationId")]
    public string ConversationId { get; set; }


    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class OpenMessageNormalizedMessage {\n");

        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Channel: ").Append(Channel).Append("\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("  Text: ").Append(Text).Append("\n");
        sb.Append("  Content: ").Append(Content).Append("\n");
        sb.Append("  Metadata: ").Append(Metadata).Append("\n");
        sb.Append("  ConversationId: ").Append(ConversationId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }


    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        return Equals(obj as OpenMessageNormalizedMessage);
    }

    /// <summary>
    /// Returns true if OpenMessageNormalizedMessage instances are equal
    /// </summary>
    /// <param name="other">Instance of OpenMessageNormalizedMessage to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(OpenMessageNormalizedMessage other)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        if (other == null)
        {
            return false;
        }

        return true &&
            (
                Id == other.Id ||
                Id != null &&
                Id.Equals(other.Id)
            ) &&
            (
                Channel == other.Channel ||
                Channel != null &&
                Channel.Equals(other.Channel)
            ) &&
            (
                Type == other.Type ||
                Type != null &&
                Type.Equals(other.Type)
            ) &&
            (
                Text == other.Text ||
                Text != null &&
                Text.Equals(other.Text)
            ) &&
            (
                Content == other.Content ||
                Content != null &&
                Content.SequenceEqual(other.Content)
            ) &&
            (
                Metadata == other.Metadata ||
                Metadata != null &&
                Metadata.SequenceEqual(other.Metadata)
            ) &&
            (
                ConversationId == other.ConversationId ||
                ConversationId != null &&
                ConversationId.Equals(other.ConversationId)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        // credit: http://stackoverflow.com/a/263416/677735
        unchecked // Overflow is fine, just wrap
        {
            int hash = 41;
            // Suitable nullity checks etc, of course :)
            if (Id != null)
            {
                hash = hash * 59 + Id.GetHashCode();
            }

            if (Channel != null)
            {
                hash = hash * 59 + Channel.GetHashCode();
            }

            if (Type != null)
            {
                hash = hash * 59 + Type.GetHashCode();
            }

            if (Text != null)
            {
                hash = hash * 59 + Text.GetHashCode();
            }

            if (Content != null)
            {
                hash = hash * 59 + Content.GetHashCode();
            }

            if (Metadata != null)
            {
                hash = hash * 59 + Metadata.GetHashCode();
            }

            if (ConversationId != null)
            {
                hash = hash * 59 + ConversationId.GetHashCode();
            }

            return hash;
        }
    }
}
