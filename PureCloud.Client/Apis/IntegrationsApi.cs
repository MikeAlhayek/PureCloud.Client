using PureCloud.Client.Models;
using RestSharp;

namespace PureCloud.Client;


/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IIntegrationsApi : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// Delete integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>Integration</returns>

    Integration DeleteIntegration(string integrationId);

    /// <summary>
    /// Delete integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>ApiResponse of Integration</returns>

    ApiResponse<Integration> DeleteIntegrationWithHttpInfo(string integrationId);

    /// <summary>
    /// Delete an Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns></returns>

    void DeleteIntegrationsAction(string actionId);

    /// <summary>
    /// Delete an Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of Object(void)</returns>

    ApiResponse<object> DeleteIntegrationsActionWithHttpInfo(string actionId);

    /// <summary>
    /// Delete a Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns></returns>

    void DeleteIntegrationsActionDraft(string actionId);

    /// <summary>
    /// Delete a Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of Object(void)</returns>

    ApiResponse<object> DeleteIntegrationsActionDraftWithHttpInfo(string actionId);

    /// <summary>
    /// Delete a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns></returns>

    void DeleteIntegrationsCredential(string credentialId);

    /// <summary>
    /// Delete a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>ApiResponse of Object(void)</returns>

    ApiResponse<object> DeleteIntegrationsCredentialWithHttpInfo(string credentialId);

    /// <summary>
    /// Get integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Integration</returns>

    Integration GetIntegration(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// Get integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of Integration</returns>

    ApiResponse<Integration> GetIntegrationWithHttpInfo(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// Get integration configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>IntegrationConfiguration</returns>

    IntegrationConfiguration GetIntegrationConfigCurrent(string integrationId);

    /// <summary>
    /// Get integration configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>ApiResponse of IntegrationConfiguration</returns>

    ApiResponse<IntegrationConfiguration> GetIntegrationConfigCurrentWithHttpInfo(string integrationId);

    /// <summary>
    /// List integrations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>IntegrationEntityListing</returns>

    IntegrationEntityListing GetIntegrations(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// List integrations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of IntegrationEntityListing</returns>

    ApiResponse<IntegrationEntityListing> GetIntegrationsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// Retrieves a single Action matching id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Models.Action</returns>

    Models.Action GetIntegrationsAction(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null);

    /// <summary>
    /// Retrieves a single Action matching id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>ApiResponse of Models.Action</returns>

    ApiResponse<Models.Action> GetIntegrationsActionWithHttpInfo(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null);

    /// <summary>
    /// Retrieve a Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Models.Action</returns>

    Models.Action GetIntegrationsActionDraft(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null);

    /// <summary>
    /// Retrieve a Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>ApiResponse of Models.Action</returns>

    ApiResponse<Models.Action> GetIntegrationsActionDraftWithHttpInfo(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null);

    /// <summary>
    /// Get draft function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>FunctionConfig</returns>

    FunctionConfig GetIntegrationsActionDraftFunction(string actionId);

    /// <summary>
    /// Get draft function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of FunctionConfig</returns>

    ApiResponse<FunctionConfig> GetIntegrationsActionDraftFunctionWithHttpInfo(string actionId);

    /// <summary>
    /// Retrieve schema for a Draft based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this draft.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>JsonSchemaDocument</returns>

    JsonSchemaDocument GetIntegrationsActionDraftSchema(string actionId, string fileName, bool? flatten = null);

    /// <summary>
    /// Retrieve schema for a Draft based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this draft.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>ApiResponse of JsonSchemaDocument</returns>

    ApiResponse<JsonSchemaDocument> GetIntegrationsActionDraftSchemaWithHttpInfo(string actionId, string fileName, bool? flatten = null);

    /// <summary>
    /// Retrieve templates for a Draft based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action draft.</param>
    /// <returns>string</returns>

    string GetIntegrationsActionDraftTemplate(string actionId, string fileName);

    /// <summary>
    /// Retrieve templates for a Draft based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action draft.</param>
    /// <returns>ApiResponse of string</returns>

    ApiResponse<string> GetIntegrationsActionDraftTemplateWithHttpInfo(string actionId, string fileName);

    /// <summary>
    /// Validate current Draft configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>DraftValidationResult</returns>

    DraftValidationResult GetIntegrationsActionDraftValidation(string actionId);

    /// <summary>
    /// Validate current Draft configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of DraftValidationResult</returns>

    ApiResponse<DraftValidationResult> GetIntegrationsActionDraftValidationWithHttpInfo(string actionId);

    /// <summary>
    /// Get published function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>FunctionConfig</returns>

    FunctionConfig GetIntegrationsActionFunction(string actionId);

    /// <summary>
    /// Get published function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of FunctionConfig</returns>

    ApiResponse<FunctionConfig> GetIntegrationsActionFunctionWithHttpInfo(string actionId);

    /// <summary>
    /// Retrieve schema for an action based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this action.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>JsonSchemaDocument</returns>

    JsonSchemaDocument GetIntegrationsActionSchema(string actionId, string fileName, bool? flatten = null);

    /// <summary>
    /// Retrieve schema for an action based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this action.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>ApiResponse of JsonSchemaDocument</returns>

    ApiResponse<JsonSchemaDocument> GetIntegrationsActionSchemaWithHttpInfo(string actionId, string fileName, bool? flatten = null);

    /// <summary>
    /// Retrieve text of templates for an action based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action.</param>
    /// <returns>string</returns>

    string GetIntegrationsActionTemplate(string actionId, string fileName);

    /// <summary>
    /// Retrieve text of templates for an action based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action.</param>
    /// <returns>ApiResponse of string</returns>

    ApiResponse<string> GetIntegrationsActionTemplateWithHttpInfo(string actionId, string fileName);

    /// <summary>
    /// Retrieves all actions associated with filters passed in via query param.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>ActionEntityListing</returns>

    ActionEntityListing GetIntegrationsActions(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null);

    /// <summary>
    /// Retrieves all actions associated with filters passed in via query param.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>ApiResponse of ActionEntityListing</returns>

    ApiResponse<ActionEntityListing> GetIntegrationsActionsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null);

    /// <summary>
    /// Retrieves all categories of available Actions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on.  Only &#39;name&#39; is supported on this endpoint. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="secure">Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <returns>CategoryEntityListing</returns>

    CategoryEntityListing GetIntegrationsActionsCategories(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string secure = null);

    /// <summary>
    /// Retrieves all categories of available Actions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on.  Only &#39;name&#39; is supported on this endpoint. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="secure">Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <returns>ApiResponse of CategoryEntityListing</returns>

    ApiResponse<CategoryEntityListing> GetIntegrationsActionsCategoriesWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string secure = null);

    /// <summary>
    /// Retrieves the available mTLS client certificates in use. This endpoint will return inconsistent results while a certificate rotation is in progress.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="status">Indicates the validity of the certificate in question. (optional)</param>
    /// <param name="type">Indicates the type of the certificate. (optional)</param>
    /// <returns>ActionCertificateListing</returns>

    ActionCertificateListing GetIntegrationsActionsCertificates(string status = null, string type = null);

    /// <summary>
    /// Retrieves the available mTLS client certificates in use. This endpoint will return inconsistent results while a certificate rotation is in progress.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="status">Indicates the validity of the certificate in question. (optional)</param>
    /// <param name="type">Indicates the type of the certificate. (optional)</param>
    /// <returns>ApiResponse of ActionCertificateListing</returns>

    ApiResponse<ActionCertificateListing> GetIntegrationsActionsCertificatesWithHttpInfo(string status = null, string type = null);

    /// <summary>
    /// Retrieves basic info about trusted root CA certificates
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>TrustedCertificates</returns>

    TrustedCertificates GetIntegrationsActionsCertificatesTruststore();

    /// <summary>
    /// Retrieves basic info about trusted root CA certificates
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of TrustedCertificates</returns>

    ApiResponse<TrustedCertificates> GetIntegrationsActionsCertificatesTruststoreWithHttpInfo();

    /// <summary>
    /// Retrieves all action drafts associated with the filters passed in via query param.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>ActionEntityListing</returns>

    ActionEntityListing GetIntegrationsActionsDrafts(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null);

    /// <summary>
    /// Retrieves all action drafts associated with the filters passed in via query param.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>ApiResponse of ActionEntityListing</returns>

    ApiResponse<ActionEntityListing> GetIntegrationsActionsDraftsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null);

    /// <summary>
    /// Get action function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>List&lt;FunctionRuntime&gt;</returns>

    List<FunctionRuntime> GetIntegrationsActionsFunctionsRuntimes();

    /// <summary>
    /// Get action function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of List&lt;FunctionRuntime&gt;</returns>

    ApiResponse<List<FunctionRuntime>> GetIntegrationsActionsFunctionsRuntimesWithHttpInfo();

    /// <summary>
    /// Get a specific botConnector bot, plus versions, for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="version">Specific Version (optional)</param>
    /// <returns>BotConnectorBot</returns>

    BotConnectorBot GetIntegrationsBotconnectorIntegrationIdBot(string integrationId, string botId, string version = null);

    /// <summary>
    /// Get a specific botConnector bot, plus versions, for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="version">Specific Version (optional)</param>
    /// <returns>ApiResponse of BotConnectorBot</returns>

    ApiResponse<BotConnectorBot> GetIntegrationsBotconnectorIntegrationIdBotWithHttpInfo(string integrationId, string botId, string version = null);

    /// <summary>
    /// Get a list of bot versions for a bot
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this bot group</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>BotConnectorBotVersionSummaryEntityListing</returns>

    BotConnectorBotVersionSummaryEntityListing GetIntegrationsBotconnectorIntegrationIdBotVersions(string integrationId, string botId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a list of bot versions for a bot
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this bot group</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>ApiResponse of BotConnectorBotVersionSummaryEntityListing</returns>

    ApiResponse<BotConnectorBotVersionSummaryEntityListing> GetIntegrationsBotconnectorIntegrationIdBotVersionsWithHttpInfo(string integrationId, string botId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a list of botConnector bots for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <returns>BotList</returns>

    BotList GetIntegrationsBotconnectorIntegrationIdBots(string integrationId);

    /// <summary>
    /// Get a list of botConnector bots for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <returns>ApiResponse of BotList</returns>

    ApiResponse<BotList> GetIntegrationsBotconnectorIntegrationIdBotsWithHttpInfo(string integrationId);

    /// <summary>
    /// Get a summary list of botConnector bots for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>BotConnectorBotSummaryEntityListing</returns>

    BotConnectorBotSummaryEntityListing GetIntegrationsBotconnectorIntegrationIdBotsSummaries(string integrationId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a summary list of botConnector bots for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>ApiResponse of BotConnectorBotSummaryEntityListing</returns>

    ApiResponse<BotConnectorBotSummaryEntityListing> GetIntegrationsBotconnectorIntegrationIdBotsSummariesWithHttpInfo(string integrationId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// List permitted client app integrations for the logged in user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ClientAppEntityListing</returns>

    ClientAppEntityListing GetIntegrationsClientapps(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// List permitted client app integrations for the logged in user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of ClientAppEntityListing</returns>

    ApiResponse<ClientAppEntityListing> GetIntegrationsClientappsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// UC integration client application configuration.
    /// </summary>
    /// <remarks>
    /// Deprecated: Please use GET /integrations/unifiedcommunications/clientapps instead. This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>UCIntegrationListing</returns>
    [Obsolete]
    UCIntegrationListing GetIntegrationsClientappsUnifiedcommunications(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// UC integration client application configuration.
    /// </summary>
    /// <remarks>
    /// Deprecated: Please use GET /integrations/unifiedcommunications/clientapps instead. This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of UCIntegrationListing</returns>
    [Obsolete]
    ApiResponse<UCIntegrationListing> GetIntegrationsClientappsUnifiedcommunicationsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// Get a single credential with sensitive fields redacted
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>Credential</returns>

    Credential GetIntegrationsCredential(string credentialId);

    /// <summary>
    /// Get a single credential with sensitive fields redacted
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>ApiResponse of Credential</returns>

    ApiResponse<Credential> GetIntegrationsCredentialWithHttpInfo(string credentialId);

    /// <summary>
    /// List multiple sets of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>CredentialInfoListing</returns>

    CredentialInfoListing GetIntegrationsCredentials(int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// List multiple sets of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>ApiResponse of CredentialInfoListing</returns>

    ApiResponse<CredentialInfoListing> GetIntegrationsCredentialsWithHttpInfo(int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// List all credential types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>CredentialTypeListing</returns>

    CredentialTypeListing GetIntegrationsCredentialsTypes();

    /// <summary>
    /// List all credential types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of CredentialTypeListing</returns>

    ApiResponse<CredentialTypeListing> GetIntegrationsCredentialsTypesWithHttpInfo();

    /// <summary>
    /// Get a list of Audio Connector integrations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>AudioConnectorIntegrationEntityListing</returns>

    AudioConnectorIntegrationEntityListing GetIntegrationsSpeechAudioconnector(int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a list of Audio Connector integrations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>ApiResponse of AudioConnectorIntegrationEntityListing</returns>

    ApiResponse<AudioConnectorIntegrationEntityListing> GetIntegrationsSpeechAudioconnectorWithHttpInfo(int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get an Audio Connector integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID</param>
    /// <returns>AudioConnectorIntegration</returns>

    AudioConnectorIntegration GetIntegrationsSpeechAudioconnectorIntegrationId(string integrationId);

    /// <summary>
    /// Get an Audio Connector integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID</param>
    /// <returns>ApiResponse of AudioConnectorIntegration</returns>

    ApiResponse<AudioConnectorIntegration> GetIntegrationsSpeechAudioconnectorIntegrationIdWithHttpInfo(string integrationId);

    /// <summary>
    /// Get details about a Dialogflow agent
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>DialogflowAgent</returns>

    DialogflowAgent GetIntegrationsSpeechDialogflowAgent(string agentId);

    /// <summary>
    /// Get details about a Dialogflow agent
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>ApiResponse of DialogflowAgent</returns>

    ApiResponse<DialogflowAgent> GetIntegrationsSpeechDialogflowAgentWithHttpInfo(string agentId);

    /// <summary>
    /// Get a list of Dialogflow agents in the customers&#39; Google accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>DialogflowAgentSummaryEntityListing</returns>

    DialogflowAgentSummaryEntityListing GetIntegrationsSpeechDialogflowAgents(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a list of Dialogflow agents in the customers&#39; Google accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>ApiResponse of DialogflowAgentSummaryEntityListing</returns>

    ApiResponse<DialogflowAgentSummaryEntityListing> GetIntegrationsSpeechDialogflowAgentsWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get details about a Dialogflow CX agent
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>DialogflowCXAgent</returns>

    DialogflowCXAgent GetIntegrationsSpeechDialogflowcxAgent(string agentId);

    /// <summary>
    /// Get details about a Dialogflow CX agent
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>ApiResponse of DialogflowCXAgent</returns>

    ApiResponse<DialogflowCXAgent> GetIntegrationsSpeechDialogflowcxAgentWithHttpInfo(string agentId);

    /// <summary>
    /// Get a list of Dialogflow CX agents in the customers&#39; Google accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>DialogflowCXAgentSummaryEntityListing</returns>

    DialogflowCXAgentSummaryEntityListing GetIntegrationsSpeechDialogflowcxAgents(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a list of Dialogflow CX agents in the customers&#39; Google accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>ApiResponse of DialogflowCXAgentSummaryEntityListing</returns>

    ApiResponse<DialogflowCXAgentSummaryEntityListing> GetIntegrationsSpeechDialogflowcxAgentsWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get details about a Lex bot alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The alias ID</param>
    /// <returns>LexBotAlias</returns>

    LexBotAlias GetIntegrationsSpeechLexBotAlias(string aliasId);

    /// <summary>
    /// Get details about a Lex bot alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The alias ID</param>
    /// <returns>ApiResponse of LexBotAlias</returns>

    ApiResponse<LexBotAlias> GetIntegrationsSpeechLexBotAliasWithHttpInfo(string aliasId);

    /// <summary>
    /// Get a list of aliases for a bot in the customer&#39;s AWS accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>LexBotAliasEntityListing</returns>

    LexBotAliasEntityListing GetIntegrationsSpeechLexBotBotIdAliases(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null);

    /// <summary>
    /// Get a list of aliases for a bot in the customer&#39;s AWS accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>ApiResponse of LexBotAliasEntityListing</returns>

    ApiResponse<LexBotAliasEntityListing> GetIntegrationsSpeechLexBotBotIdAliasesWithHttpInfo(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null);

    /// <summary>
    /// Get a list of Lex bots in the customers&#39; AWS accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>LexBotEntityListing</returns>

    LexBotEntityListing GetIntegrationsSpeechLexBots(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a list of Lex bots in the customers&#39; AWS accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>ApiResponse of LexBotEntityListing</returns>

    ApiResponse<LexBotEntityListing> GetIntegrationsSpeechLexBotsWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get details about a Lex V2 bot alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The Alias ID</param>
    /// <returns>LexV2BotAlias</returns>

    LexV2BotAlias GetIntegrationsSpeechLexv2BotAlias(string aliasId);

    /// <summary>
    /// Get details about a Lex V2 bot alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The Alias ID</param>
    /// <returns>ApiResponse of LexV2BotAlias</returns>

    ApiResponse<LexV2BotAlias> GetIntegrationsSpeechLexv2BotAliasWithHttpInfo(string aliasId);

    /// <summary>
    /// Get a list of aliases for a Lex V2 bot
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The Bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>LexV2BotAliasEntityListing</returns>

    LexV2BotAliasEntityListing GetIntegrationsSpeechLexv2BotBotIdAliases(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null);

    /// <summary>
    /// Get a list of aliases for a Lex V2 bot
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The Bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>ApiResponse of LexV2BotAliasEntityListing</returns>

    ApiResponse<LexV2BotAliasEntityListing> GetIntegrationsSpeechLexv2BotBotIdAliasesWithHttpInfo(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null);

    /// <summary>
    /// Get a list of Lex V2 bots
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>LexV2BotEntityListing</returns>

    LexV2BotEntityListing GetIntegrationsSpeechLexv2Bots(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a list of Lex V2 bots
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>ApiResponse of LexV2BotEntityListing</returns>

    ApiResponse<LexV2BotEntityListing> GetIntegrationsSpeechLexv2BotsWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a Nuance bot in the specified Integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID to get</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="targetChannel">targetChannel (optional)</param>
    /// <returns>NuanceBot</returns>

    NuanceBot GetIntegrationsSpeechNuanceNuanceIntegrationIdBot(string nuanceIntegrationId, string botId, List<string> expand = null, string targetChannel = null);

    /// <summary>
    /// Get a Nuance bot in the specified Integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID to get</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="targetChannel">targetChannel (optional)</param>
    /// <returns>ApiResponse of NuanceBot</returns>

    ApiResponse<NuanceBot> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotWithHttpInfo(string nuanceIntegrationId, string botId, List<string> expand = null, string targetChannel = null);

    /// <summary>
    /// Get the status of an asynchronous Nuance bot GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>AsyncJob</returns>

    AsyncJob GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob(string nuanceIntegrationId, string botId, string jobId);

    /// <summary>
    /// Get the status of an asynchronous Nuance bot GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>ApiResponse of AsyncJob</returns>

    ApiResponse<AsyncJob> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobWithHttpInfo(string nuanceIntegrationId, string botId, string jobId);

    /// <summary>
    /// Get the result of an asynchronous Nuance bot GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>NuanceBot</returns>

    NuanceBot GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults(string nuanceIntegrationId, string botId, string jobId);

    /// <summary>
    /// Get the result of an asynchronous Nuance bot GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>ApiResponse of NuanceBot</returns>

    ApiResponse<NuanceBot> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResultsWithHttpInfo(string nuanceIntegrationId, string botId, string jobId);

    /// <summary>
    /// Get a list of Nuance bots available in the specified Integration
    /// </summary>
    /// <remarks>
    /// If the 'onlyRegisteredBots' param is set, the returned data will only include the Nuance bots which have configured client secrets within the Integration,  otherwise all of the Nuance bots available to the Integration's configured discovery credentials are returned.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>NuanceBotEntityListing</returns>

    NuanceBotEntityListing GetIntegrationsSpeechNuanceNuanceIntegrationIdBots(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null);

    /// <summary>
    /// Get a list of Nuance bots available in the specified Integration
    /// </summary>
    /// <remarks>
    /// If the 'onlyRegisteredBots' param is set, the returned data will only include the Nuance bots which have configured client secrets within the Integration,  otherwise all of the Nuance bots available to the Integration's configured discovery credentials are returned.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>ApiResponse of NuanceBotEntityListing</returns>

    ApiResponse<NuanceBotEntityListing> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsWithHttpInfo(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null);

    /// <summary>
    /// Get the status of an asynchronous Nuance bots GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>AsyncJob</returns>

    AsyncJob GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob(string nuanceIntegrationId, string jobId);

    /// <summary>
    /// Get the status of an asynchronous Nuance bots GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>ApiResponse of AsyncJob</returns>

    ApiResponse<AsyncJob> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobWithHttpInfo(string nuanceIntegrationId, string jobId);

    /// <summary>
    /// Get the result of an asynchronous Nuance bots GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>NuanceBotEntityListing</returns>

    NuanceBotEntityListing GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults(string nuanceIntegrationId, string jobId);

    /// <summary>
    /// Get the result of an asynchronous Nuance bots GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>ApiResponse of NuanceBotEntityListing</returns>

    ApiResponse<NuanceBotEntityListing> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResultsWithHttpInfo(string nuanceIntegrationId, string jobId);

    /// <summary>
    /// Get details about a STT engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <returns>SttEngineEntity</returns>

    SttEngineEntity GetIntegrationsSpeechSttEngine(string engineId);

    /// <summary>
    /// Get details about a STT engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <returns>ApiResponse of SttEngineEntity</returns>

    ApiResponse<SttEngineEntity> GetIntegrationsSpeechSttEngineWithHttpInfo(string engineId);

    /// <summary>
    /// Get a list of STT engines enabled for org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <returns>SttEngineEntityListing</returns>

    SttEngineEntityListing GetIntegrationsSpeechSttEngines(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a list of STT engines enabled for org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <returns>ApiResponse of SttEngineEntityListing</returns>

    ApiResponse<SttEngineEntityListing> GetIntegrationsSpeechSttEnginesWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get details about a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <returns>TtsEngineEntity</returns>

    TtsEngineEntity GetIntegrationsSpeechTtsEngine(string engineId, bool? includeVoices = null);

    /// <summary>
    /// Get details about a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <returns>ApiResponse of TtsEngineEntity</returns>

    ApiResponse<TtsEngineEntity> GetIntegrationsSpeechTtsEngineWithHttpInfo(string engineId, bool? includeVoices = null);

    /// <summary>
    /// Get details about a specific voice for a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="voiceId">The voice ID</param>
    /// <returns>TtsVoiceEntity</returns>

    TtsVoiceEntity GetIntegrationsSpeechTtsEngineVoice(string engineId, string voiceId);

    /// <summary>
    /// Get details about a specific voice for a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="voiceId">The voice ID</param>
    /// <returns>ApiResponse of TtsVoiceEntity</returns>

    ApiResponse<TtsVoiceEntity> GetIntegrationsSpeechTtsEngineVoiceWithHttpInfo(string engineId, string voiceId);

    /// <summary>
    /// Get a list of voices for a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>TtsVoiceEntityListing</returns>

    TtsVoiceEntityListing GetIntegrationsSpeechTtsEngineVoices(string engineId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a list of voices for a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>ApiResponse of TtsVoiceEntityListing</returns>

    ApiResponse<TtsVoiceEntityListing> GetIntegrationsSpeechTtsEngineVoicesWithHttpInfo(string engineId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a list of TTS engines enabled for org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <param name="language">Filter on supported language. If includeVoices&#x3D;true then the voices are also filtered. (optional)</param>
    /// <returns>TtsEngineEntityListing</returns>

    TtsEngineEntityListing GetIntegrationsSpeechTtsEngines(int? pageNumber = null, int? pageSize = null, bool? includeVoices = null, string name = null, string language = null);

    /// <summary>
    /// Get a list of TTS engines enabled for org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <param name="language">Filter on supported language. If includeVoices&#x3D;true then the voices are also filtered. (optional)</param>
    /// <returns>ApiResponse of TtsEngineEntityListing</returns>

    ApiResponse<TtsEngineEntityListing> GetIntegrationsSpeechTtsEnginesWithHttpInfo(int? pageNumber = null, int? pageSize = null, bool? includeVoices = null, string name = null, string language = null);

    /// <summary>
    /// Get TTS settings for an org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>TtsSettings</returns>

    TtsSettings GetIntegrationsSpeechTtsSettings();

    /// <summary>
    /// Get TTS settings for an org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of TtsSettings</returns>

    ApiResponse<TtsSettings> GetIntegrationsSpeechTtsSettingsWithHttpInfo();

    /// <summary>
    /// Get integration type.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <returns>IntegrationType</returns>

    IntegrationType GetIntegrationsType(string typeId);

    /// <summary>
    /// Get integration type.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <returns>ApiResponse of IntegrationType</returns>

    ApiResponse<IntegrationType> GetIntegrationsTypeWithHttpInfo(string typeId);

    /// <summary>
    /// Get properties config schema for an integration type.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <param name="configType">Config schema type</param>
    /// <returns>JsonSchemaDocument</returns>

    JsonSchemaDocument GetIntegrationsTypeConfigschema(string typeId, string configType);

    /// <summary>
    /// Get properties config schema for an integration type.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <param name="configType">Config schema type</param>
    /// <returns>ApiResponse of JsonSchemaDocument</returns>

    ApiResponse<JsonSchemaDocument> GetIntegrationsTypeConfigschemaWithHttpInfo(string typeId, string configType);

    /// <summary>
    /// List integration types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>IntegrationTypeEntityListing</returns>

    IntegrationTypeEntityListing GetIntegrationsTypes(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// List integration types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of IntegrationTypeEntityListing</returns>

    ApiResponse<IntegrationTypeEntityListing> GetIntegrationsTypesWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// UC integration client application configuration.
    /// </summary>
    /// <remarks>
    /// This endpoint returns basic UI configuration data for the specified Unified Communications integration client application.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">3rd Party Service Type</param>
    /// <returns>UnifiedCommunicationsIntegration</returns>

    UnifiedCommunicationsIntegration GetIntegrationsUnifiedcommunicationsClientapp(string ucIntegrationId);

    /// <summary>
    /// UC integration client application configuration.
    /// </summary>
    /// <remarks>
    /// This endpoint returns basic UI configuration data for the specified Unified Communications integration client application.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">3rd Party Service Type</param>
    /// <returns>ApiResponse of UnifiedCommunicationsIntegration</returns>

    ApiResponse<UnifiedCommunicationsIntegration> GetIntegrationsUnifiedcommunicationsClientappWithHttpInfo(string ucIntegrationId);

    /// <summary>
    /// List UC integration client application configurations.
    /// </summary>
    /// <remarks>
    /// This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>UnifiedCommunicationsIntegrationListing</returns>

    UnifiedCommunicationsIntegrationListing GetIntegrationsUnifiedcommunicationsClientapps(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// List UC integration client application configurations.
    /// </summary>
    /// <remarks>
    /// This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of UnifiedCommunicationsIntegrationListing</returns>

    ApiResponse<UnifiedCommunicationsIntegrationListing> GetIntegrationsUnifiedcommunicationsClientappsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// List permitted user app integrations for the logged in user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="appHost">The type of UserApp to filter by (optional)</param>
    /// <returns>UserAppEntityListing</returns>

    UserAppEntityListing GetIntegrationsUserapps(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, string appHost = null);

    /// <summary>
    /// List permitted user app integrations for the logged in user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="appHost">The type of UserApp to filter by (optional)</param>
    /// <returns>ApiResponse of UserAppEntityListing</returns>

    ApiResponse<UserAppEntityListing> GetIntegrationsUserappsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, string appHost = null);

    /// <summary>
    /// Update an integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="body">Integration Update (optional)</param>
    /// <returns>Integration</returns>

    Integration PatchIntegration(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, Integration body = null);

    /// <summary>
    /// Update an integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="body">Integration Update (optional)</param>
    /// <returns>ApiResponse of Integration</returns>

    ApiResponse<Integration> PatchIntegrationWithHttpInfo(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, Integration body = null);

    /// <summary>
    /// Patch an Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Models.Action</returns>

    Models.Action PatchIntegrationsAction(string actionId, UpdateActionInput body);

    /// <summary>
    /// Patch an Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>ApiResponse of Models.Action</returns>

    ApiResponse<Models.Action> PatchIntegrationsActionWithHttpInfo(string actionId, UpdateActionInput body);

    /// <summary>
    /// Update an existing Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action Draft.</param>
    /// <returns>Models.Action</returns>

    Models.Action PatchIntegrationsActionDraft(string actionId, UpdateDraftInput body);

    /// <summary>
    /// Update an existing Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action Draft.</param>
    /// <returns>ApiResponse of Models.Action</returns>

    ApiResponse<Models.Action> PatchIntegrationsActionDraftWithHttpInfo(string actionId, UpdateDraftInput body);

    /// <summary>
    /// Create an integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Integration (optional)</param>
    /// <returns>Integration</returns>

    Integration PostIntegrations(CreateIntegrationRequest body = null);

    /// <summary>
    /// Create an integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Integration (optional)</param>
    /// <returns>ApiResponse of Integration</returns>

    ApiResponse<Integration> PostIntegrationsWithHttpInfo(CreateIntegrationRequest body = null);

    /// <summary>
    /// Create a new Draft from existing Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Models.Action</returns>

    Models.Action PostIntegrationsActionDraft(string actionId);

    /// <summary>
    /// Create a new Draft from existing Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of Models.Action</returns>

    ApiResponse<Models.Action> PostIntegrationsActionDraftWithHttpInfo(string actionId);

    /// <summary>
    /// Create upload presigned URL for draft function package file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to request URL upload.</param>
    /// <returns>FunctionUploadResponse</returns>

    FunctionUploadResponse PostIntegrationsActionDraftFunctionUpload(string actionId, FunctionUploadRequest body);

    /// <summary>
    /// Create upload presigned URL for draft function package file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to request URL upload.</param>
    /// <returns>ApiResponse of FunctionUploadResponse</returns>

    ApiResponse<FunctionUploadResponse> PostIntegrationsActionDraftFunctionUploadWithHttpInfo(string actionId, FunctionUploadRequest body);

    /// <summary>
    /// Publish a Draft and make it the active Action configuration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Models.Action</returns>

    Models.Action PostIntegrationsActionDraftPublish(string actionId, PublishDraftInput body);

    /// <summary>
    /// Publish a Draft and make it the active Action configuration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>ApiResponse of Models.Action</returns>

    ApiResponse<Models.Action> PostIntegrationsActionDraftPublishWithHttpInfo(string actionId, PublishDraftInput body);

    /// <summary>
    /// Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>TestExecutionResult</returns>

    TestExecutionResult PostIntegrationsActionDraftTest(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>ApiResponse of TestExecutionResult</returns>

    ApiResponse<TestExecutionResult> PostIntegrationsActionDraftTestWithHttpInfo(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Object</returns>

    object PostIntegrationsActionExecute(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>ApiResponse of Object</returns>

    ApiResponse<object> PostIntegrationsActionExecuteWithHttpInfo(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>TestExecutionResult</returns>

    TestExecutionResult PostIntegrationsActionTest(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>ApiResponse of TestExecutionResult</returns>

    ApiResponse<TestExecutionResult> PostIntegrationsActionTestWithHttpInfo(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Create a new Action. Not supported for &#39;Function Integration&#39; actions. Function integrations must be created as drafts to allow managing of uploading required ZIP function package before they may be used as a published action.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action.</param>
    /// <returns>Models.Action</returns>

    Models.Action PostIntegrationsActions(PostActionInput body);

    /// <summary>
    /// Create a new Action. Not supported for &#39;Function Integration&#39; actions. Function integrations must be created as drafts to allow managing of uploading required ZIP function package before they may be used as a published action.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action.</param>
    /// <returns>ApiResponse of Models.Action</returns>

    ApiResponse<Models.Action> PostIntegrationsActionsWithHttpInfo(PostActionInput body);

    /// <summary>
    /// Create a new Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action Draft.</param>
    /// <returns>Models.Action</returns>

    Models.Action PostIntegrationsActionsDrafts(PostActionInput body);

    /// <summary>
    /// Create a new Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action Draft.</param>
    /// <returns>ApiResponse of Models.Action</returns>

    ApiResponse<Models.Action> PostIntegrationsActionsDraftsWithHttpInfo(PostActionInput body);

    /// <summary>
    /// Create a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Credential (optional)</param>
    /// <returns>CredentialInfo</returns>

    CredentialInfo PostIntegrationsCredentials(Credential body = null);

    /// <summary>
    /// Create a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Credential (optional)</param>
    /// <returns>ApiResponse of CredentialInfo</returns>

    ApiResponse<CredentialInfo> PostIntegrationsCredentialsWithHttpInfo(Credential body = null);

    /// <summary>
    /// Get a Nuance bot in the specified Integration asynchronously
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="body">targetChannel (optional)</param>
    /// <returns>AsyncJob</returns>

    AsyncJob PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs(string nuanceIntegrationId, string botId, List<string> expand = null, string body = null);

    /// <summary>
    /// Get a Nuance bot in the specified Integration asynchronously
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="body">targetChannel (optional)</param>
    /// <returns>ApiResponse of AsyncJob</returns>

    ApiResponse<AsyncJob> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobsWithHttpInfo(string nuanceIntegrationId, string botId, List<string> expand = null, string body = null);

    /// <summary>
    /// Get a list of Nuance bots in the specified Integration asynchronously
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>AsyncJob</returns>

    AsyncJob PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null);

    /// <summary>
    /// Get a list of Nuance bots in the specified Integration asynchronously
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>ApiResponse of AsyncJob</returns>

    ApiResponse<AsyncJob> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobsWithHttpInfo(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null);

    /// <summary>
    /// Try out a single credential for a Nuance bot to know if the secret is correct
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns></returns>

    void PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate(string nuanceIntegrationId, BotExecutionConfiguration settings);

    /// <summary>
    /// Try out a single credential for a Nuance bot to know if the secret is correct
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>ApiResponse of Object(void)</returns>

    ApiResponse<object> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidateWithHttpInfo(string nuanceIntegrationId, BotExecutionConfiguration settings);

    /// <summary>
    /// Invoke Webhook
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tokenId">The token of the webhook to be invoked</param>
    /// <param name="body">Webhook Invocation Payload</param>
    /// <returns>WebhookInvocationResponse</returns>

    WebhookInvocationResponse PostIntegrationsWebhookEvents(string tokenId, object body);

    /// <summary>
    /// Invoke Webhook
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tokenId">The token of the webhook to be invoked</param>
    /// <param name="body">Webhook Invocation Payload</param>
    /// <returns>ApiResponse of WebhookInvocationResponse</returns>

    ApiResponse<WebhookInvocationResponse> PostIntegrationsWebhookEventsWithHttpInfo(string tokenId, object body);

    /// <summary>
    /// Update integration configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="body">Integration Configuration (optional)</param>
    /// <returns>IntegrationConfiguration</returns>

    IntegrationConfiguration PutIntegrationConfigCurrent(string integrationId, IntegrationConfiguration body = null);

    /// <summary>
    /// Update integration configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="body">Integration Configuration (optional)</param>
    /// <returns>ApiResponse of IntegrationConfiguration</returns>

    ApiResponse<IntegrationConfiguration> PutIntegrationConfigCurrentWithHttpInfo(string integrationId, IntegrationConfiguration body = null);

    /// <summary>
    /// Update draft function settings.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to update function settings.</param>
    /// <returns>FunctionConfig</returns>

    FunctionConfig PutIntegrationsActionDraftFunction(string actionId, Function body);

    /// <summary>
    /// Update draft function settings.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to update function settings.</param>
    /// <returns>ApiResponse of FunctionConfig</returns>

    ApiResponse<FunctionConfig> PutIntegrationsActionDraftFunctionWithHttpInfo(string actionId, Function body);

    /// <summary>
    /// Set a list of botConnector bots plus versions for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botList"></param>
    /// <returns></returns>

    void PutIntegrationsBotconnectorIntegrationIdBots(string integrationId, BotList botList);

    /// <summary>
    /// Set a list of botConnector bots plus versions for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botList"></param>
    /// <returns>ApiResponse of Object(void)</returns>

    ApiResponse<object> PutIntegrationsBotconnectorIntegrationIdBotsWithHttpInfo(string integrationId, BotList botList);

    /// <summary>
    /// Update a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <param name="body">Credential (optional)</param>
    /// <returns>CredentialInfo</returns>

    CredentialInfo PutIntegrationsCredential(string credentialId, Credential body = null);

    /// <summary>
    /// Update a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <param name="body">Credential (optional)</param>
    /// <returns>ApiResponse of CredentialInfo</returns>

    ApiResponse<CredentialInfo> PutIntegrationsCredentialWithHttpInfo(string credentialId, Credential body = null);

    /// <summary>
    /// Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns></returns>

    void PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings(string nuanceIntegrationId, NuanceBotLaunchSettings settings);

    /// <summary>
    /// Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>ApiResponse of Object(void)</returns>

    ApiResponse<object> PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettingsWithHttpInfo(string nuanceIntegrationId, NuanceBotLaunchSettings settings);

    /// <summary>
    /// Update TTS settings for an org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Updated TtsSettings</param>
    /// <returns>TtsSettings</returns>

    TtsSettings PutIntegrationsSpeechTtsSettings(TtsSettings body);

    /// <summary>
    /// Update TTS settings for an org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Updated TtsSettings</param>
    /// <returns>ApiResponse of TtsSettings</returns>

    ApiResponse<TtsSettings> PutIntegrationsSpeechTtsSettingsWithHttpInfo(TtsSettings body);

    /// <summary>
    /// Bulk integration presence ingestion
    /// </summary>
    /// <remarks>
    /// This endpoint accepts bulk presence updates from a 3rd-party presence integration and maps the 3rd-party user to a Genesys Cloud user via the matching email address. The 3rd-party presence value will be mapped to a Genesys Cloud organization presence definition value.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">UC Integration ID</param>
    /// <param name="body">List of User presences</param>
    /// <returns>string</returns>

    string PutIntegrationsUnifiedcommunicationThirdpartypresences(string ucIntegrationId, List<UCThirdPartyPresence> body);

    /// <summary>
    /// Bulk integration presence ingestion
    /// </summary>
    /// <remarks>
    /// This endpoint accepts bulk presence updates from a 3rd-party presence integration and maps the 3rd-party user to a Genesys Cloud user via the matching email address. The 3rd-party presence value will be mapped to a Genesys Cloud organization presence definition value.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">UC Integration ID</param>
    /// <param name="body">List of User presences</param>
    /// <returns>ApiResponse of string</returns>

    ApiResponse<string> PutIntegrationsUnifiedcommunicationThirdpartypresencesWithHttpInfo(string ucIntegrationId, List<UCThirdPartyPresence> body);

    #endregion Synchronous Operations

    #region Asynchronous Operations

    /// <summary>
    /// Delete integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>Task of Integration</returns>

    Task<Integration> DeleteIntegrationAsync(string integrationId);

    /// <summary>
    /// Delete integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>Task of ApiResponse (Integration)</returns>

    Task<ApiResponse<Integration>> DeleteIntegrationAsyncWithHttpInfo(string integrationId);

    /// <summary>
    /// Delete an Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of void</returns>

    Task DeleteIntegrationsActionAsync(string actionId);

    /// <summary>
    /// Delete an Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse</returns>

    Task<ApiResponse<object>> DeleteIntegrationsActionAsyncWithHttpInfo(string actionId);

    /// <summary>
    /// Delete a Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of void</returns>

    Task DeleteIntegrationsActionDraftAsync(string actionId);

    /// <summary>
    /// Delete a Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse</returns>

    Task<ApiResponse<object>> DeleteIntegrationsActionDraftAsyncWithHttpInfo(string actionId);

    /// <summary>
    /// Delete a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>Task of void</returns>

    Task DeleteIntegrationsCredentialAsync(string credentialId);

    /// <summary>
    /// Delete a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>Task of ApiResponse</returns>

    Task<ApiResponse<object>> DeleteIntegrationsCredentialAsyncWithHttpInfo(string credentialId);

    /// <summary>
    /// Get integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of Integration</returns>

    Task<Integration> GetIntegrationAsync(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// Get integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (Integration)</returns>

    Task<ApiResponse<Integration>> GetIntegrationAsyncWithHttpInfo(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// Get integration configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>Task of IntegrationConfiguration</returns>

    Task<IntegrationConfiguration> GetIntegrationConfigCurrentAsync(string integrationId);

    /// <summary>
    /// Get integration configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>Task of ApiResponse (IntegrationConfiguration)</returns>

    Task<ApiResponse<IntegrationConfiguration>> GetIntegrationConfigCurrentAsyncWithHttpInfo(string integrationId);

    /// <summary>
    /// List integrations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of IntegrationEntityListing</returns>

    Task<IntegrationEntityListing> GetIntegrationsAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// List integrations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (IntegrationEntityListing)</returns>

    Task<ApiResponse<IntegrationEntityListing>> GetIntegrationsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// Retrieves a single Action matching id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Task of Models.Action</returns>

    Task<Models.Action> GetIntegrationsActionAsync(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null);

    /// <summary>
    /// Retrieves a single Action matching id.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    Task<ApiResponse<Models.Action>> GetIntegrationsActionAsyncWithHttpInfo(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null);

    /// <summary>
    /// Retrieve a Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Task of Models.Action</returns>

    Task<Models.Action> GetIntegrationsActionDraftAsync(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null);

    /// <summary>
    /// Retrieve a Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    Task<ApiResponse<Models.Action>> GetIntegrationsActionDraftAsyncWithHttpInfo(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null);

    /// <summary>
    /// Get draft function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of FunctionConfig</returns>

    Task<FunctionConfig> GetIntegrationsActionDraftFunctionAsync(string actionId);

    /// <summary>
    /// Get draft function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse (FunctionConfig)</returns>

    Task<ApiResponse<FunctionConfig>> GetIntegrationsActionDraftFunctionAsyncWithHttpInfo(string actionId);

    /// <summary>
    /// Retrieve schema for a Draft based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this draft.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of JsonSchemaDocument</returns>

    Task<JsonSchemaDocument> GetIntegrationsActionDraftSchemaAsync(string actionId, string fileName, bool? flatten = null);

    /// <summary>
    /// Retrieve schema for a Draft based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this draft.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (JsonSchemaDocument)</returns>

    Task<ApiResponse<JsonSchemaDocument>> GetIntegrationsActionDraftSchemaAsyncWithHttpInfo(string actionId, string fileName, bool? flatten = null);

    /// <summary>
    /// Retrieve templates for a Draft based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action draft.</param>
    /// <returns>Task of string</returns>

    Task<string> GetIntegrationsActionDraftTemplateAsync(string actionId, string fileName);

    /// <summary>
    /// Retrieve templates for a Draft based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action draft.</param>
    /// <returns>Task of ApiResponse (string)</returns>

    Task<ApiResponse<string>> GetIntegrationsActionDraftTemplateAsyncWithHttpInfo(string actionId, string fileName);

    /// <summary>
    /// Validate current Draft configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of DraftValidationResult</returns>

    Task<DraftValidationResult> GetIntegrationsActionDraftValidationAsync(string actionId);

    /// <summary>
    /// Validate current Draft configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse (DraftValidationResult)</returns>

    Task<ApiResponse<DraftValidationResult>> GetIntegrationsActionDraftValidationAsyncWithHttpInfo(string actionId);

    /// <summary>
    /// Get published function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of FunctionConfig</returns>

    Task<FunctionConfig> GetIntegrationsActionFunctionAsync(string actionId);

    /// <summary>
    /// Get published function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse (FunctionConfig)</returns>

    Task<ApiResponse<FunctionConfig>> GetIntegrationsActionFunctionAsyncWithHttpInfo(string actionId);

    /// <summary>
    /// Retrieve schema for an action based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this action.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of JsonSchemaDocument</returns>

    Task<JsonSchemaDocument> GetIntegrationsActionSchemaAsync(string actionId, string fileName, bool? flatten = null);

    /// <summary>
    /// Retrieve schema for an action based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this action.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (JsonSchemaDocument)</returns>

    Task<ApiResponse<JsonSchemaDocument>> GetIntegrationsActionSchemaAsyncWithHttpInfo(string actionId, string fileName, bool? flatten = null);

    /// <summary>
    /// Retrieve text of templates for an action based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action.</param>
    /// <returns>Task of string</returns>

    Task<string> GetIntegrationsActionTemplateAsync(string actionId, string fileName);

    /// <summary>
    /// Retrieve text of templates for an action based on filename.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action.</param>
    /// <returns>Task of ApiResponse (string)</returns>

    Task<ApiResponse<string>> GetIntegrationsActionTemplateAsyncWithHttpInfo(string actionId, string fileName);

    /// <summary>
    /// Retrieves all actions associated with filters passed in via query param.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>Task of ActionEntityListing</returns>

    Task<ActionEntityListing> GetIntegrationsActionsAsync(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null);

    /// <summary>
    /// Retrieves all actions associated with filters passed in via query param.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (ActionEntityListing)</returns>

    Task<ApiResponse<ActionEntityListing>> GetIntegrationsActionsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null);

    /// <summary>
    /// Retrieves all categories of available Actions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on.  Only &#39;name&#39; is supported on this endpoint. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="secure">Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <returns>Task of CategoryEntityListing</returns>

    Task<CategoryEntityListing> GetIntegrationsActionsCategoriesAsync(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string secure = null);

    /// <summary>
    /// Retrieves all categories of available Actions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on.  Only &#39;name&#39; is supported on this endpoint. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="secure">Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <returns>Task of ApiResponse (CategoryEntityListing)</returns>

    Task<ApiResponse<CategoryEntityListing>> GetIntegrationsActionsCategoriesAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string secure = null);

    /// <summary>
    /// Retrieves the available mTLS client certificates in use. This endpoint will return inconsistent results while a certificate rotation is in progress.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="status">Indicates the validity of the certificate in question. (optional)</param>
    /// <param name="type">Indicates the type of the certificate. (optional)</param>
    /// <returns>Task of ActionCertificateListing</returns>

    Task<ActionCertificateListing> GetIntegrationsActionsCertificatesAsync(string status = null, string type = null);

    /// <summary>
    /// Retrieves the available mTLS client certificates in use. This endpoint will return inconsistent results while a certificate rotation is in progress.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="status">Indicates the validity of the certificate in question. (optional)</param>
    /// <param name="type">Indicates the type of the certificate. (optional)</param>
    /// <returns>Task of ApiResponse (ActionCertificateListing)</returns>

    Task<ApiResponse<ActionCertificateListing>> GetIntegrationsActionsCertificatesAsyncWithHttpInfo(string status = null, string type = null);

    /// <summary>
    /// Retrieves basic info about trusted root CA certificates
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of TrustedCertificates</returns>

    Task<TrustedCertificates> GetIntegrationsActionsCertificatesTruststoreAsync();

    /// <summary>
    /// Retrieves basic info about trusted root CA certificates
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of ApiResponse (TrustedCertificates)</returns>

    Task<ApiResponse<TrustedCertificates>> GetIntegrationsActionsCertificatesTruststoreAsyncWithHttpInfo();

    /// <summary>
    /// Retrieves all action drafts associated with the filters passed in via query param.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>Task of ActionEntityListing</returns>

    Task<ActionEntityListing> GetIntegrationsActionsDraftsAsync(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null);

    /// <summary>
    /// Retrieves all action drafts associated with the filters passed in via query param.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (ActionEntityListing)</returns>

    Task<ApiResponse<ActionEntityListing>> GetIntegrationsActionsDraftsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null);

    /// <summary>
    /// Get action function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of List&lt;FunctionRuntime&gt;</returns>

    Task<List<FunctionRuntime>> GetIntegrationsActionsFunctionsRuntimesAsync();

    /// <summary>
    /// Get action function settings for Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of ApiResponse (List&lt;FunctionRuntime&gt;)</returns>

    Task<ApiResponse<List<FunctionRuntime>>> GetIntegrationsActionsFunctionsRuntimesAsyncWithHttpInfo();

    /// <summary>
    /// Get a specific botConnector bot, plus versions, for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="version">Specific Version (optional)</param>
    /// <returns>Task of BotConnectorBot</returns>

    Task<BotConnectorBot> GetIntegrationsBotconnectorIntegrationIdBotAsync(string integrationId, string botId, string version = null);

    /// <summary>
    /// Get a specific botConnector bot, plus versions, for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="version">Specific Version (optional)</param>
    /// <returns>Task of ApiResponse (BotConnectorBot)</returns>

    Task<ApiResponse<BotConnectorBot>> GetIntegrationsBotconnectorIntegrationIdBotAsyncWithHttpInfo(string integrationId, string botId, string version = null);

    /// <summary>
    /// Get a list of bot versions for a bot
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this bot group</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of BotConnectorBotVersionSummaryEntityListing</returns>

    Task<BotConnectorBotVersionSummaryEntityListing> GetIntegrationsBotconnectorIntegrationIdBotVersionsAsync(string integrationId, string botId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a list of bot versions for a bot
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this bot group</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of ApiResponse (BotConnectorBotVersionSummaryEntityListing)</returns>

    Task<ApiResponse<BotConnectorBotVersionSummaryEntityListing>> GetIntegrationsBotconnectorIntegrationIdBotVersionsAsyncWithHttpInfo(string integrationId, string botId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a list of botConnector bots for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <returns>Task of BotList</returns>

    Task<BotList> GetIntegrationsBotconnectorIntegrationIdBotsAsync(string integrationId);

    /// <summary>
    /// Get a list of botConnector bots for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <returns>Task of ApiResponse (BotList)</returns>

    Task<ApiResponse<BotList>> GetIntegrationsBotconnectorIntegrationIdBotsAsyncWithHttpInfo(string integrationId);

    /// <summary>
    /// Get a summary list of botConnector bots for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of BotConnectorBotSummaryEntityListing</returns>

    Task<BotConnectorBotSummaryEntityListing> GetIntegrationsBotconnectorIntegrationIdBotsSummariesAsync(string integrationId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a summary list of botConnector bots for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of ApiResponse (BotConnectorBotSummaryEntityListing)</returns>

    Task<ApiResponse<BotConnectorBotSummaryEntityListing>> GetIntegrationsBotconnectorIntegrationIdBotsSummariesAsyncWithHttpInfo(string integrationId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// List permitted client app integrations for the logged in user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ClientAppEntityListing</returns>

    Task<ClientAppEntityListing> GetIntegrationsClientappsAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// List permitted client app integrations for the logged in user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (ClientAppEntityListing)</returns>

    Task<ApiResponse<ClientAppEntityListing>> GetIntegrationsClientappsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// UC integration client application configuration.
    /// </summary>
    /// <remarks>
    /// Deprecated: Please use GET /integrations/unifiedcommunications/clientapps instead. This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of UCIntegrationListing</returns>
    [Obsolete]
    Task<UCIntegrationListing> GetIntegrationsClientappsUnifiedcommunicationsAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// UC integration client application configuration.
    /// </summary>
    /// <remarks>
    /// Deprecated: Please use GET /integrations/unifiedcommunications/clientapps instead. This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (UCIntegrationListing)</returns>
    [Obsolete]
    Task<ApiResponse<UCIntegrationListing>> GetIntegrationsClientappsUnifiedcommunicationsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// Get a single credential with sensitive fields redacted
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>Task of Credential</returns>

    Task<Credential> GetIntegrationsCredentialAsync(string credentialId);

    /// <summary>
    /// Get a single credential with sensitive fields redacted
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>Task of ApiResponse (Credential)</returns>

    Task<ApiResponse<Credential>> GetIntegrationsCredentialAsyncWithHttpInfo(string credentialId);

    /// <summary>
    /// List multiple sets of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of CredentialInfoListing</returns>

    Task<CredentialInfoListing> GetIntegrationsCredentialsAsync(int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// List multiple sets of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of ApiResponse (CredentialInfoListing)</returns>

    Task<ApiResponse<CredentialInfoListing>> GetIntegrationsCredentialsAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// List all credential types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of CredentialTypeListing</returns>

    Task<CredentialTypeListing> GetIntegrationsCredentialsTypesAsync();

    /// <summary>
    /// List all credential types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of ApiResponse (CredentialTypeListing)</returns>

    Task<ApiResponse<CredentialTypeListing>> GetIntegrationsCredentialsTypesAsyncWithHttpInfo();

    /// <summary>
    /// Get a list of Audio Connector integrations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of AudioConnectorIntegrationEntityListing</returns>

    Task<AudioConnectorIntegrationEntityListing> GetIntegrationsSpeechAudioconnectorAsync(int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a list of Audio Connector integrations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of ApiResponse (AudioConnectorIntegrationEntityListing)</returns>

    Task<ApiResponse<AudioConnectorIntegrationEntityListing>> GetIntegrationsSpeechAudioconnectorAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get an Audio Connector integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID</param>
    /// <returns>Task of AudioConnectorIntegration</returns>

    Task<AudioConnectorIntegration> GetIntegrationsSpeechAudioconnectorIntegrationIdAsync(string integrationId);

    /// <summary>
    /// Get an Audio Connector integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID</param>
    /// <returns>Task of ApiResponse (AudioConnectorIntegration)</returns>

    Task<ApiResponse<AudioConnectorIntegration>> GetIntegrationsSpeechAudioconnectorIntegrationIdAsyncWithHttpInfo(string integrationId);

    /// <summary>
    /// Get details about a Dialogflow agent
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>Task of DialogflowAgent</returns>

    Task<DialogflowAgent> GetIntegrationsSpeechDialogflowAgentAsync(string agentId);

    /// <summary>
    /// Get details about a Dialogflow agent
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>Task of ApiResponse (DialogflowAgent)</returns>

    Task<ApiResponse<DialogflowAgent>> GetIntegrationsSpeechDialogflowAgentAsyncWithHttpInfo(string agentId);

    /// <summary>
    /// Get a list of Dialogflow agents in the customers&#39; Google accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>Task of DialogflowAgentSummaryEntityListing</returns>

    Task<DialogflowAgentSummaryEntityListing> GetIntegrationsSpeechDialogflowAgentsAsync(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a list of Dialogflow agents in the customers&#39; Google accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>Task of ApiResponse (DialogflowAgentSummaryEntityListing)</returns>

    Task<ApiResponse<DialogflowAgentSummaryEntityListing>> GetIntegrationsSpeechDialogflowAgentsAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get details about a Dialogflow CX agent
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>Task of DialogflowCXAgent</returns>

    Task<DialogflowCXAgent> GetIntegrationsSpeechDialogflowcxAgentAsync(string agentId);

    /// <summary>
    /// Get details about a Dialogflow CX agent
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>Task of ApiResponse (DialogflowCXAgent)</returns>

    Task<ApiResponse<DialogflowCXAgent>> GetIntegrationsSpeechDialogflowcxAgentAsyncWithHttpInfo(string agentId);

    /// <summary>
    /// Get a list of Dialogflow CX agents in the customers&#39; Google accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>Task of DialogflowCXAgentSummaryEntityListing</returns>

    Task<DialogflowCXAgentSummaryEntityListing> GetIntegrationsSpeechDialogflowcxAgentsAsync(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a list of Dialogflow CX agents in the customers&#39; Google accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>Task of ApiResponse (DialogflowCXAgentSummaryEntityListing)</returns>

    Task<ApiResponse<DialogflowCXAgentSummaryEntityListing>> GetIntegrationsSpeechDialogflowcxAgentsAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get details about a Lex bot alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The alias ID</param>
    /// <returns>Task of LexBotAlias</returns>

    Task<LexBotAlias> GetIntegrationsSpeechLexBotAliasAsync(string aliasId);

    /// <summary>
    /// Get details about a Lex bot alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The alias ID</param>
    /// <returns>Task of ApiResponse (LexBotAlias)</returns>

    Task<ApiResponse<LexBotAlias>> GetIntegrationsSpeechLexBotAliasAsyncWithHttpInfo(string aliasId);

    /// <summary>
    /// Get a list of aliases for a bot in the customer&#39;s AWS accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>Task of LexBotAliasEntityListing</returns>

    Task<LexBotAliasEntityListing> GetIntegrationsSpeechLexBotBotIdAliasesAsync(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null);

    /// <summary>
    /// Get a list of aliases for a bot in the customer&#39;s AWS accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>Task of ApiResponse (LexBotAliasEntityListing)</returns>

    Task<ApiResponse<LexBotAliasEntityListing>> GetIntegrationsSpeechLexBotBotIdAliasesAsyncWithHttpInfo(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null);

    /// <summary>
    /// Get a list of Lex bots in the customers&#39; AWS accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>Task of LexBotEntityListing</returns>

    Task<LexBotEntityListing> GetIntegrationsSpeechLexBotsAsync(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a list of Lex bots in the customers&#39; AWS accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>Task of ApiResponse (LexBotEntityListing)</returns>

    Task<ApiResponse<LexBotEntityListing>> GetIntegrationsSpeechLexBotsAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get details about a Lex V2 bot alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The Alias ID</param>
    /// <returns>Task of LexV2BotAlias</returns>

    Task<LexV2BotAlias> GetIntegrationsSpeechLexv2BotAliasAsync(string aliasId);

    /// <summary>
    /// Get details about a Lex V2 bot alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The Alias ID</param>
    /// <returns>Task of ApiResponse (LexV2BotAlias)</returns>

    Task<ApiResponse<LexV2BotAlias>> GetIntegrationsSpeechLexv2BotAliasAsyncWithHttpInfo(string aliasId);

    /// <summary>
    /// Get a list of aliases for a Lex V2 bot
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The Bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>Task of LexV2BotAliasEntityListing</returns>

    Task<LexV2BotAliasEntityListing> GetIntegrationsSpeechLexv2BotBotIdAliasesAsync(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null);

    /// <summary>
    /// Get a list of aliases for a Lex V2 bot
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The Bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>Task of ApiResponse (LexV2BotAliasEntityListing)</returns>

    Task<ApiResponse<LexV2BotAliasEntityListing>> GetIntegrationsSpeechLexv2BotBotIdAliasesAsyncWithHttpInfo(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null);

    /// <summary>
    /// Get a list of Lex V2 bots
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>Task of LexV2BotEntityListing</returns>

    Task<LexV2BotEntityListing> GetIntegrationsSpeechLexv2BotsAsync(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a list of Lex V2 bots
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>Task of ApiResponse (LexV2BotEntityListing)</returns>

    Task<ApiResponse<LexV2BotEntityListing>> GetIntegrationsSpeechLexv2BotsAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a Nuance bot in the specified Integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID to get</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="targetChannel">targetChannel (optional)</param>
    /// <returns>Task of NuanceBot</returns>

    Task<NuanceBot> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotAsync(string nuanceIntegrationId, string botId, List<string> expand = null, string targetChannel = null);

    /// <summary>
    /// Get a Nuance bot in the specified Integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID to get</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="targetChannel">targetChannel (optional)</param>
    /// <returns>Task of ApiResponse (NuanceBot)</returns>

    Task<ApiResponse<NuanceBot>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotAsyncWithHttpInfo(string nuanceIntegrationId, string botId, List<string> expand = null, string targetChannel = null);

    /// <summary>
    /// Get the status of an asynchronous Nuance bot GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of AsyncJob</returns>

    Task<AsyncJob> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobAsync(string nuanceIntegrationId, string botId, string jobId);

    /// <summary>
    /// Get the status of an asynchronous Nuance bot GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of ApiResponse (AsyncJob)</returns>

    Task<ApiResponse<AsyncJob>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobAsyncWithHttpInfo(string nuanceIntegrationId, string botId, string jobId);

    /// <summary>
    /// Get the result of an asynchronous Nuance bot GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of NuanceBot</returns>

    Task<NuanceBot> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResultsAsync(string nuanceIntegrationId, string botId, string jobId);

    /// <summary>
    /// Get the result of an asynchronous Nuance bot GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of ApiResponse (NuanceBot)</returns>

    Task<ApiResponse<NuanceBot>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResultsAsyncWithHttpInfo(string nuanceIntegrationId, string botId, string jobId);

    /// <summary>
    /// Get a list of Nuance bots available in the specified Integration
    /// </summary>
    /// <remarks>
    /// If the 'onlyRegisteredBots' param is set, the returned data will only include the Nuance bots which have configured client secrets within the Integration,  otherwise all of the Nuance bots available to the Integration's configured discovery credentials are returned.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>Task of NuanceBotEntityListing</returns>

    Task<NuanceBotEntityListing> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsAsync(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null);

    /// <summary>
    /// Get a list of Nuance bots available in the specified Integration
    /// </summary>
    /// <remarks>
    /// If the 'onlyRegisteredBots' param is set, the returned data will only include the Nuance bots which have configured client secrets within the Integration,  otherwise all of the Nuance bots available to the Integration's configured discovery credentials are returned.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>Task of ApiResponse (NuanceBotEntityListing)</returns>

    Task<ApiResponse<NuanceBotEntityListing>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsAsyncWithHttpInfo(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null);

    /// <summary>
    /// Get the status of an asynchronous Nuance bots GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of AsyncJob</returns>

    Task<AsyncJob> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobAsync(string nuanceIntegrationId, string jobId);

    /// <summary>
    /// Get the status of an asynchronous Nuance bots GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of ApiResponse (AsyncJob)</returns>

    Task<ApiResponse<AsyncJob>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobAsyncWithHttpInfo(string nuanceIntegrationId, string jobId);

    /// <summary>
    /// Get the result of an asynchronous Nuance bots GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of NuanceBotEntityListing</returns>

    Task<NuanceBotEntityListing> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResultsAsync(string nuanceIntegrationId, string jobId);

    /// <summary>
    /// Get the result of an asynchronous Nuance bots GET job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of ApiResponse (NuanceBotEntityListing)</returns>

    Task<ApiResponse<NuanceBotEntityListing>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResultsAsyncWithHttpInfo(string nuanceIntegrationId, string jobId);

    /// <summary>
    /// Get details about a STT engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <returns>Task of SttEngineEntity</returns>

    Task<SttEngineEntity> GetIntegrationsSpeechSttEngineAsync(string engineId);

    /// <summary>
    /// Get details about a STT engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <returns>Task of ApiResponse (SttEngineEntity)</returns>

    Task<ApiResponse<SttEngineEntity>> GetIntegrationsSpeechSttEngineAsyncWithHttpInfo(string engineId);

    /// <summary>
    /// Get a list of STT engines enabled for org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <returns>Task of SttEngineEntityListing</returns>

    Task<SttEngineEntityListing> GetIntegrationsSpeechSttEnginesAsync(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get a list of STT engines enabled for org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <returns>Task of ApiResponse (SttEngineEntityListing)</returns>

    Task<ApiResponse<SttEngineEntityListing>> GetIntegrationsSpeechSttEnginesAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null);

    /// <summary>
    /// Get details about a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <returns>Task of TtsEngineEntity</returns>

    Task<TtsEngineEntity> GetIntegrationsSpeechTtsEngineAsync(string engineId, bool? includeVoices = null);

    /// <summary>
    /// Get details about a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <returns>Task of ApiResponse (TtsEngineEntity)</returns>

    Task<ApiResponse<TtsEngineEntity>> GetIntegrationsSpeechTtsEngineAsyncWithHttpInfo(string engineId, bool? includeVoices = null);

    /// <summary>
    /// Get details about a specific voice for a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="voiceId">The voice ID</param>
    /// <returns>Task of TtsVoiceEntity</returns>

    Task<TtsVoiceEntity> GetIntegrationsSpeechTtsEngineVoiceAsync(string engineId, string voiceId);

    /// <summary>
    /// Get details about a specific voice for a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="voiceId">The voice ID</param>
    /// <returns>Task of ApiResponse (TtsVoiceEntity)</returns>

    Task<ApiResponse<TtsVoiceEntity>> GetIntegrationsSpeechTtsEngineVoiceAsyncWithHttpInfo(string engineId, string voiceId);

    /// <summary>
    /// Get a list of voices for a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of TtsVoiceEntityListing</returns>

    Task<TtsVoiceEntityListing> GetIntegrationsSpeechTtsEngineVoicesAsync(string engineId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a list of voices for a TTS engine
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of ApiResponse (TtsVoiceEntityListing)</returns>

    Task<ApiResponse<TtsVoiceEntityListing>> GetIntegrationsSpeechTtsEngineVoicesAsyncWithHttpInfo(string engineId, int? pageNumber = null, int? pageSize = null);

    /// <summary>
    /// Get a list of TTS engines enabled for org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <param name="language">Filter on supported language. If includeVoices&#x3D;true then the voices are also filtered. (optional)</param>
    /// <returns>Task of TtsEngineEntityListing</returns>

    Task<TtsEngineEntityListing> GetIntegrationsSpeechTtsEnginesAsync(int? pageNumber = null, int? pageSize = null, bool? includeVoices = null, string name = null, string language = null);

    /// <summary>
    /// Get a list of TTS engines enabled for org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <param name="language">Filter on supported language. If includeVoices&#x3D;true then the voices are also filtered. (optional)</param>
    /// <returns>Task of ApiResponse (TtsEngineEntityListing)</returns>

    Task<ApiResponse<TtsEngineEntityListing>> GetIntegrationsSpeechTtsEnginesAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, bool? includeVoices = null, string name = null, string language = null);

    /// <summary>
    /// Get TTS settings for an org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of TtsSettings</returns>

    Task<TtsSettings> GetIntegrationsSpeechTtsSettingsAsync();

    /// <summary>
    /// Get TTS settings for an org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of ApiResponse (TtsSettings)</returns>

    Task<ApiResponse<TtsSettings>> GetIntegrationsSpeechTtsSettingsAsyncWithHttpInfo();

    /// <summary>
    /// Get integration type.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <returns>Task of IntegrationType</returns>

    Task<IntegrationType> GetIntegrationsTypeAsync(string typeId);

    /// <summary>
    /// Get integration type.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <returns>Task of ApiResponse (IntegrationType)</returns>

    Task<ApiResponse<IntegrationType>> GetIntegrationsTypeAsyncWithHttpInfo(string typeId);

    /// <summary>
    /// Get properties config schema for an integration type.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <param name="configType">Config schema type</param>
    /// <returns>Task of JsonSchemaDocument</returns>

    Task<JsonSchemaDocument> GetIntegrationsTypeConfigschemaAsync(string typeId, string configType);

    /// <summary>
    /// Get properties config schema for an integration type.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <param name="configType">Config schema type</param>
    /// <returns>Task of ApiResponse (JsonSchemaDocument)</returns>

    Task<ApiResponse<JsonSchemaDocument>> GetIntegrationsTypeConfigschemaAsyncWithHttpInfo(string typeId, string configType);

    /// <summary>
    /// List integration types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of IntegrationTypeEntityListing</returns>

    Task<IntegrationTypeEntityListing> GetIntegrationsTypesAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// List integration types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (IntegrationTypeEntityListing)</returns>

    Task<ApiResponse<IntegrationTypeEntityListing>> GetIntegrationsTypesAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// UC integration client application configuration.
    /// </summary>
    /// <remarks>
    /// This endpoint returns basic UI configuration data for the specified Unified Communications integration client application.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">3rd Party Service Type</param>
    /// <returns>Task of UnifiedCommunicationsIntegration</returns>

    Task<UnifiedCommunicationsIntegration> GetIntegrationsUnifiedcommunicationsClientappAsync(string ucIntegrationId);

    /// <summary>
    /// UC integration client application configuration.
    /// </summary>
    /// <remarks>
    /// This endpoint returns basic UI configuration data for the specified Unified Communications integration client application.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">3rd Party Service Type</param>
    /// <returns>Task of ApiResponse (UnifiedCommunicationsIntegration)</returns>

    Task<ApiResponse<UnifiedCommunicationsIntegration>> GetIntegrationsUnifiedcommunicationsClientappAsyncWithHttpInfo(string ucIntegrationId);

    /// <summary>
    /// List UC integration client application configurations.
    /// </summary>
    /// <remarks>
    /// This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of UnifiedCommunicationsIntegrationListing</returns>

    Task<UnifiedCommunicationsIntegrationListing> GetIntegrationsUnifiedcommunicationsClientappsAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// List UC integration client application configurations.
    /// </summary>
    /// <remarks>
    /// This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (UnifiedCommunicationsIntegrationListing)</returns>

    Task<ApiResponse<UnifiedCommunicationsIntegrationListing>> GetIntegrationsUnifiedcommunicationsClientappsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null);

    /// <summary>
    /// List permitted user app integrations for the logged in user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="appHost">The type of UserApp to filter by (optional)</param>
    /// <returns>Task of UserAppEntityListing</returns>

    Task<UserAppEntityListing> GetIntegrationsUserappsAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, string appHost = null);

    /// <summary>
    /// List permitted user app integrations for the logged in user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="appHost">The type of UserApp to filter by (optional)</param>
    /// <returns>Task of ApiResponse (UserAppEntityListing)</returns>

    Task<ApiResponse<UserAppEntityListing>> GetIntegrationsUserappsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, string appHost = null);

    /// <summary>
    /// Update an integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="body">Integration Update (optional)</param>
    /// <returns>Task of Integration</returns>

    Task<Integration> PatchIntegrationAsync(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, Integration body = null);

    /// <summary>
    /// Update an integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="body">Integration Update (optional)</param>
    /// <returns>Task of ApiResponse (Integration)</returns>

    Task<ApiResponse<Integration>> PatchIntegrationAsyncWithHttpInfo(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, Integration body = null);

    /// <summary>
    /// Patch an Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Task of Models.Action</returns>

    Task<Models.Action> PatchIntegrationsActionAsync(string actionId, UpdateActionInput body);

    /// <summary>
    /// Patch an Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    Task<ApiResponse<Models.Action>> PatchIntegrationsActionAsyncWithHttpInfo(string actionId, UpdateActionInput body);

    /// <summary>
    /// Update an existing Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action Draft.</param>
    /// <returns>Task of Models.Action</returns>

    Task<Models.Action> PatchIntegrationsActionDraftAsync(string actionId, UpdateDraftInput body);

    /// <summary>
    /// Update an existing Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action Draft.</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    Task<ApiResponse<Models.Action>> PatchIntegrationsActionDraftAsyncWithHttpInfo(string actionId, UpdateDraftInput body);

    /// <summary>
    /// Create an integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Integration (optional)</param>
    /// <returns>Task of Integration</returns>

    Task<Integration> PostIntegrationsAsync(CreateIntegrationRequest body = null);

    /// <summary>
    /// Create an integration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Integration (optional)</param>
    /// <returns>Task of ApiResponse (Integration)</returns>

    Task<ApiResponse<Integration>> PostIntegrationsAsyncWithHttpInfo(CreateIntegrationRequest body = null);

    /// <summary>
    /// Create a new Draft from existing Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of Models.Action</returns>

    Task<Models.Action> PostIntegrationsActionDraftAsync(string actionId);

    /// <summary>
    /// Create a new Draft from existing Action
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    Task<ApiResponse<Models.Action>> PostIntegrationsActionDraftAsyncWithHttpInfo(string actionId);

    /// <summary>
    /// Create upload presigned URL for draft function package file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to request URL upload.</param>
    /// <returns>Task of FunctionUploadResponse</returns>

    Task<FunctionUploadResponse> PostIntegrationsActionDraftFunctionUploadAsync(string actionId, FunctionUploadRequest body);

    /// <summary>
    /// Create upload presigned URL for draft function package file.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to request URL upload.</param>
    /// <returns>Task of ApiResponse (FunctionUploadResponse)</returns>

    Task<ApiResponse<FunctionUploadResponse>> PostIntegrationsActionDraftFunctionUploadAsyncWithHttpInfo(string actionId, FunctionUploadRequest body);

    /// <summary>
    /// Publish a Draft and make it the active Action configuration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Task of Models.Action</returns>

    Task<Models.Action> PostIntegrationsActionDraftPublishAsync(string actionId, PublishDraftInput body);

    /// <summary>
    /// Publish a Draft and make it the active Action configuration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    Task<ApiResponse<Models.Action>> PostIntegrationsActionDraftPublishAsyncWithHttpInfo(string actionId, PublishDraftInput body);

    /// <summary>
    /// Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of TestExecutionResult</returns>

    Task<TestExecutionResult> PostIntegrationsActionDraftTestAsync(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (TestExecutionResult)</returns>

    Task<ApiResponse<TestExecutionResult>> PostIntegrationsActionDraftTestAsyncWithHttpInfo(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of Object</returns>

    Task<object> PostIntegrationsActionExecuteAsync(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (Object)</returns>

    Task<ApiResponse<object>> PostIntegrationsActionExecuteAsyncWithHttpInfo(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of TestExecutionResult</returns>

    Task<TestExecutionResult> PostIntegrationsActionTestAsync(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (TestExecutionResult)</returns>

    Task<ApiResponse<TestExecutionResult>> PostIntegrationsActionTestAsyncWithHttpInfo(string actionId, object body, bool? flatten = null);

    /// <summary>
    /// Create a new Action. Not supported for &#39;Function Integration&#39; actions. Function integrations must be created as drafts to allow managing of uploading required ZIP function package before they may be used as a published action.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action.</param>
    /// <returns>Task of Models.Action</returns>

    Task<Models.Action> PostIntegrationsActionsAsync(PostActionInput body);

    /// <summary>
    /// Create a new Action. Not supported for &#39;Function Integration&#39; actions. Function integrations must be created as drafts to allow managing of uploading required ZIP function package before they may be used as a published action.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action.</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    Task<ApiResponse<Models.Action>> PostIntegrationsActionsAsyncWithHttpInfo(PostActionInput body);

    /// <summary>
    /// Create a new Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action Draft.</param>
    /// <returns>Task of Models.Action</returns>

    Task<Models.Action> PostIntegrationsActionsDraftsAsync(PostActionInput body);

    /// <summary>
    /// Create a new Draft
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action Draft.</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    Task<ApiResponse<Models.Action>> PostIntegrationsActionsDraftsAsyncWithHttpInfo(PostActionInput body);

    /// <summary>
    /// Create a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Credential (optional)</param>
    /// <returns>Task of CredentialInfo</returns>

    Task<CredentialInfo> PostIntegrationsCredentialsAsync(Credential body = null);

    /// <summary>
    /// Create a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Credential (optional)</param>
    /// <returns>Task of ApiResponse (CredentialInfo)</returns>

    Task<ApiResponse<CredentialInfo>> PostIntegrationsCredentialsAsyncWithHttpInfo(Credential body = null);

    /// <summary>
    /// Get a Nuance bot in the specified Integration asynchronously
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="body">targetChannel (optional)</param>
    /// <returns>Task of AsyncJob</returns>

    Task<AsyncJob> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobsAsync(string nuanceIntegrationId, string botId, List<string> expand = null, string body = null);

    /// <summary>
    /// Get a Nuance bot in the specified Integration asynchronously
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="body">targetChannel (optional)</param>
    /// <returns>Task of ApiResponse (AsyncJob)</returns>

    Task<ApiResponse<AsyncJob>> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobsAsyncWithHttpInfo(string nuanceIntegrationId, string botId, List<string> expand = null, string body = null);

    /// <summary>
    /// Get a list of Nuance bots in the specified Integration asynchronously
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>Task of AsyncJob</returns>

    Task<AsyncJob> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobsAsync(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null);

    /// <summary>
    /// Get a list of Nuance bots in the specified Integration asynchronously
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>Task of ApiResponse (AsyncJob)</returns>

    Task<ApiResponse<AsyncJob>> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobsAsyncWithHttpInfo(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null);

    /// <summary>
    /// Try out a single credential for a Nuance bot to know if the secret is correct
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>Task of void</returns>

    Task PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidateAsync(string nuanceIntegrationId, BotExecutionConfiguration settings);

    /// <summary>
    /// Try out a single credential for a Nuance bot to know if the secret is correct
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>Task of ApiResponse</returns>

    Task<ApiResponse<object>> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidateAsyncWithHttpInfo(string nuanceIntegrationId, BotExecutionConfiguration settings);

    /// <summary>
    /// Invoke Webhook
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tokenId">The token of the webhook to be invoked</param>
    /// <param name="body">Webhook Invocation Payload</param>
    /// <returns>Task of WebhookInvocationResponse</returns>

    Task<WebhookInvocationResponse> PostIntegrationsWebhookEventsAsync(string tokenId, object body);

    /// <summary>
    /// Invoke Webhook
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tokenId">The token of the webhook to be invoked</param>
    /// <param name="body">Webhook Invocation Payload</param>
    /// <returns>Task of ApiResponse (WebhookInvocationResponse)</returns>

    Task<ApiResponse<WebhookInvocationResponse>> PostIntegrationsWebhookEventsAsyncWithHttpInfo(string tokenId, object body);

    /// <summary>
    /// Update integration configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="body">Integration Configuration (optional)</param>
    /// <returns>Task of IntegrationConfiguration</returns>

    Task<IntegrationConfiguration> PutIntegrationConfigCurrentAsync(string integrationId, IntegrationConfiguration body = null);

    /// <summary>
    /// Update integration configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="body">Integration Configuration (optional)</param>
    /// <returns>Task of ApiResponse (IntegrationConfiguration)</returns>

    Task<ApiResponse<IntegrationConfiguration>> PutIntegrationConfigCurrentAsyncWithHttpInfo(string integrationId, IntegrationConfiguration body = null);

    /// <summary>
    /// Update draft function settings.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to update function settings.</param>
    /// <returns>Task of FunctionConfig</returns>

    Task<FunctionConfig> PutIntegrationsActionDraftFunctionAsync(string actionId, Function body);

    /// <summary>
    /// Update draft function settings.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to update function settings.</param>
    /// <returns>Task of ApiResponse (FunctionConfig)</returns>

    Task<ApiResponse<FunctionConfig>> PutIntegrationsActionDraftFunctionAsyncWithHttpInfo(string actionId, Function body);

    /// <summary>
    /// Set a list of botConnector bots plus versions for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botList"></param>
    /// <returns>Task of void</returns>

    Task PutIntegrationsBotconnectorIntegrationIdBotsAsync(string integrationId, BotList botList);

    /// <summary>
    /// Set a list of botConnector bots plus versions for this integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botList"></param>
    /// <returns>Task of ApiResponse</returns>

    Task<ApiResponse<object>> PutIntegrationsBotconnectorIntegrationIdBotsAsyncWithHttpInfo(string integrationId, BotList botList);

    /// <summary>
    /// Update a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <param name="body">Credential (optional)</param>
    /// <returns>Task of CredentialInfo</returns>

    Task<CredentialInfo> PutIntegrationsCredentialAsync(string credentialId, Credential body = null);

    /// <summary>
    /// Update a set of credentials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <param name="body">Credential (optional)</param>
    /// <returns>Task of ApiResponse (CredentialInfo)</returns>

    Task<ApiResponse<CredentialInfo>> PutIntegrationsCredentialAsyncWithHttpInfo(string credentialId, Credential body = null);

    /// <summary>
    /// Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>Task of void</returns>

    Task PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettingsAsync(string nuanceIntegrationId, NuanceBotLaunchSettings settings);

    /// <summary>
    /// Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>Task of ApiResponse</returns>

    Task<ApiResponse<object>> PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettingsAsyncWithHttpInfo(string nuanceIntegrationId, NuanceBotLaunchSettings settings);

    /// <summary>
    /// Update TTS settings for an org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Updated TtsSettings</param>
    /// <returns>Task of TtsSettings</returns>

    Task<TtsSettings> PutIntegrationsSpeechTtsSettingsAsync(TtsSettings body);

    /// <summary>
    /// Update TTS settings for an org
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Updated TtsSettings</param>
    /// <returns>Task of ApiResponse (TtsSettings)</returns>

    Task<ApiResponse<TtsSettings>> PutIntegrationsSpeechTtsSettingsAsyncWithHttpInfo(TtsSettings body);

    /// <summary>
    /// Bulk integration presence ingestion
    /// </summary>
    /// <remarks>
    /// This endpoint accepts bulk presence updates from a 3rd-party presence integration and maps the 3rd-party user to a Genesys Cloud user via the matching email address. The 3rd-party presence value will be mapped to a Genesys Cloud organization presence definition value.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">UC Integration ID</param>
    /// <param name="body">List of User presences</param>
    /// <returns>Task of string</returns>

    Task<string> PutIntegrationsUnifiedcommunicationThirdpartypresencesAsync(string ucIntegrationId, List<UCThirdPartyPresence> body);

    /// <summary>
    /// Bulk integration presence ingestion
    /// </summary>
    /// <remarks>
    /// This endpoint accepts bulk presence updates from a 3rd-party presence integration and maps the 3rd-party user to a Genesys Cloud user via the matching email address. The 3rd-party presence value will be mapped to a Genesys Cloud organization presence definition value.
    /// </remarks>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">UC Integration ID</param>
    /// <param name="body">List of User presences</param>
    /// <returns>Task of ApiResponse (string)</returns>

    Task<ApiResponse<string>> PutIntegrationsUnifiedcommunicationThirdpartypresencesAsyncWithHttpInfo(string ucIntegrationId, List<UCThirdPartyPresence> body);

    #endregion Asynchronous Operations

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class IntegrationsApi : IIntegrationsApi
{
    /// <summary>
    /// Initializes a new instance of the <see cref="IntegrationsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public IntegrationsApi(string basePath)
    {
        Configuration = new Configuration(new ApiClient(basePath));

        // ensure API client has configuration ready
        if (Configuration.ApiClient.Configuration == null)
        {
            Configuration.ApiClient.Configuration = Configuration;
        }
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="IntegrationsApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public IntegrationsApi(Configuration configuration = null)
    {
        if (configuration == null) // use the default one in Configuration
        {
            Configuration = Configuration.Default;
        }
        else
        {
            Configuration = configuration;
        }

        // ensure API client has configuration ready
        if (Configuration.ApiClient.Configuration == null)
        {
            Configuration.ApiClient.Configuration = Configuration;
        }
    }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.ApiClient.ClientOptions.BaseUrl.ToString();
    }

    /// <summary>
    /// Sets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    [Obsolete("SetBasePath is deprecated, please do 'this.Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
    public void SetBasePath(string basePath)
    {
        // do nothing
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public Configuration Configuration { get; set; }

    /// <summary>
    /// Gets the default header.
    /// </summary>
    /// <returns>Dictionary of HTTP header</returns>
    [Obsolete("DefaultHeader is deprecated, please use this.Configuration.DefaultHeader instead.")]
    public Dictionary<string, string> DefaultHeader()
    {
        return Configuration.DefaultHeader;
    }

    /// <summary>
    /// Add default header.
    /// </summary>
    /// <param name="key">Header field name.</param>
    /// <param name="value">Header field value.</param>
    /// <returns></returns>
    [Obsolete("AddDefaultHeader is deprecated, please use this.Configuration.AddDefaultHeader instead.")]
    public void AddDefaultHeader(string key, string value)
    {
        Configuration.AddDefaultHeader(key, value);
    }


    /// <summary>
    /// Delete integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>Integration</returns>

    public Integration DeleteIntegration(string integrationId)
    {
        ApiResponse<Integration> localVarResponse = DeleteIntegrationWithHttpInfo(integrationId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Delete integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>ApiResponse of Integration</returns>

    public ApiResponse<Integration> DeleteIntegrationWithHttpInfo(string integrationId)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->DeleteIntegration");
        }

        var localVarPath = "/api/v2/integrations/{integrationId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegration: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegration: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Integration>(localVarStatusCode,
            localVarHeaders,
            (Integration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Integration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Delete integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>Task of Integration</returns>

    public async Task<Integration> DeleteIntegrationAsync(string integrationId)
    {
        ApiResponse<Integration> localVarResponse = await DeleteIntegrationAsyncWithHttpInfo(integrationId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Delete integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>Task of ApiResponse (Integration)</returns>

    public async Task<ApiResponse<Integration>> DeleteIntegrationAsyncWithHttpInfo(string integrationId)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->DeleteIntegration");
        }

        var localVarPath = "/api/v2/integrations/{integrationId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegration: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegration: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Integration>(localVarStatusCode,
            localVarHeaders,
            (Integration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Integration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Delete an Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns></returns>

    public void DeleteIntegrationsAction(string actionId)
    {
        DeleteIntegrationsActionWithHttpInfo(actionId);
    }

    /// <summary>
    /// Delete an Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of Object(void)</returns>

    public ApiResponse<object> DeleteIntegrationsActionWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->DeleteIntegrationsAction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsAction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsAction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Delete an Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of void</returns>

    public async Task DeleteIntegrationsActionAsync(string actionId)
    {
        await DeleteIntegrationsActionAsyncWithHttpInfo(actionId);

    }

    /// <summary>
    /// Delete an Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse</returns>

    public async Task<ApiResponse<object>> DeleteIntegrationsActionAsyncWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->DeleteIntegrationsAction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsAction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsAction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Delete a Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns></returns>

    public void DeleteIntegrationsActionDraft(string actionId)
    {
        DeleteIntegrationsActionDraftWithHttpInfo(actionId);
    }

    /// <summary>
    /// Delete a Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of Object(void)</returns>

    public ApiResponse<object> DeleteIntegrationsActionDraftWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->DeleteIntegrationsActionDraft");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsActionDraft: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsActionDraft: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Delete a Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of void</returns>

    public async Task DeleteIntegrationsActionDraftAsync(string actionId)
    {
        await DeleteIntegrationsActionDraftAsyncWithHttpInfo(actionId);

    }

    /// <summary>
    /// Delete a Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse</returns>

    public async Task<ApiResponse<object>> DeleteIntegrationsActionDraftAsyncWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->DeleteIntegrationsActionDraft");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsActionDraft: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsActionDraft: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Delete a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns></returns>

    public void DeleteIntegrationsCredential(string credentialId)
    {
        DeleteIntegrationsCredentialWithHttpInfo(credentialId);
    }

    /// <summary>
    /// Delete a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>ApiResponse of Object(void)</returns>

    public ApiResponse<object> DeleteIntegrationsCredentialWithHttpInfo(string credentialId)
    {
        // verify the required parameter 'credentialId' is set
        if (credentialId == null)
        {
            throw new ApiException(400, "Missing required parameter 'credentialId' when calling IntegrationsApi->DeleteIntegrationsCredential");
        }

        var localVarPath = "/api/v2/integrations/credentials/{credentialId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (credentialId != null)
        {
            localVarPathParams.Add("credentialId", Configuration.ApiClient.ParameterToString(credentialId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsCredential: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsCredential: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Delete a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>Task of void</returns>

    public async Task DeleteIntegrationsCredentialAsync(string credentialId)
    {
        await DeleteIntegrationsCredentialAsyncWithHttpInfo(credentialId);

    }

    /// <summary>
    /// Delete a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>Task of ApiResponse</returns>

    public async Task<ApiResponse<object>> DeleteIntegrationsCredentialAsyncWithHttpInfo(string credentialId)
    {
        // verify the required parameter 'credentialId' is set
        if (credentialId == null)
        {
            throw new ApiException(400, "Missing required parameter 'credentialId' when calling IntegrationsApi->DeleteIntegrationsCredential");
        }

        var localVarPath = "/api/v2/integrations/credentials/{credentialId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (credentialId != null)
        {
            localVarPathParams.Add("credentialId", Configuration.ApiClient.ParameterToString(credentialId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsCredential: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling DeleteIntegrationsCredential: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Integration</returns>

    public Integration GetIntegration(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<Integration> localVarResponse = GetIntegrationWithHttpInfo(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of Integration</returns>

    public ApiResponse<Integration> GetIntegrationWithHttpInfo(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegration");
        }

        var localVarPath = "/api/v2/integrations/{integrationId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegration: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegration: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Integration>(localVarStatusCode,
            localVarHeaders,
            (Integration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Integration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of Integration</returns>

    public async Task<Integration> GetIntegrationAsync(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<Integration> localVarResponse = await GetIntegrationAsyncWithHttpInfo(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (Integration)</returns>

    public async Task<ApiResponse<Integration>> GetIntegrationAsyncWithHttpInfo(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegration");
        }

        var localVarPath = "/api/v2/integrations/{integrationId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegration: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegration: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Integration>(localVarStatusCode,
            localVarHeaders,
            (Integration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Integration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get integration configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>IntegrationConfiguration</returns>

    public IntegrationConfiguration GetIntegrationConfigCurrent(string integrationId)
    {
        ApiResponse<IntegrationConfiguration> localVarResponse = GetIntegrationConfigCurrentWithHttpInfo(integrationId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get integration configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>ApiResponse of IntegrationConfiguration</returns>

    public ApiResponse<IntegrationConfiguration> GetIntegrationConfigCurrentWithHttpInfo(string integrationId)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationConfigCurrent");
        }

        var localVarPath = "/api/v2/integrations/{integrationId}/config/current";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationConfigCurrent: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationConfigCurrent: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<IntegrationConfiguration>(localVarStatusCode,
            localVarHeaders,
            (IntegrationConfiguration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationConfiguration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get integration configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>Task of IntegrationConfiguration</returns>

    public async Task<IntegrationConfiguration> GetIntegrationConfigCurrentAsync(string integrationId)
    {
        ApiResponse<IntegrationConfiguration> localVarResponse = await GetIntegrationConfigCurrentAsyncWithHttpInfo(integrationId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get integration configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <returns>Task of ApiResponse (IntegrationConfiguration)</returns>

    public async Task<ApiResponse<IntegrationConfiguration>> GetIntegrationConfigCurrentAsyncWithHttpInfo(string integrationId)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationConfigCurrent");
        }

        var localVarPath = "/api/v2/integrations/{integrationId}/config/current";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationConfigCurrent: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationConfigCurrent: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<IntegrationConfiguration>(localVarStatusCode,
            localVarHeaders,
            (IntegrationConfiguration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationConfiguration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// List integrations 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>IntegrationEntityListing</returns>

    public IntegrationEntityListing GetIntegrations(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<IntegrationEntityListing> localVarResponse = GetIntegrationsWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;
    }

    /// <summary>
    /// List integrations 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of IntegrationEntityListing</returns>

    public ApiResponse<IntegrationEntityListing> GetIntegrationsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {

        var localVarPath = "/api/v2/integrations";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<IntegrationEntityListing>(localVarStatusCode,
            localVarHeaders,
            (IntegrationEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// List integrations 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of IntegrationEntityListing</returns>

    public async Task<IntegrationEntityListing> GetIntegrationsAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<IntegrationEntityListing> localVarResponse = await GetIntegrationsAsyncWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;

    }

    /// <summary>
    /// List integrations 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (IntegrationEntityListing)</returns>

    public async Task<ApiResponse<IntegrationEntityListing>> GetIntegrationsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {

        var localVarPath = "/api/v2/integrations";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<IntegrationEntityListing>(localVarStatusCode,
            localVarHeaders,
            (IntegrationEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieves a single Action matching id. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Models.Action</returns>

    public Models.Action GetIntegrationsAction(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null)
    {
        ApiResponse<Models.Action> localVarResponse = GetIntegrationsActionWithHttpInfo(actionId, expand, flatten, includeConfig);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieves a single Action matching id. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>ApiResponse of Models.Action</returns>

    public ApiResponse<Models.Action> GetIntegrationsActionWithHttpInfo(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsAction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params
        if (expand != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(expand)));
        }

        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        if (includeConfig != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeConfig", Configuration.ApiClient.ParameterToString(includeConfig)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsAction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsAction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieves a single Action matching id. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Task of Models.Action</returns>

    public async Task<Models.Action> GetIntegrationsActionAsync(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null)
    {
        ApiResponse<Models.Action> localVarResponse = await GetIntegrationsActionAsyncWithHttpInfo(actionId, expand, flatten, includeConfig);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieves a single Action matching id. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    public async Task<ApiResponse<Models.Action>> GetIntegrationsActionAsyncWithHttpInfo(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsAction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params
        if (expand != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(expand)));
        }

        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        if (includeConfig != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeConfig", Configuration.ApiClient.ParameterToString(includeConfig)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsAction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsAction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieve a Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Models.Action</returns>

    public Models.Action GetIntegrationsActionDraft(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null)
    {
        ApiResponse<Models.Action> localVarResponse = GetIntegrationsActionDraftWithHttpInfo(actionId, expand, flatten, includeConfig);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieve a Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>ApiResponse of Models.Action</returns>

    public ApiResponse<Models.Action> GetIntegrationsActionDraftWithHttpInfo(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionDraft");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params
        if (expand != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(expand)));
        }

        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        if (includeConfig != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeConfig", Configuration.ApiClient.ParameterToString(includeConfig)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraft: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraft: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieve a Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Task of Models.Action</returns>

    public async Task<Models.Action> GetIntegrationsActionDraftAsync(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null)
    {
        ApiResponse<Models.Action> localVarResponse = await GetIntegrationsActionDraftAsyncWithHttpInfo(actionId, expand, flatten, includeConfig);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieve a Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="expand">Indicates a field in the response which should be expanded. (optional)</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <param name="includeConfig">Return config in response. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    public async Task<ApiResponse<Models.Action>> GetIntegrationsActionDraftAsyncWithHttpInfo(string actionId, string expand = null, bool? flatten = null, bool? includeConfig = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionDraft");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params
        if (expand != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(expand)));
        }

        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        if (includeConfig != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeConfig", Configuration.ApiClient.ParameterToString(includeConfig)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraft: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraft: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get draft function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>FunctionConfig</returns>

    public FunctionConfig GetIntegrationsActionDraftFunction(string actionId)
    {
        ApiResponse<FunctionConfig> localVarResponse = GetIntegrationsActionDraftFunctionWithHttpInfo(actionId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get draft function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of FunctionConfig</returns>

    public ApiResponse<FunctionConfig> GetIntegrationsActionDraftFunctionWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionDraftFunction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/function";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftFunction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftFunction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<FunctionConfig>(localVarStatusCode,
            localVarHeaders,
            (FunctionConfig)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunctionConfig)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get draft function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of FunctionConfig</returns>

    public async Task<FunctionConfig> GetIntegrationsActionDraftFunctionAsync(string actionId)
    {
        ApiResponse<FunctionConfig> localVarResponse = await GetIntegrationsActionDraftFunctionAsyncWithHttpInfo(actionId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get draft function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse (FunctionConfig)</returns>

    public async Task<ApiResponse<FunctionConfig>> GetIntegrationsActionDraftFunctionAsyncWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionDraftFunction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/function";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftFunction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftFunction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<FunctionConfig>(localVarStatusCode,
            localVarHeaders,
            (FunctionConfig)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunctionConfig)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieve schema for a Draft based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this draft.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>JsonSchemaDocument</returns>

    public JsonSchemaDocument GetIntegrationsActionDraftSchema(string actionId, string fileName, bool? flatten = null)
    {
        ApiResponse<JsonSchemaDocument> localVarResponse = GetIntegrationsActionDraftSchemaWithHttpInfo(actionId, fileName, flatten);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieve schema for a Draft based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this draft.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>ApiResponse of JsonSchemaDocument</returns>

    public ApiResponse<JsonSchemaDocument> GetIntegrationsActionDraftSchemaWithHttpInfo(string actionId, string fileName, bool? flatten = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionDraftSchema");
        }
        // verify the required parameter 'fileName' is set
        if (fileName == null)
        {
            throw new ApiException(400, "Missing required parameter 'fileName' when calling IntegrationsApi->GetIntegrationsActionDraftSchema");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/schemas/{fileName}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        if (fileName != null)
        {
            localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName));
        }

        // Query params
        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftSchema: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftSchema: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<JsonSchemaDocument>(localVarStatusCode,
            localVarHeaders,
            (JsonSchemaDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSchemaDocument)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieve schema for a Draft based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this draft.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of JsonSchemaDocument</returns>

    public async Task<JsonSchemaDocument> GetIntegrationsActionDraftSchemaAsync(string actionId, string fileName, bool? flatten = null)
    {
        ApiResponse<JsonSchemaDocument> localVarResponse = await GetIntegrationsActionDraftSchemaAsyncWithHttpInfo(actionId, fileName, flatten);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieve schema for a Draft based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this draft.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (JsonSchemaDocument)</returns>

    public async Task<ApiResponse<JsonSchemaDocument>> GetIntegrationsActionDraftSchemaAsyncWithHttpInfo(string actionId, string fileName, bool? flatten = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionDraftSchema");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null)
        {
            throw new ApiException(400, "Missing required parameter 'fileName' when calling IntegrationsApi->GetIntegrationsActionDraftSchema");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/schemas/{fileName}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        if (fileName != null)
        {
            localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName));
        }

        // Query params
        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftSchema: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftSchema: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<JsonSchemaDocument>(localVarStatusCode,
            localVarHeaders,
            (JsonSchemaDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSchemaDocument)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieve templates for a Draft based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action draft.</param>
    /// <returns>string</returns>

    public string GetIntegrationsActionDraftTemplate(string actionId, string fileName)
    {
        ApiResponse<string> localVarResponse = GetIntegrationsActionDraftTemplateWithHttpInfo(actionId, fileName);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieve templates for a Draft based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action draft.</param>
    /// <returns>ApiResponse of string</returns>

    public ApiResponse<string> GetIntegrationsActionDraftTemplateWithHttpInfo(string actionId, string fileName)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionDraftTemplate");
        }
        // verify the required parameter 'fileName' is set
        if (fileName == null)
        {
            throw new ApiException(400, "Missing required parameter 'fileName' when calling IntegrationsApi->GetIntegrationsActionDraftTemplate");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/templates/{fileName}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "text/plain"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        if (fileName != null)
        {
            localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftTemplate: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftTemplate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<string>(localVarStatusCode,
            localVarHeaders,
            (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieve templates for a Draft based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action draft.</param>
    /// <returns>Task of string</returns>

    public async Task<string> GetIntegrationsActionDraftTemplateAsync(string actionId, string fileName)
    {
        ApiResponse<string> localVarResponse = await GetIntegrationsActionDraftTemplateAsyncWithHttpInfo(actionId, fileName);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieve templates for a Draft based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action draft.</param>
    /// <returns>Task of ApiResponse (string)</returns>

    public async Task<ApiResponse<string>> GetIntegrationsActionDraftTemplateAsyncWithHttpInfo(string actionId, string fileName)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionDraftTemplate");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null)
        {
            throw new ApiException(400, "Missing required parameter 'fileName' when calling IntegrationsApi->GetIntegrationsActionDraftTemplate");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/templates/{fileName}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "text/plain"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        if (fileName != null)
        {
            localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftTemplate: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftTemplate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<string>(localVarStatusCode,
            localVarHeaders,
            (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Validate current Draft configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>DraftValidationResult</returns>

    public DraftValidationResult GetIntegrationsActionDraftValidation(string actionId)
    {
        ApiResponse<DraftValidationResult> localVarResponse = GetIntegrationsActionDraftValidationWithHttpInfo(actionId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Validate current Draft configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of DraftValidationResult</returns>

    public ApiResponse<DraftValidationResult> GetIntegrationsActionDraftValidationWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionDraftValidation");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/validation";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftValidation: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftValidation: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<DraftValidationResult>(localVarStatusCode,
            localVarHeaders,
            (DraftValidationResult)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DraftValidationResult)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Validate current Draft configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of DraftValidationResult</returns>

    public async Task<DraftValidationResult> GetIntegrationsActionDraftValidationAsync(string actionId)
    {
        ApiResponse<DraftValidationResult> localVarResponse = await GetIntegrationsActionDraftValidationAsyncWithHttpInfo(actionId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Validate current Draft configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse (DraftValidationResult)</returns>

    public async Task<ApiResponse<DraftValidationResult>> GetIntegrationsActionDraftValidationAsyncWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionDraftValidation");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/validation";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftValidation: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionDraftValidation: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<DraftValidationResult>(localVarStatusCode,
            localVarHeaders,
            (DraftValidationResult)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DraftValidationResult)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get published function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>FunctionConfig</returns>

    public FunctionConfig GetIntegrationsActionFunction(string actionId)
    {
        ApiResponse<FunctionConfig> localVarResponse = GetIntegrationsActionFunctionWithHttpInfo(actionId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get published function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of FunctionConfig</returns>

    public ApiResponse<FunctionConfig> GetIntegrationsActionFunctionWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionFunction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/function";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionFunction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionFunction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<FunctionConfig>(localVarStatusCode,
            localVarHeaders,
            (FunctionConfig)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunctionConfig)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get published function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of FunctionConfig</returns>

    public async Task<FunctionConfig> GetIntegrationsActionFunctionAsync(string actionId)
    {
        ApiResponse<FunctionConfig> localVarResponse = await GetIntegrationsActionFunctionAsyncWithHttpInfo(actionId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get published function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse (FunctionConfig)</returns>

    public async Task<ApiResponse<FunctionConfig>> GetIntegrationsActionFunctionAsyncWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionFunction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/function";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionFunction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionFunction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<FunctionConfig>(localVarStatusCode,
            localVarHeaders,
            (FunctionConfig)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunctionConfig)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieve schema for an action based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this action.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>JsonSchemaDocument</returns>

    public JsonSchemaDocument GetIntegrationsActionSchema(string actionId, string fileName, bool? flatten = null)
    {
        ApiResponse<JsonSchemaDocument> localVarResponse = GetIntegrationsActionSchemaWithHttpInfo(actionId, fileName, flatten);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieve schema for an action based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this action.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>ApiResponse of JsonSchemaDocument</returns>

    public ApiResponse<JsonSchemaDocument> GetIntegrationsActionSchemaWithHttpInfo(string actionId, string fileName, bool? flatten = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionSchema");
        }
        // verify the required parameter 'fileName' is set
        if (fileName == null)
        {
            throw new ApiException(400, "Missing required parameter 'fileName' when calling IntegrationsApi->GetIntegrationsActionSchema");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/schemas/{fileName}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        if (fileName != null)
        {
            localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName));
        }

        // Query params
        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionSchema: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionSchema: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<JsonSchemaDocument>(localVarStatusCode,
            localVarHeaders,
            (JsonSchemaDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSchemaDocument)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieve schema for an action based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this action.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of JsonSchemaDocument</returns>

    public async Task<JsonSchemaDocument> GetIntegrationsActionSchemaAsync(string actionId, string fileName, bool? flatten = null)
    {
        ApiResponse<JsonSchemaDocument> localVarResponse = await GetIntegrationsActionSchemaAsyncWithHttpInfo(actionId, fileName, flatten);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieve schema for an action based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of schema file to be retrieved for this action.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (JsonSchemaDocument)</returns>

    public async Task<ApiResponse<JsonSchemaDocument>> GetIntegrationsActionSchemaAsyncWithHttpInfo(string actionId, string fileName, bool? flatten = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionSchema");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null)
        {
            throw new ApiException(400, "Missing required parameter 'fileName' when calling IntegrationsApi->GetIntegrationsActionSchema");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/schemas/{fileName}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        if (fileName != null)
        {
            localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName));
        }

        // Query params
        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionSchema: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionSchema: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<JsonSchemaDocument>(localVarStatusCode,
            localVarHeaders,
            (JsonSchemaDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSchemaDocument)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieve text of templates for an action based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action.</param>
    /// <returns>string</returns>

    public string GetIntegrationsActionTemplate(string actionId, string fileName)
    {
        ApiResponse<string> localVarResponse = GetIntegrationsActionTemplateWithHttpInfo(actionId, fileName);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieve text of templates for an action based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action.</param>
    /// <returns>ApiResponse of string</returns>

    public ApiResponse<string> GetIntegrationsActionTemplateWithHttpInfo(string actionId, string fileName)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionTemplate");
        }
        // verify the required parameter 'fileName' is set
        if (fileName == null)
        {
            throw new ApiException(400, "Missing required parameter 'fileName' when calling IntegrationsApi->GetIntegrationsActionTemplate");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/templates/{fileName}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "text/plain"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        if (fileName != null)
        {
            localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionTemplate: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionTemplate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<string>(localVarStatusCode,
            localVarHeaders,
            (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieve text of templates for an action based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action.</param>
    /// <returns>Task of string</returns>

    public async Task<string> GetIntegrationsActionTemplateAsync(string actionId, string fileName)
    {
        ApiResponse<string> localVarResponse = await GetIntegrationsActionTemplateAsyncWithHttpInfo(actionId, fileName);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieve text of templates for an action based on filename. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="fileName">Name of template file to be retrieved for this action.</param>
    /// <returns>Task of ApiResponse (string)</returns>

    public async Task<ApiResponse<string>> GetIntegrationsActionTemplateAsyncWithHttpInfo(string actionId, string fileName)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->GetIntegrationsActionTemplate");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null)
        {
            throw new ApiException(400, "Missing required parameter 'fileName' when calling IntegrationsApi->GetIntegrationsActionTemplate");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/templates/{fileName}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "text/plain"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        if (fileName != null)
        {
            localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionTemplate: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionTemplate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<string>(localVarStatusCode,
            localVarHeaders,
            (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieves all actions associated with filters passed in via query param. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>ActionEntityListing</returns>

    public ActionEntityListing GetIntegrationsActions(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null)
    {
        ApiResponse<ActionEntityListing> localVarResponse = GetIntegrationsActionsWithHttpInfo(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, ids, secure, includeAuthActions);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieves all actions associated with filters passed in via query param. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>ApiResponse of ActionEntityListing</returns>

    public ApiResponse<ActionEntityListing> GetIntegrationsActionsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null)
    {

        var localVarPath = "/api/v2/integrations/actions";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (sortOrder != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)));
        }

        if (category != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("category", Configuration.ApiClient.ParameterToString(category)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        if (ids != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("ids", Configuration.ApiClient.ParameterToString(ids)));
        }

        if (secure != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("secure", Configuration.ApiClient.ParameterToString(secure)));
        }

        if (includeAuthActions != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeAuthActions", Configuration.ApiClient.ParameterToString(includeAuthActions)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<ActionEntityListing>(localVarStatusCode,
            localVarHeaders,
            (ActionEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieves all actions associated with filters passed in via query param. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>Task of ActionEntityListing</returns>

    public async Task<ActionEntityListing> GetIntegrationsActionsAsync(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null)
    {
        ApiResponse<ActionEntityListing> localVarResponse = await GetIntegrationsActionsAsyncWithHttpInfo(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, ids, secure, includeAuthActions);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieves all actions associated with filters passed in via query param. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (ActionEntityListing)</returns>

    public async Task<ApiResponse<ActionEntityListing>> GetIntegrationsActionsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null)
    {

        var localVarPath = "/api/v2/integrations/actions";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (sortOrder != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)));
        }

        if (category != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("category", Configuration.ApiClient.ParameterToString(category)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        if (ids != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("ids", Configuration.ApiClient.ParameterToString(ids)));
        }

        if (secure != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("secure", Configuration.ApiClient.ParameterToString(secure)));
        }

        if (includeAuthActions != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeAuthActions", Configuration.ApiClient.ParameterToString(includeAuthActions)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<ActionEntityListing>(localVarStatusCode,
            localVarHeaders,
            (ActionEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieves all categories of available Actions 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on.  Only &#39;name&#39; is supported on this endpoint. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="secure">Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <returns>CategoryEntityListing</returns>

    public CategoryEntityListing GetIntegrationsActionsCategories(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string secure = null)
    {
        ApiResponse<CategoryEntityListing> localVarResponse = GetIntegrationsActionsCategoriesWithHttpInfo(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, secure);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieves all categories of available Actions 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on.  Only &#39;name&#39; is supported on this endpoint. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="secure">Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <returns>ApiResponse of CategoryEntityListing</returns>

    public ApiResponse<CategoryEntityListing> GetIntegrationsActionsCategoriesWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string secure = null)
    {

        var localVarPath = "/api/v2/integrations/actions/categories";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (sortOrder != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)));
        }

        if (secure != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("secure", Configuration.ApiClient.ParameterToString(secure)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<CategoryEntityListing>(localVarStatusCode,
            localVarHeaders,
            (CategoryEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieves all categories of available Actions 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on.  Only &#39;name&#39; is supported on this endpoint. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="secure">Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <returns>Task of CategoryEntityListing</returns>

    public async Task<CategoryEntityListing> GetIntegrationsActionsCategoriesAsync(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string secure = null)
    {
        ApiResponse<CategoryEntityListing> localVarResponse = await GetIntegrationsActionsCategoriesAsyncWithHttpInfo(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, secure);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieves all categories of available Actions 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on.  Only &#39;name&#39; is supported on this endpoint. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="secure">Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <returns>Task of ApiResponse (CategoryEntityListing)</returns>

    public async Task<ApiResponse<CategoryEntityListing>> GetIntegrationsActionsCategoriesAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string secure = null)
    {

        var localVarPath = "/api/v2/integrations/actions/categories";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (sortOrder != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)));
        }

        if (secure != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("secure", Configuration.ApiClient.ParameterToString(secure)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCategories: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCategories: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<CategoryEntityListing>(localVarStatusCode,
            localVarHeaders,
            (CategoryEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieves the available mTLS client certificates in use. This endpoint will return inconsistent results while a certificate rotation is in progress. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="status">Indicates the validity of the certificate in question. (optional)</param>
    /// <param name="type">Indicates the type of the certificate. (optional)</param>
    /// <returns>ActionCertificateListing</returns>

    public ActionCertificateListing GetIntegrationsActionsCertificates(string status = null, string type = null)
    {
        ApiResponse<ActionCertificateListing> localVarResponse = GetIntegrationsActionsCertificatesWithHttpInfo(status, type);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieves the available mTLS client certificates in use. This endpoint will return inconsistent results while a certificate rotation is in progress. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="status">Indicates the validity of the certificate in question. (optional)</param>
    /// <param name="type">Indicates the type of the certificate. (optional)</param>
    /// <returns>ApiResponse of ActionCertificateListing</returns>

    public ApiResponse<ActionCertificateListing> GetIntegrationsActionsCertificatesWithHttpInfo(string status = null, string type = null)
    {

        var localVarPath = "/api/v2/integrations/actions/certificates";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (status != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("status", Configuration.ApiClient.ParameterToString(status)));
        }

        if (type != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("type", Configuration.ApiClient.ParameterToString(type)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCertificates: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCertificates: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<ActionCertificateListing>(localVarStatusCode,
            localVarHeaders,
            (ActionCertificateListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionCertificateListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieves the available mTLS client certificates in use. This endpoint will return inconsistent results while a certificate rotation is in progress. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="status">Indicates the validity of the certificate in question. (optional)</param>
    /// <param name="type">Indicates the type of the certificate. (optional)</param>
    /// <returns>Task of ActionCertificateListing</returns>

    public async Task<ActionCertificateListing> GetIntegrationsActionsCertificatesAsync(string status = null, string type = null)
    {
        ApiResponse<ActionCertificateListing> localVarResponse = await GetIntegrationsActionsCertificatesAsyncWithHttpInfo(status, type);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieves the available mTLS client certificates in use. This endpoint will return inconsistent results while a certificate rotation is in progress. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="status">Indicates the validity of the certificate in question. (optional)</param>
    /// <param name="type">Indicates the type of the certificate. (optional)</param>
    /// <returns>Task of ApiResponse (ActionCertificateListing)</returns>

    public async Task<ApiResponse<ActionCertificateListing>> GetIntegrationsActionsCertificatesAsyncWithHttpInfo(string status = null, string type = null)
    {

        var localVarPath = "/api/v2/integrations/actions/certificates";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (status != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("status", Configuration.ApiClient.ParameterToString(status)));
        }

        if (type != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("type", Configuration.ApiClient.ParameterToString(type)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCertificates: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCertificates: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<ActionCertificateListing>(localVarStatusCode,
            localVarHeaders,
            (ActionCertificateListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionCertificateListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieves basic info about trusted root CA certificates 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>TrustedCertificates</returns>

    public TrustedCertificates GetIntegrationsActionsCertificatesTruststore()
    {
        ApiResponse<TrustedCertificates> localVarResponse = GetIntegrationsActionsCertificatesTruststoreWithHttpInfo();
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieves basic info about trusted root CA certificates 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of TrustedCertificates</returns>

    public ApiResponse<TrustedCertificates> GetIntegrationsActionsCertificatesTruststoreWithHttpInfo()
    {

        var localVarPath = "/api/v2/integrations/actions/certificates/truststore";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCertificatesTruststore: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCertificatesTruststore: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TrustedCertificates>(localVarStatusCode,
            localVarHeaders,
            (TrustedCertificates)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificates)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieves basic info about trusted root CA certificates 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of TrustedCertificates</returns>

    public async Task<TrustedCertificates> GetIntegrationsActionsCertificatesTruststoreAsync()
    {
        ApiResponse<TrustedCertificates> localVarResponse = await GetIntegrationsActionsCertificatesTruststoreAsyncWithHttpInfo();
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieves basic info about trusted root CA certificates 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of ApiResponse (TrustedCertificates)</returns>

    public async Task<ApiResponse<TrustedCertificates>> GetIntegrationsActionsCertificatesTruststoreAsyncWithHttpInfo()
    {

        var localVarPath = "/api/v2/integrations/actions/certificates/truststore";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCertificatesTruststore: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsCertificatesTruststore: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TrustedCertificates>(localVarStatusCode,
            localVarHeaders,
            (TrustedCertificates)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificates)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Retrieves all action drafts associated with the filters passed in via query param. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>ActionEntityListing</returns>

    public ActionEntityListing GetIntegrationsActionsDrafts(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null)
    {
        ApiResponse<ActionEntityListing> localVarResponse = GetIntegrationsActionsDraftsWithHttpInfo(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, ids, secure, includeAuthActions);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieves all action drafts associated with the filters passed in via query param. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>ApiResponse of ActionEntityListing</returns>

    public ApiResponse<ActionEntityListing> GetIntegrationsActionsDraftsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null)
    {

        var localVarPath = "/api/v2/integrations/actions/drafts";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (sortOrder != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)));
        }

        if (category != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("category", Configuration.ApiClient.ParameterToString(category)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        if (ids != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("ids", Configuration.ApiClient.ParameterToString(ids)));
        }

        if (secure != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("secure", Configuration.ApiClient.ParameterToString(secure)));
        }

        if (includeAuthActions != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeAuthActions", Configuration.ApiClient.ParameterToString(includeAuthActions)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsDrafts: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsDrafts: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<ActionEntityListing>(localVarStatusCode,
            localVarHeaders,
            (ActionEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Retrieves all action drafts associated with the filters passed in via query param. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>Task of ActionEntityListing</returns>

    public async Task<ActionEntityListing> GetIntegrationsActionsDraftsAsync(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null)
    {
        ApiResponse<ActionEntityListing> localVarResponse = await GetIntegrationsActionsDraftsAsyncWithHttpInfo(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, ids, secure, includeAuthActions);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Retrieves all action drafts associated with the filters passed in via query param. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="sortBy">Root level field name to sort on. (optional)</param>
    /// <param name="sortOrder">Direction to sort &#39;sortBy&#39; field. (optional, default to asc)</param>
    /// <param name="category">Filter by category name. (optional)</param>
    /// <param name="name">Filter by partial or complete action name. (optional)</param>
    /// <param name="ids">Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids. (optional)</param>
    /// <param name="secure">Filter based on &#39;secure&#39; configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions. (optional)</param>
    /// <param name="includeAuthActions">Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (ActionEntityListing)</returns>

    public async Task<ApiResponse<ActionEntityListing>> GetIntegrationsActionsDraftsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string nextPage = null, string previousPage = null, string sortBy = null, string sortOrder = null, string category = null, string name = null, string ids = null, string secure = null, string includeAuthActions = null)
    {

        var localVarPath = "/api/v2/integrations/actions/drafts";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (sortOrder != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)));
        }

        if (category != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("category", Configuration.ApiClient.ParameterToString(category)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        if (ids != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("ids", Configuration.ApiClient.ParameterToString(ids)));
        }

        if (secure != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("secure", Configuration.ApiClient.ParameterToString(secure)));
        }

        if (includeAuthActions != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeAuthActions", Configuration.ApiClient.ParameterToString(includeAuthActions)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsDrafts: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsDrafts: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<ActionEntityListing>(localVarStatusCode,
            localVarHeaders,
            (ActionEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get action function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>List&lt;FunctionRuntime&gt;</returns>

    public List<FunctionRuntime> GetIntegrationsActionsFunctionsRuntimes()
    {
        ApiResponse<List<FunctionRuntime>> localVarResponse = GetIntegrationsActionsFunctionsRuntimesWithHttpInfo();
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get action function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of List&lt;FunctionRuntime&gt;</returns>

    public ApiResponse<List<FunctionRuntime>> GetIntegrationsActionsFunctionsRuntimesWithHttpInfo()
    {

        var localVarPath = "/api/v2/integrations/actions/functions/runtimes";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsFunctionsRuntimes: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsFunctionsRuntimes: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<List<FunctionRuntime>>(localVarStatusCode,
            localVarHeaders,
            (List<FunctionRuntime>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FunctionRuntime>)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get action function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of List&lt;FunctionRuntime&gt;</returns>

    public async Task<List<FunctionRuntime>> GetIntegrationsActionsFunctionsRuntimesAsync()
    {
        ApiResponse<List<FunctionRuntime>> localVarResponse = await GetIntegrationsActionsFunctionsRuntimesAsyncWithHttpInfo();
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get action function settings for Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of ApiResponse (List&lt;FunctionRuntime&gt;)</returns>

    public async Task<ApiResponse<List<FunctionRuntime>>> GetIntegrationsActionsFunctionsRuntimesAsyncWithHttpInfo()
    {

        var localVarPath = "/api/v2/integrations/actions/functions/runtimes";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsFunctionsRuntimes: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsActionsFunctionsRuntimes: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<List<FunctionRuntime>>(localVarStatusCode,
            localVarHeaders,
            (List<FunctionRuntime>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FunctionRuntime>)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a specific botConnector bot, plus versions, for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="version">Specific Version (optional)</param>
    /// <returns>BotConnectorBot</returns>

    public BotConnectorBot GetIntegrationsBotconnectorIntegrationIdBot(string integrationId, string botId, string version = null)
    {
        ApiResponse<BotConnectorBot> localVarResponse = GetIntegrationsBotconnectorIntegrationIdBotWithHttpInfo(integrationId, botId, version);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a specific botConnector bot, plus versions, for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="version">Specific Version (optional)</param>
    /// <returns>ApiResponse of BotConnectorBot</returns>

    public ApiResponse<BotConnectorBot> GetIntegrationsBotconnectorIntegrationIdBotWithHttpInfo(string integrationId, string botId, string version = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBot");
        }
        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBot");
        }

        var localVarPath = "/api/v2/integrations/botconnector/{integrationId}/bots/{botId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (version != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("version", Configuration.ApiClient.ParameterToString(version)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBot: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBot: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<BotConnectorBot>(localVarStatusCode,
            localVarHeaders,
            (BotConnectorBot)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BotConnectorBot)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a specific botConnector bot, plus versions, for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="version">Specific Version (optional)</param>
    /// <returns>Task of BotConnectorBot</returns>

    public async Task<BotConnectorBot> GetIntegrationsBotconnectorIntegrationIdBotAsync(string integrationId, string botId, string version = null)
    {
        ApiResponse<BotConnectorBot> localVarResponse = await GetIntegrationsBotconnectorIntegrationIdBotAsyncWithHttpInfo(integrationId, botId, version);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a specific botConnector bot, plus versions, for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="version">Specific Version (optional)</param>
    /// <returns>Task of ApiResponse (BotConnectorBot)</returns>

    public async Task<ApiResponse<BotConnectorBot>> GetIntegrationsBotconnectorIntegrationIdBotAsyncWithHttpInfo(string integrationId, string botId, string version = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBot");
        }

        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBot");
        }

        var localVarPath = "/api/v2/integrations/botconnector/{integrationId}/bots/{botId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (version != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("version", Configuration.ApiClient.ParameterToString(version)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBot: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBot: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<BotConnectorBot>(localVarStatusCode,
            localVarHeaders,
            (BotConnectorBot)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BotConnectorBot)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of bot versions for a bot 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this bot group</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>BotConnectorBotVersionSummaryEntityListing</returns>

    public BotConnectorBotVersionSummaryEntityListing GetIntegrationsBotconnectorIntegrationIdBotVersions(string integrationId, string botId, int? pageNumber = null, int? pageSize = null)
    {
        ApiResponse<BotConnectorBotVersionSummaryEntityListing> localVarResponse = GetIntegrationsBotconnectorIntegrationIdBotVersionsWithHttpInfo(integrationId, botId, pageNumber, pageSize);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of bot versions for a bot 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this bot group</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>ApiResponse of BotConnectorBotVersionSummaryEntityListing</returns>

    public ApiResponse<BotConnectorBotVersionSummaryEntityListing> GetIntegrationsBotconnectorIntegrationIdBotVersionsWithHttpInfo(string integrationId, string botId, int? pageNumber = null, int? pageSize = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBotVersions");
        }
        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBotVersions");
        }

        var localVarPath = "/api/v2/integrations/botconnector/{integrationId}/bots/{botId}/versions";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBotVersions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBotVersions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<BotConnectorBotVersionSummaryEntityListing>(localVarStatusCode,
            localVarHeaders,
            (BotConnectorBotVersionSummaryEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BotConnectorBotVersionSummaryEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of bot versions for a bot 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this bot group</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of BotConnectorBotVersionSummaryEntityListing</returns>

    public async Task<BotConnectorBotVersionSummaryEntityListing> GetIntegrationsBotconnectorIntegrationIdBotVersionsAsync(string integrationId, string botId, int? pageNumber = null, int? pageSize = null)
    {
        ApiResponse<BotConnectorBotVersionSummaryEntityListing> localVarResponse = await GetIntegrationsBotconnectorIntegrationIdBotVersionsAsyncWithHttpInfo(integrationId, botId, pageNumber, pageSize);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of bot versions for a bot 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this bot group</param>
    /// <param name="botId">The botID for this bot</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of ApiResponse (BotConnectorBotVersionSummaryEntityListing)</returns>

    public async Task<ApiResponse<BotConnectorBotVersionSummaryEntityListing>> GetIntegrationsBotconnectorIntegrationIdBotVersionsAsyncWithHttpInfo(string integrationId, string botId, int? pageNumber = null, int? pageSize = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBotVersions");
        }

        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBotVersions");
        }

        var localVarPath = "/api/v2/integrations/botconnector/{integrationId}/bots/{botId}/versions";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBotVersions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBotVersions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<BotConnectorBotVersionSummaryEntityListing>(localVarStatusCode,
            localVarHeaders,
            (BotConnectorBotVersionSummaryEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BotConnectorBotVersionSummaryEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of botConnector bots for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <returns>BotList</returns>

    public BotList GetIntegrationsBotconnectorIntegrationIdBots(string integrationId)
    {
        ApiResponse<BotList> localVarResponse = GetIntegrationsBotconnectorIntegrationIdBotsWithHttpInfo(integrationId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of botConnector bots for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <returns>ApiResponse of BotList</returns>

    public ApiResponse<BotList> GetIntegrationsBotconnectorIntegrationIdBotsWithHttpInfo(string integrationId)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBots");
        }

        var localVarPath = "/api/v2/integrations/botconnector/{integrationId}/bots";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBots: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBots: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<BotList>(localVarStatusCode,
            localVarHeaders,
            (BotList)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BotList)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of botConnector bots for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <returns>Task of BotList</returns>

    public async Task<BotList> GetIntegrationsBotconnectorIntegrationIdBotsAsync(string integrationId)
    {
        ApiResponse<BotList> localVarResponse = await GetIntegrationsBotconnectorIntegrationIdBotsAsyncWithHttpInfo(integrationId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of botConnector bots for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <returns>Task of ApiResponse (BotList)</returns>

    public async Task<ApiResponse<BotList>> GetIntegrationsBotconnectorIntegrationIdBotsAsyncWithHttpInfo(string integrationId)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBots");
        }

        var localVarPath = "/api/v2/integrations/botconnector/{integrationId}/bots";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBots: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBots: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<BotList>(localVarStatusCode,
            localVarHeaders,
            (BotList)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BotList)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a summary list of botConnector bots for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>BotConnectorBotSummaryEntityListing</returns>

    public BotConnectorBotSummaryEntityListing GetIntegrationsBotconnectorIntegrationIdBotsSummaries(string integrationId, int? pageNumber = null, int? pageSize = null)
    {
        ApiResponse<BotConnectorBotSummaryEntityListing> localVarResponse = GetIntegrationsBotconnectorIntegrationIdBotsSummariesWithHttpInfo(integrationId, pageNumber, pageSize);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a summary list of botConnector bots for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>ApiResponse of BotConnectorBotSummaryEntityListing</returns>

    public ApiResponse<BotConnectorBotSummaryEntityListing> GetIntegrationsBotconnectorIntegrationIdBotsSummariesWithHttpInfo(string integrationId, int? pageNumber = null, int? pageSize = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBotsSummaries");
        }

        var localVarPath = "/api/v2/integrations/botconnector/{integrationId}/bots/summaries";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBotsSummaries: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBotsSummaries: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<BotConnectorBotSummaryEntityListing>(localVarStatusCode,
            localVarHeaders,
            (BotConnectorBotSummaryEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BotConnectorBotSummaryEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a summary list of botConnector bots for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of BotConnectorBotSummaryEntityListing</returns>

    public async Task<BotConnectorBotSummaryEntityListing> GetIntegrationsBotconnectorIntegrationIdBotsSummariesAsync(string integrationId, int? pageNumber = null, int? pageSize = null)
    {
        ApiResponse<BotConnectorBotSummaryEntityListing> localVarResponse = await GetIntegrationsBotconnectorIntegrationIdBotsSummariesAsyncWithHttpInfo(integrationId, pageNumber, pageSize);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a summary list of botConnector bots for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of ApiResponse (BotConnectorBotSummaryEntityListing)</returns>

    public async Task<ApiResponse<BotConnectorBotSummaryEntityListing>> GetIntegrationsBotconnectorIntegrationIdBotsSummariesAsyncWithHttpInfo(string integrationId, int? pageNumber = null, int? pageSize = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationsBotconnectorIntegrationIdBotsSummaries");
        }

        var localVarPath = "/api/v2/integrations/botconnector/{integrationId}/bots/summaries";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBotsSummaries: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsBotconnectorIntegrationIdBotsSummaries: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<BotConnectorBotSummaryEntityListing>(localVarStatusCode,
            localVarHeaders,
            (BotConnectorBotSummaryEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BotConnectorBotSummaryEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// List permitted client app integrations for the logged in user 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ClientAppEntityListing</returns>

    public ClientAppEntityListing GetIntegrationsClientapps(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<ClientAppEntityListing> localVarResponse = GetIntegrationsClientappsWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;
    }

    /// <summary>
    /// List permitted client app integrations for the logged in user 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of ClientAppEntityListing</returns>

    public ApiResponse<ClientAppEntityListing> GetIntegrationsClientappsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {

        var localVarPath = "/api/v2/integrations/clientapps";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsClientapps: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsClientapps: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<ClientAppEntityListing>(localVarStatusCode,
            localVarHeaders,
            (ClientAppEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientAppEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// List permitted client app integrations for the logged in user 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ClientAppEntityListing</returns>

    public async Task<ClientAppEntityListing> GetIntegrationsClientappsAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<ClientAppEntityListing> localVarResponse = await GetIntegrationsClientappsAsyncWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;

    }

    /// <summary>
    /// List permitted client app integrations for the logged in user 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (ClientAppEntityListing)</returns>

    public async Task<ApiResponse<ClientAppEntityListing>> GetIntegrationsClientappsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {

        var localVarPath = "/api/v2/integrations/clientapps";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsClientapps: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsClientapps: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<ClientAppEntityListing>(localVarStatusCode,
            localVarHeaders,
            (ClientAppEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientAppEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// UC integration client application configuration. 
    /// Deprecated: Please use GET /integrations/unifiedcommunications/clientapps instead. This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>UCIntegrationListing</returns>
    [Obsolete]
    public UCIntegrationListing GetIntegrationsClientappsUnifiedcommunications(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<UCIntegrationListing> localVarResponse = GetIntegrationsClientappsUnifiedcommunicationsWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;
    }

    /// <summary>
    /// UC integration client application configuration. 
    /// Deprecated: Please use GET /integrations/unifiedcommunications/clientapps instead. This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of UCIntegrationListing</returns>
    [Obsolete]
    public ApiResponse<UCIntegrationListing> GetIntegrationsClientappsUnifiedcommunicationsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {

        var localVarPath = "/api/v2/integrations/clientapps/unifiedcommunications";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsClientappsUnifiedcommunications: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsClientappsUnifiedcommunications: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<UCIntegrationListing>(localVarStatusCode,
            localVarHeaders,
            (UCIntegrationListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UCIntegrationListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// UC integration client application configuration. 
    /// Deprecated: Please use GET /integrations/unifiedcommunications/clientapps instead. This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of UCIntegrationListing</returns>
    [Obsolete]
    public async Task<UCIntegrationListing> GetIntegrationsClientappsUnifiedcommunicationsAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<UCIntegrationListing> localVarResponse = await GetIntegrationsClientappsUnifiedcommunicationsAsyncWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;

    }

    /// <summary>
    /// UC integration client application configuration. 
    /// Deprecated: Please use GET /integrations/unifiedcommunications/clientapps instead. This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled for the current organization.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (UCIntegrationListing)</returns>
    [Obsolete]
    public async Task<ApiResponse<UCIntegrationListing>> GetIntegrationsClientappsUnifiedcommunicationsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {

        var localVarPath = "/api/v2/integrations/clientapps/unifiedcommunications";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsClientappsUnifiedcommunications: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsClientappsUnifiedcommunications: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<UCIntegrationListing>(localVarStatusCode,
            localVarHeaders,
            (UCIntegrationListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UCIntegrationListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a single credential with sensitive fields redacted 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>Credential</returns>

    public Credential GetIntegrationsCredential(string credentialId)
    {
        ApiResponse<Credential> localVarResponse = GetIntegrationsCredentialWithHttpInfo(credentialId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a single credential with sensitive fields redacted 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>ApiResponse of Credential</returns>

    public ApiResponse<Credential> GetIntegrationsCredentialWithHttpInfo(string credentialId)
    {
        // verify the required parameter 'credentialId' is set
        if (credentialId == null)
        {
            throw new ApiException(400, "Missing required parameter 'credentialId' when calling IntegrationsApi->GetIntegrationsCredential");
        }

        var localVarPath = "/api/v2/integrations/credentials/{credentialId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (credentialId != null)
        {
            localVarPathParams.Add("credentialId", Configuration.ApiClient.ParameterToString(credentialId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredential: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredential: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Credential>(localVarStatusCode,
            localVarHeaders,
            (Credential)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a single credential with sensitive fields redacted 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>Task of Credential</returns>

    public async Task<Credential> GetIntegrationsCredentialAsync(string credentialId)
    {
        ApiResponse<Credential> localVarResponse = await GetIntegrationsCredentialAsyncWithHttpInfo(credentialId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a single credential with sensitive fields redacted 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <returns>Task of ApiResponse (Credential)</returns>

    public async Task<ApiResponse<Credential>> GetIntegrationsCredentialAsyncWithHttpInfo(string credentialId)
    {
        // verify the required parameter 'credentialId' is set
        if (credentialId == null)
        {
            throw new ApiException(400, "Missing required parameter 'credentialId' when calling IntegrationsApi->GetIntegrationsCredential");
        }

        var localVarPath = "/api/v2/integrations/credentials/{credentialId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (credentialId != null)
        {
            localVarPathParams.Add("credentialId", Configuration.ApiClient.ParameterToString(credentialId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredential: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredential: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Credential>(localVarStatusCode,
            localVarHeaders,
            (Credential)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credential)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// List multiple sets of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>CredentialInfoListing</returns>

    public CredentialInfoListing GetIntegrationsCredentials(int? pageNumber = null, int? pageSize = null)
    {
        ApiResponse<CredentialInfoListing> localVarResponse = GetIntegrationsCredentialsWithHttpInfo(pageNumber, pageSize);
        return localVarResponse.Data;
    }

    /// <summary>
    /// List multiple sets of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>ApiResponse of CredentialInfoListing</returns>

    public ApiResponse<CredentialInfoListing> GetIntegrationsCredentialsWithHttpInfo(int? pageNumber = null, int? pageSize = null)
    {

        var localVarPath = "/api/v2/integrations/credentials";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredentials: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredentials: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<CredentialInfoListing>(localVarStatusCode,
            localVarHeaders,
            (CredentialInfoListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialInfoListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// List multiple sets of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of CredentialInfoListing</returns>

    public async Task<CredentialInfoListing> GetIntegrationsCredentialsAsync(int? pageNumber = null, int? pageSize = null)
    {
        ApiResponse<CredentialInfoListing> localVarResponse = await GetIntegrationsCredentialsAsyncWithHttpInfo(pageNumber, pageSize);
        return localVarResponse.Data;

    }

    /// <summary>
    /// List multiple sets of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of ApiResponse (CredentialInfoListing)</returns>

    public async Task<ApiResponse<CredentialInfoListing>> GetIntegrationsCredentialsAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null)
    {

        var localVarPath = "/api/v2/integrations/credentials";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredentials: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredentials: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<CredentialInfoListing>(localVarStatusCode,
            localVarHeaders,
            (CredentialInfoListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialInfoListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// List all credential types 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>CredentialTypeListing</returns>

    public CredentialTypeListing GetIntegrationsCredentialsTypes()
    {
        ApiResponse<CredentialTypeListing> localVarResponse = GetIntegrationsCredentialsTypesWithHttpInfo();
        return localVarResponse.Data;
    }

    /// <summary>
    /// List all credential types 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of CredentialTypeListing</returns>

    public ApiResponse<CredentialTypeListing> GetIntegrationsCredentialsTypesWithHttpInfo()
    {

        var localVarPath = "/api/v2/integrations/credentials/types";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredentialsTypes: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredentialsTypes: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<CredentialTypeListing>(localVarStatusCode,
            localVarHeaders,
            (CredentialTypeListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialTypeListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// List all credential types 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of CredentialTypeListing</returns>

    public async Task<CredentialTypeListing> GetIntegrationsCredentialsTypesAsync()
    {
        ApiResponse<CredentialTypeListing> localVarResponse = await GetIntegrationsCredentialsTypesAsyncWithHttpInfo();
        return localVarResponse.Data;

    }

    /// <summary>
    /// List all credential types 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of ApiResponse (CredentialTypeListing)</returns>

    public async Task<ApiResponse<CredentialTypeListing>> GetIntegrationsCredentialsTypesAsyncWithHttpInfo()
    {

        var localVarPath = "/api/v2/integrations/credentials/types";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredentialsTypes: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsCredentialsTypes: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<CredentialTypeListing>(localVarStatusCode,
            localVarHeaders,
            (CredentialTypeListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialTypeListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of Audio Connector integrations 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>AudioConnectorIntegrationEntityListing</returns>

    public AudioConnectorIntegrationEntityListing GetIntegrationsSpeechAudioconnector(int? pageNumber = null, int? pageSize = null)
    {
        ApiResponse<AudioConnectorIntegrationEntityListing> localVarResponse = GetIntegrationsSpeechAudioconnectorWithHttpInfo(pageNumber, pageSize);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of Audio Connector integrations 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>ApiResponse of AudioConnectorIntegrationEntityListing</returns>

    public ApiResponse<AudioConnectorIntegrationEntityListing> GetIntegrationsSpeechAudioconnectorWithHttpInfo(int? pageNumber = null, int? pageSize = null)
    {

        var localVarPath = "/api/v2/integrations/speech/audioconnector";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechAudioconnector: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechAudioconnector: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AudioConnectorIntegrationEntityListing>(localVarStatusCode,
            localVarHeaders,
            (AudioConnectorIntegrationEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudioConnectorIntegrationEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of Audio Connector integrations 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of AudioConnectorIntegrationEntityListing</returns>

    public async Task<AudioConnectorIntegrationEntityListing> GetIntegrationsSpeechAudioconnectorAsync(int? pageNumber = null, int? pageSize = null)
    {
        ApiResponse<AudioConnectorIntegrationEntityListing> localVarResponse = await GetIntegrationsSpeechAudioconnectorAsyncWithHttpInfo(pageNumber, pageSize);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of Audio Connector integrations 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of ApiResponse (AudioConnectorIntegrationEntityListing)</returns>

    public async Task<ApiResponse<AudioConnectorIntegrationEntityListing>> GetIntegrationsSpeechAudioconnectorAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null)
    {

        var localVarPath = "/api/v2/integrations/speech/audioconnector";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechAudioconnector: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechAudioconnector: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AudioConnectorIntegrationEntityListing>(localVarStatusCode,
            localVarHeaders,
            (AudioConnectorIntegrationEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudioConnectorIntegrationEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get an Audio Connector integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID</param>
    /// <returns>AudioConnectorIntegration</returns>

    public AudioConnectorIntegration GetIntegrationsSpeechAudioconnectorIntegrationId(string integrationId)
    {
        ApiResponse<AudioConnectorIntegration> localVarResponse = GetIntegrationsSpeechAudioconnectorIntegrationIdWithHttpInfo(integrationId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get an Audio Connector integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID</param>
    /// <returns>ApiResponse of AudioConnectorIntegration</returns>

    public ApiResponse<AudioConnectorIntegration> GetIntegrationsSpeechAudioconnectorIntegrationIdWithHttpInfo(string integrationId)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationsSpeechAudioconnectorIntegrationId");
        }

        var localVarPath = "/api/v2/integrations/speech/audioconnector/{integrationId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechAudioconnectorIntegrationId: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechAudioconnectorIntegrationId: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AudioConnectorIntegration>(localVarStatusCode,
            localVarHeaders,
            (AudioConnectorIntegration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudioConnectorIntegration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get an Audio Connector integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID</param>
    /// <returns>Task of AudioConnectorIntegration</returns>

    public async Task<AudioConnectorIntegration> GetIntegrationsSpeechAudioconnectorIntegrationIdAsync(string integrationId)
    {
        ApiResponse<AudioConnectorIntegration> localVarResponse = await GetIntegrationsSpeechAudioconnectorIntegrationIdAsyncWithHttpInfo(integrationId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get an Audio Connector integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID</param>
    /// <returns>Task of ApiResponse (AudioConnectorIntegration)</returns>

    public async Task<ApiResponse<AudioConnectorIntegration>> GetIntegrationsSpeechAudioconnectorIntegrationIdAsyncWithHttpInfo(string integrationId)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->GetIntegrationsSpeechAudioconnectorIntegrationId");
        }

        var localVarPath = "/api/v2/integrations/speech/audioconnector/{integrationId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechAudioconnectorIntegrationId: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechAudioconnectorIntegrationId: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AudioConnectorIntegration>(localVarStatusCode,
            localVarHeaders,
            (AudioConnectorIntegration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AudioConnectorIntegration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get details about a Dialogflow agent 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>DialogflowAgent</returns>

    public DialogflowAgent GetIntegrationsSpeechDialogflowAgent(string agentId)
    {
        ApiResponse<DialogflowAgent> localVarResponse = GetIntegrationsSpeechDialogflowAgentWithHttpInfo(agentId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get details about a Dialogflow agent 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>ApiResponse of DialogflowAgent</returns>

    public ApiResponse<DialogflowAgent> GetIntegrationsSpeechDialogflowAgentWithHttpInfo(string agentId)
    {
        // verify the required parameter 'agentId' is set
        if (agentId == null)
        {
            throw new ApiException(400, "Missing required parameter 'agentId' when calling IntegrationsApi->GetIntegrationsSpeechDialogflowAgent");
        }

        var localVarPath = "/api/v2/integrations/speech/dialogflow/agents/{agentId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (agentId != null)
        {
            localVarPathParams.Add("agentId", Configuration.ApiClient.ParameterToString(agentId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowAgent: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowAgent: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<DialogflowAgent>(localVarStatusCode,
            localVarHeaders,
            (DialogflowAgent)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DialogflowAgent)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get details about a Dialogflow agent 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>Task of DialogflowAgent</returns>

    public async Task<DialogflowAgent> GetIntegrationsSpeechDialogflowAgentAsync(string agentId)
    {
        ApiResponse<DialogflowAgent> localVarResponse = await GetIntegrationsSpeechDialogflowAgentAsyncWithHttpInfo(agentId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get details about a Dialogflow agent 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>Task of ApiResponse (DialogflowAgent)</returns>

    public async Task<ApiResponse<DialogflowAgent>> GetIntegrationsSpeechDialogflowAgentAsyncWithHttpInfo(string agentId)
    {
        // verify the required parameter 'agentId' is set
        if (agentId == null)
        {
            throw new ApiException(400, "Missing required parameter 'agentId' when calling IntegrationsApi->GetIntegrationsSpeechDialogflowAgent");
        }

        var localVarPath = "/api/v2/integrations/speech/dialogflow/agents/{agentId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (agentId != null)
        {
            localVarPathParams.Add("agentId", Configuration.ApiClient.ParameterToString(agentId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowAgent: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowAgent: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<DialogflowAgent>(localVarStatusCode,
            localVarHeaders,
            (DialogflowAgent)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DialogflowAgent)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of Dialogflow agents in the customers&#39; Google accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>DialogflowAgentSummaryEntityListing</returns>

    public DialogflowAgentSummaryEntityListing GetIntegrationsSpeechDialogflowAgents(int? pageNumber = null, int? pageSize = null, string name = null)
    {
        ApiResponse<DialogflowAgentSummaryEntityListing> localVarResponse = GetIntegrationsSpeechDialogflowAgentsWithHttpInfo(pageNumber, pageSize, name);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of Dialogflow agents in the customers&#39; Google accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>ApiResponse of DialogflowAgentSummaryEntityListing</returns>

    public ApiResponse<DialogflowAgentSummaryEntityListing> GetIntegrationsSpeechDialogflowAgentsWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null)
    {

        var localVarPath = "/api/v2/integrations/speech/dialogflow/agents";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowAgents: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowAgents: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<DialogflowAgentSummaryEntityListing>(localVarStatusCode,
            localVarHeaders,
            (DialogflowAgentSummaryEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DialogflowAgentSummaryEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of Dialogflow agents in the customers&#39; Google accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>Task of DialogflowAgentSummaryEntityListing</returns>

    public async Task<DialogflowAgentSummaryEntityListing> GetIntegrationsSpeechDialogflowAgentsAsync(int? pageNumber = null, int? pageSize = null, string name = null)
    {
        ApiResponse<DialogflowAgentSummaryEntityListing> localVarResponse = await GetIntegrationsSpeechDialogflowAgentsAsyncWithHttpInfo(pageNumber, pageSize, name);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of Dialogflow agents in the customers&#39; Google accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>Task of ApiResponse (DialogflowAgentSummaryEntityListing)</returns>

    public async Task<ApiResponse<DialogflowAgentSummaryEntityListing>> GetIntegrationsSpeechDialogflowAgentsAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null)
    {

        var localVarPath = "/api/v2/integrations/speech/dialogflow/agents";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowAgents: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowAgents: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<DialogflowAgentSummaryEntityListing>(localVarStatusCode,
            localVarHeaders,
            (DialogflowAgentSummaryEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DialogflowAgentSummaryEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get details about a Dialogflow CX agent 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>DialogflowCXAgent</returns>

    public DialogflowCXAgent GetIntegrationsSpeechDialogflowcxAgent(string agentId)
    {
        ApiResponse<DialogflowCXAgent> localVarResponse = GetIntegrationsSpeechDialogflowcxAgentWithHttpInfo(agentId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get details about a Dialogflow CX agent 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>ApiResponse of DialogflowCXAgent</returns>

    public ApiResponse<DialogflowCXAgent> GetIntegrationsSpeechDialogflowcxAgentWithHttpInfo(string agentId)
    {
        // verify the required parameter 'agentId' is set
        if (agentId == null)
        {
            throw new ApiException(400, "Missing required parameter 'agentId' when calling IntegrationsApi->GetIntegrationsSpeechDialogflowcxAgent");
        }

        var localVarPath = "/api/v2/integrations/speech/dialogflowcx/agents/{agentId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (agentId != null)
        {
            localVarPathParams.Add("agentId", Configuration.ApiClient.ParameterToString(agentId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowcxAgent: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowcxAgent: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<DialogflowCXAgent>(localVarStatusCode,
            localVarHeaders,
            (DialogflowCXAgent)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DialogflowCXAgent)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get details about a Dialogflow CX agent 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>Task of DialogflowCXAgent</returns>

    public async Task<DialogflowCXAgent> GetIntegrationsSpeechDialogflowcxAgentAsync(string agentId)
    {
        ApiResponse<DialogflowCXAgent> localVarResponse = await GetIntegrationsSpeechDialogflowcxAgentAsyncWithHttpInfo(agentId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get details about a Dialogflow CX agent 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="agentId">The agent ID</param>
    /// <returns>Task of ApiResponse (DialogflowCXAgent)</returns>

    public async Task<ApiResponse<DialogflowCXAgent>> GetIntegrationsSpeechDialogflowcxAgentAsyncWithHttpInfo(string agentId)
    {
        // verify the required parameter 'agentId' is set
        if (agentId == null)
        {
            throw new ApiException(400, "Missing required parameter 'agentId' when calling IntegrationsApi->GetIntegrationsSpeechDialogflowcxAgent");
        }

        var localVarPath = "/api/v2/integrations/speech/dialogflowcx/agents/{agentId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (agentId != null)
        {
            localVarPathParams.Add("agentId", Configuration.ApiClient.ParameterToString(agentId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowcxAgent: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowcxAgent: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<DialogflowCXAgent>(localVarStatusCode,
            localVarHeaders,
            (DialogflowCXAgent)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DialogflowCXAgent)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of Dialogflow CX agents in the customers&#39; Google accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>DialogflowCXAgentSummaryEntityListing</returns>

    public DialogflowCXAgentSummaryEntityListing GetIntegrationsSpeechDialogflowcxAgents(int? pageNumber = null, int? pageSize = null, string name = null)
    {
        ApiResponse<DialogflowCXAgentSummaryEntityListing> localVarResponse = GetIntegrationsSpeechDialogflowcxAgentsWithHttpInfo(pageNumber, pageSize, name);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of Dialogflow CX agents in the customers&#39; Google accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>ApiResponse of DialogflowCXAgentSummaryEntityListing</returns>

    public ApiResponse<DialogflowCXAgentSummaryEntityListing> GetIntegrationsSpeechDialogflowcxAgentsWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null)
    {

        var localVarPath = "/api/v2/integrations/speech/dialogflowcx/agents";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowcxAgents: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowcxAgents: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<DialogflowCXAgentSummaryEntityListing>(localVarStatusCode,
            localVarHeaders,
            (DialogflowCXAgentSummaryEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DialogflowCXAgentSummaryEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of Dialogflow CX agents in the customers&#39; Google accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>Task of DialogflowCXAgentSummaryEntityListing</returns>

    public async Task<DialogflowCXAgentSummaryEntityListing> GetIntegrationsSpeechDialogflowcxAgentsAsync(int? pageNumber = null, int? pageSize = null, string name = null)
    {
        ApiResponse<DialogflowCXAgentSummaryEntityListing> localVarResponse = await GetIntegrationsSpeechDialogflowcxAgentsAsyncWithHttpInfo(pageNumber, pageSize, name);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of Dialogflow CX agents in the customers&#39; Google accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on agent name (optional)</param>
    /// <returns>Task of ApiResponse (DialogflowCXAgentSummaryEntityListing)</returns>

    public async Task<ApiResponse<DialogflowCXAgentSummaryEntityListing>> GetIntegrationsSpeechDialogflowcxAgentsAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null)
    {

        var localVarPath = "/api/v2/integrations/speech/dialogflowcx/agents";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowcxAgents: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechDialogflowcxAgents: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<DialogflowCXAgentSummaryEntityListing>(localVarStatusCode,
            localVarHeaders,
            (DialogflowCXAgentSummaryEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DialogflowCXAgentSummaryEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get details about a Lex bot alias 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The alias ID</param>
    /// <returns>LexBotAlias</returns>

    public LexBotAlias GetIntegrationsSpeechLexBotAlias(string aliasId)
    {
        ApiResponse<LexBotAlias> localVarResponse = GetIntegrationsSpeechLexBotAliasWithHttpInfo(aliasId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get details about a Lex bot alias 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The alias ID</param>
    /// <returns>ApiResponse of LexBotAlias</returns>

    public ApiResponse<LexBotAlias> GetIntegrationsSpeechLexBotAliasWithHttpInfo(string aliasId)
    {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null)
        {
            throw new ApiException(400, "Missing required parameter 'aliasId' when calling IntegrationsApi->GetIntegrationsSpeechLexBotAlias");
        }

        var localVarPath = "/api/v2/integrations/speech/lex/bot/alias/{aliasId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (aliasId != null)
        {
            localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBotAlias: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBotAlias: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexBotAlias>(localVarStatusCode,
            localVarHeaders,
            (LexBotAlias)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexBotAlias)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get details about a Lex bot alias 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The alias ID</param>
    /// <returns>Task of LexBotAlias</returns>

    public async Task<LexBotAlias> GetIntegrationsSpeechLexBotAliasAsync(string aliasId)
    {
        ApiResponse<LexBotAlias> localVarResponse = await GetIntegrationsSpeechLexBotAliasAsyncWithHttpInfo(aliasId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get details about a Lex bot alias 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The alias ID</param>
    /// <returns>Task of ApiResponse (LexBotAlias)</returns>

    public async Task<ApiResponse<LexBotAlias>> GetIntegrationsSpeechLexBotAliasAsyncWithHttpInfo(string aliasId)
    {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null)
        {
            throw new ApiException(400, "Missing required parameter 'aliasId' when calling IntegrationsApi->GetIntegrationsSpeechLexBotAlias");
        }

        var localVarPath = "/api/v2/integrations/speech/lex/bot/alias/{aliasId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (aliasId != null)
        {
            localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBotAlias: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBotAlias: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexBotAlias>(localVarStatusCode,
            localVarHeaders,
            (LexBotAlias)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexBotAlias)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of aliases for a bot in the customer&#39;s AWS accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>LexBotAliasEntityListing</returns>

    public LexBotAliasEntityListing GetIntegrationsSpeechLexBotBotIdAliases(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null)
    {
        ApiResponse<LexBotAliasEntityListing> localVarResponse = GetIntegrationsSpeechLexBotBotIdAliasesWithHttpInfo(botId, pageNumber, pageSize, status, name);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of aliases for a bot in the customer&#39;s AWS accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>ApiResponse of LexBotAliasEntityListing</returns>

    public ApiResponse<LexBotAliasEntityListing> GetIntegrationsSpeechLexBotBotIdAliasesWithHttpInfo(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null)
    {
        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsSpeechLexBotBotIdAliases");
        }

        var localVarPath = "/api/v2/integrations/speech/lex/bot/{botId}/aliases";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (status != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("status", Configuration.ApiClient.ParameterToString(status)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBotBotIdAliases: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBotBotIdAliases: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexBotAliasEntityListing>(localVarStatusCode,
            localVarHeaders,
            (LexBotAliasEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexBotAliasEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of aliases for a bot in the customer&#39;s AWS accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>Task of LexBotAliasEntityListing</returns>

    public async Task<LexBotAliasEntityListing> GetIntegrationsSpeechLexBotBotIdAliasesAsync(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null)
    {
        ApiResponse<LexBotAliasEntityListing> localVarResponse = await GetIntegrationsSpeechLexBotBotIdAliasesAsyncWithHttpInfo(botId, pageNumber, pageSize, status, name);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of aliases for a bot in the customer&#39;s AWS accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>Task of ApiResponse (LexBotAliasEntityListing)</returns>

    public async Task<ApiResponse<LexBotAliasEntityListing>> GetIntegrationsSpeechLexBotBotIdAliasesAsyncWithHttpInfo(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null)
    {
        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsSpeechLexBotBotIdAliases");
        }

        var localVarPath = "/api/v2/integrations/speech/lex/bot/{botId}/aliases";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (status != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("status", Configuration.ApiClient.ParameterToString(status)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBotBotIdAliases: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBotBotIdAliases: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexBotAliasEntityListing>(localVarStatusCode,
            localVarHeaders,
            (LexBotAliasEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexBotAliasEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of Lex bots in the customers&#39; AWS accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>LexBotEntityListing</returns>

    public LexBotEntityListing GetIntegrationsSpeechLexBots(int? pageNumber = null, int? pageSize = null, string name = null)
    {
        ApiResponse<LexBotEntityListing> localVarResponse = GetIntegrationsSpeechLexBotsWithHttpInfo(pageNumber, pageSize, name);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of Lex bots in the customers&#39; AWS accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>ApiResponse of LexBotEntityListing</returns>

    public ApiResponse<LexBotEntityListing> GetIntegrationsSpeechLexBotsWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null)
    {

        var localVarPath = "/api/v2/integrations/speech/lex/bots";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBots: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBots: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexBotEntityListing>(localVarStatusCode,
            localVarHeaders,
            (LexBotEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexBotEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of Lex bots in the customers&#39; AWS accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>Task of LexBotEntityListing</returns>

    public async Task<LexBotEntityListing> GetIntegrationsSpeechLexBotsAsync(int? pageNumber = null, int? pageSize = null, string name = null)
    {
        ApiResponse<LexBotEntityListing> localVarResponse = await GetIntegrationsSpeechLexBotsAsyncWithHttpInfo(pageNumber, pageSize, name);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of Lex bots in the customers&#39; AWS accounts 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>Task of ApiResponse (LexBotEntityListing)</returns>

    public async Task<ApiResponse<LexBotEntityListing>> GetIntegrationsSpeechLexBotsAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null)
    {

        var localVarPath = "/api/v2/integrations/speech/lex/bots";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBots: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexBots: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexBotEntityListing>(localVarStatusCode,
            localVarHeaders,
            (LexBotEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexBotEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get details about a Lex V2 bot alias 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The Alias ID</param>
    /// <returns>LexV2BotAlias</returns>

    public LexV2BotAlias GetIntegrationsSpeechLexv2BotAlias(string aliasId)
    {
        ApiResponse<LexV2BotAlias> localVarResponse = GetIntegrationsSpeechLexv2BotAliasWithHttpInfo(aliasId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get details about a Lex V2 bot alias 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The Alias ID</param>
    /// <returns>ApiResponse of LexV2BotAlias</returns>

    public ApiResponse<LexV2BotAlias> GetIntegrationsSpeechLexv2BotAliasWithHttpInfo(string aliasId)
    {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null)
        {
            throw new ApiException(400, "Missing required parameter 'aliasId' when calling IntegrationsApi->GetIntegrationsSpeechLexv2BotAlias");
        }

        var localVarPath = "/api/v2/integrations/speech/lexv2/bot/alias/{aliasId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (aliasId != null)
        {
            localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2BotAlias: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2BotAlias: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexV2BotAlias>(localVarStatusCode,
            localVarHeaders,
            (LexV2BotAlias)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexV2BotAlias)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get details about a Lex V2 bot alias 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The Alias ID</param>
    /// <returns>Task of LexV2BotAlias</returns>

    public async Task<LexV2BotAlias> GetIntegrationsSpeechLexv2BotAliasAsync(string aliasId)
    {
        ApiResponse<LexV2BotAlias> localVarResponse = await GetIntegrationsSpeechLexv2BotAliasAsyncWithHttpInfo(aliasId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get details about a Lex V2 bot alias 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="aliasId">The Alias ID</param>
    /// <returns>Task of ApiResponse (LexV2BotAlias)</returns>

    public async Task<ApiResponse<LexV2BotAlias>> GetIntegrationsSpeechLexv2BotAliasAsyncWithHttpInfo(string aliasId)
    {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null)
        {
            throw new ApiException(400, "Missing required parameter 'aliasId' when calling IntegrationsApi->GetIntegrationsSpeechLexv2BotAlias");
        }

        var localVarPath = "/api/v2/integrations/speech/lexv2/bot/alias/{aliasId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (aliasId != null)
        {
            localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2BotAlias: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2BotAlias: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexV2BotAlias>(localVarStatusCode,
            localVarHeaders,
            (LexV2BotAlias)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexV2BotAlias)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of aliases for a Lex V2 bot 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The Bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>LexV2BotAliasEntityListing</returns>

    public LexV2BotAliasEntityListing GetIntegrationsSpeechLexv2BotBotIdAliases(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null)
    {
        ApiResponse<LexV2BotAliasEntityListing> localVarResponse = GetIntegrationsSpeechLexv2BotBotIdAliasesWithHttpInfo(botId, pageNumber, pageSize, status, name);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of aliases for a Lex V2 bot 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The Bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>ApiResponse of LexV2BotAliasEntityListing</returns>

    public ApiResponse<LexV2BotAliasEntityListing> GetIntegrationsSpeechLexv2BotBotIdAliasesWithHttpInfo(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null)
    {
        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsSpeechLexv2BotBotIdAliases");
        }

        var localVarPath = "/api/v2/integrations/speech/lexv2/bot/{botId}/aliases";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (status != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("status", Configuration.ApiClient.ParameterToString(status)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2BotBotIdAliases: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2BotBotIdAliases: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexV2BotAliasEntityListing>(localVarStatusCode,
            localVarHeaders,
            (LexV2BotAliasEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexV2BotAliasEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of aliases for a Lex V2 bot 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The Bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>Task of LexV2BotAliasEntityListing</returns>

    public async Task<LexV2BotAliasEntityListing> GetIntegrationsSpeechLexv2BotBotIdAliasesAsync(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null)
    {
        ApiResponse<LexV2BotAliasEntityListing> localVarResponse = await GetIntegrationsSpeechLexv2BotBotIdAliasesAsyncWithHttpInfo(botId, pageNumber, pageSize, status, name);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of aliases for a Lex V2 bot 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">The Bot ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="status">Filter on alias status (optional)</param>
    /// <param name="name">Filter on alias name (optional)</param>
    /// <returns>Task of ApiResponse (LexV2BotAliasEntityListing)</returns>

    public async Task<ApiResponse<LexV2BotAliasEntityListing>> GetIntegrationsSpeechLexv2BotBotIdAliasesAsyncWithHttpInfo(string botId, int? pageNumber = null, int? pageSize = null, string status = null, string name = null)
    {
        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsSpeechLexv2BotBotIdAliases");
        }

        var localVarPath = "/api/v2/integrations/speech/lexv2/bot/{botId}/aliases";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (status != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("status", Configuration.ApiClient.ParameterToString(status)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2BotBotIdAliases: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2BotBotIdAliases: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexV2BotAliasEntityListing>(localVarStatusCode,
            localVarHeaders,
            (LexV2BotAliasEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexV2BotAliasEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of Lex V2 bots 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>LexV2BotEntityListing</returns>

    public LexV2BotEntityListing GetIntegrationsSpeechLexv2Bots(int? pageNumber = null, int? pageSize = null, string name = null)
    {
        ApiResponse<LexV2BotEntityListing> localVarResponse = GetIntegrationsSpeechLexv2BotsWithHttpInfo(pageNumber, pageSize, name);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of Lex V2 bots 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>ApiResponse of LexV2BotEntityListing</returns>

    public ApiResponse<LexV2BotEntityListing> GetIntegrationsSpeechLexv2BotsWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null)
    {

        var localVarPath = "/api/v2/integrations/speech/lexv2/bots";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2Bots: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2Bots: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexV2BotEntityListing>(localVarStatusCode,
            localVarHeaders,
            (LexV2BotEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexV2BotEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of Lex V2 bots 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>Task of LexV2BotEntityListing</returns>

    public async Task<LexV2BotEntityListing> GetIntegrationsSpeechLexv2BotsAsync(int? pageNumber = null, int? pageSize = null, string name = null)
    {
        ApiResponse<LexV2BotEntityListing> localVarResponse = await GetIntegrationsSpeechLexv2BotsAsyncWithHttpInfo(pageNumber, pageSize, name);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of Lex V2 bots 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on bot name (optional)</param>
    /// <returns>Task of ApiResponse (LexV2BotEntityListing)</returns>

    public async Task<ApiResponse<LexV2BotEntityListing>> GetIntegrationsSpeechLexv2BotsAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null)
    {

        var localVarPath = "/api/v2/integrations/speech/lexv2/bots";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2Bots: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechLexv2Bots: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<LexV2BotEntityListing>(localVarStatusCode,
            localVarHeaders,
            (LexV2BotEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LexV2BotEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a Nuance bot in the specified Integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID to get</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="targetChannel">targetChannel (optional)</param>
    /// <returns>NuanceBot</returns>

    public NuanceBot GetIntegrationsSpeechNuanceNuanceIntegrationIdBot(string nuanceIntegrationId, string botId, List<string> expand = null, string targetChannel = null)
    {
        ApiResponse<NuanceBot> localVarResponse = GetIntegrationsSpeechNuanceNuanceIntegrationIdBotWithHttpInfo(nuanceIntegrationId, botId, expand, targetChannel);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a Nuance bot in the specified Integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID to get</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="targetChannel">targetChannel (optional)</param>
    /// <returns>ApiResponse of NuanceBot</returns>

    public ApiResponse<NuanceBot> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotWithHttpInfo(string nuanceIntegrationId, string botId, List<string> expand = null, string targetChannel = null)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBot");
        }
        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBot");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (targetChannel != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("targetChannel", Configuration.ApiClient.ParameterToString(targetChannel)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBot: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBot: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<NuanceBot>(localVarStatusCode,
            localVarHeaders,
            (NuanceBot)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NuanceBot)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a Nuance bot in the specified Integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID to get</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="targetChannel">targetChannel (optional)</param>
    /// <returns>Task of NuanceBot</returns>

    public async Task<NuanceBot> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotAsync(string nuanceIntegrationId, string botId, List<string> expand = null, string targetChannel = null)
    {
        ApiResponse<NuanceBot> localVarResponse = await GetIntegrationsSpeechNuanceNuanceIntegrationIdBotAsyncWithHttpInfo(nuanceIntegrationId, botId, expand, targetChannel);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a Nuance bot in the specified Integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID to get</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="targetChannel">targetChannel (optional)</param>
    /// <returns>Task of ApiResponse (NuanceBot)</returns>

    public async Task<ApiResponse<NuanceBot>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotAsyncWithHttpInfo(string nuanceIntegrationId, string botId, List<string> expand = null, string targetChannel = null)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBot");
        }

        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBot");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (targetChannel != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("targetChannel", Configuration.ApiClient.ParameterToString(targetChannel)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBot: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBot: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<NuanceBot>(localVarStatusCode,
            localVarHeaders,
            (NuanceBot)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NuanceBot)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get the status of an asynchronous Nuance bot GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>AsyncJob</returns>

    public AsyncJob GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob(string nuanceIntegrationId, string botId, string jobId)
    {
        ApiResponse<AsyncJob> localVarResponse = GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobWithHttpInfo(nuanceIntegrationId, botId, jobId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get the status of an asynchronous Nuance bot GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>ApiResponse of AsyncJob</returns>

    public ApiResponse<AsyncJob> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobWithHttpInfo(string nuanceIntegrationId, string botId, string jobId)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob");
        }
        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null)
        {
            throw new ApiException(400, "Missing required parameter 'jobId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs/{jobId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        if (jobId != null)
        {
            localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AsyncJob>(localVarStatusCode,
            localVarHeaders,
            (AsyncJob)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncJob)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get the status of an asynchronous Nuance bot GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of AsyncJob</returns>

    public async Task<AsyncJob> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobAsync(string nuanceIntegrationId, string botId, string jobId)
    {
        ApiResponse<AsyncJob> localVarResponse = await GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobAsyncWithHttpInfo(nuanceIntegrationId, botId, jobId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get the status of an asynchronous Nuance bot GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of ApiResponse (AsyncJob)</returns>

    public async Task<ApiResponse<AsyncJob>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobAsyncWithHttpInfo(string nuanceIntegrationId, string botId, string jobId)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob");
        }

        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null)
        {
            throw new ApiException(400, "Missing required parameter 'jobId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs/{jobId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        if (jobId != null)
        {
            localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AsyncJob>(localVarStatusCode,
            localVarHeaders,
            (AsyncJob)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncJob)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get the result of an asynchronous Nuance bot GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>NuanceBot</returns>

    public NuanceBot GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults(string nuanceIntegrationId, string botId, string jobId)
    {
        ApiResponse<NuanceBot> localVarResponse = GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResultsWithHttpInfo(nuanceIntegrationId, botId, jobId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get the result of an asynchronous Nuance bot GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>ApiResponse of NuanceBot</returns>

    public ApiResponse<NuanceBot> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResultsWithHttpInfo(string nuanceIntegrationId, string botId, string jobId)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults");
        }
        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null)
        {
            throw new ApiException(400, "Missing required parameter 'jobId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs/{jobId}/results";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        if (jobId != null)
        {
            localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<NuanceBot>(localVarStatusCode,
            localVarHeaders,
            (NuanceBot)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NuanceBot)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get the result of an asynchronous Nuance bot GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of NuanceBot</returns>

    public async Task<NuanceBot> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResultsAsync(string nuanceIntegrationId, string botId, string jobId)
    {
        ApiResponse<NuanceBot> localVarResponse = await GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResultsAsyncWithHttpInfo(nuanceIntegrationId, botId, jobId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get the result of an asynchronous Nuance bot GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of ApiResponse (NuanceBot)</returns>

    public async Task<ApiResponse<NuanceBot>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResultsAsyncWithHttpInfo(string nuanceIntegrationId, string botId, string jobId)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults");
        }

        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null)
        {
            throw new ApiException(400, "Missing required parameter 'jobId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs/{jobId}/results";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        if (jobId != null)
        {
            localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotJobResults: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<NuanceBot>(localVarStatusCode,
            localVarHeaders,
            (NuanceBot)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NuanceBot)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of Nuance bots available in the specified Integration 
    /// If the 'onlyRegisteredBots' param is set, the returned data will only include the Nuance bots which have configured client secrets within the Integration,  otherwise all of the Nuance bots available to the Integration's configured discovery credentials are returned.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>NuanceBotEntityListing</returns>

    public NuanceBotEntityListing GetIntegrationsSpeechNuanceNuanceIntegrationIdBots(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null)
    {
        ApiResponse<NuanceBotEntityListing> localVarResponse = GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsWithHttpInfo(nuanceIntegrationId, pageNumber, pageSize, onlyRegisteredBots);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of Nuance bots available in the specified Integration 
    /// If the 'onlyRegisteredBots' param is set, the returned data will only include the Nuance bots which have configured client secrets within the Integration,  otherwise all of the Nuance bots available to the Integration's configured discovery credentials are returned.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>ApiResponse of NuanceBotEntityListing</returns>

    public ApiResponse<NuanceBotEntityListing> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsWithHttpInfo(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBots");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (onlyRegisteredBots != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("onlyRegisteredBots", Configuration.ApiClient.ParameterToString(onlyRegisteredBots)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBots: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBots: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<NuanceBotEntityListing>(localVarStatusCode,
            localVarHeaders,
            (NuanceBotEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NuanceBotEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of Nuance bots available in the specified Integration 
    /// If the 'onlyRegisteredBots' param is set, the returned data will only include the Nuance bots which have configured client secrets within the Integration,  otherwise all of the Nuance bots available to the Integration's configured discovery credentials are returned.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>Task of NuanceBotEntityListing</returns>

    public async Task<NuanceBotEntityListing> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsAsync(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null)
    {
        ApiResponse<NuanceBotEntityListing> localVarResponse = await GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsAsyncWithHttpInfo(nuanceIntegrationId, pageNumber, pageSize, onlyRegisteredBots);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of Nuance bots available in the specified Integration 
    /// If the 'onlyRegisteredBots' param is set, the returned data will only include the Nuance bots which have configured client secrets within the Integration,  otherwise all of the Nuance bots available to the Integration's configured discovery credentials are returned.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>Task of ApiResponse (NuanceBotEntityListing)</returns>

    public async Task<ApiResponse<NuanceBotEntityListing>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsAsyncWithHttpInfo(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBots");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (onlyRegisteredBots != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("onlyRegisteredBots", Configuration.ApiClient.ParameterToString(onlyRegisteredBots)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBots: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBots: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<NuanceBotEntityListing>(localVarStatusCode,
            localVarHeaders,
            (NuanceBotEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NuanceBotEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get the status of an asynchronous Nuance bots GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>AsyncJob</returns>

    public AsyncJob GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob(string nuanceIntegrationId, string jobId)
    {
        ApiResponse<AsyncJob> localVarResponse = GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobWithHttpInfo(nuanceIntegrationId, jobId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get the status of an asynchronous Nuance bots GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>ApiResponse of AsyncJob</returns>

    public ApiResponse<AsyncJob> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobWithHttpInfo(string nuanceIntegrationId, string jobId)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null)
        {
            throw new ApiException(400, "Missing required parameter 'jobId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs/{jobId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (jobId != null)
        {
            localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AsyncJob>(localVarStatusCode,
            localVarHeaders,
            (AsyncJob)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncJob)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get the status of an asynchronous Nuance bots GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of AsyncJob</returns>

    public async Task<AsyncJob> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobAsync(string nuanceIntegrationId, string jobId)
    {
        ApiResponse<AsyncJob> localVarResponse = await GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobAsyncWithHttpInfo(nuanceIntegrationId, jobId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get the status of an asynchronous Nuance bots GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of ApiResponse (AsyncJob)</returns>

    public async Task<ApiResponse<AsyncJob>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobAsyncWithHttpInfo(string nuanceIntegrationId, string jobId)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null)
        {
            throw new ApiException(400, "Missing required parameter 'jobId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs/{jobId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (jobId != null)
        {
            localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJob: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AsyncJob>(localVarStatusCode,
            localVarHeaders,
            (AsyncJob)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncJob)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get the result of an asynchronous Nuance bots GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>NuanceBotEntityListing</returns>

    public NuanceBotEntityListing GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults(string nuanceIntegrationId, string jobId)
    {
        ApiResponse<NuanceBotEntityListing> localVarResponse = GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResultsWithHttpInfo(nuanceIntegrationId, jobId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get the result of an asynchronous Nuance bots GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>ApiResponse of NuanceBotEntityListing</returns>

    public ApiResponse<NuanceBotEntityListing> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResultsWithHttpInfo(string nuanceIntegrationId, string jobId)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null)
        {
            throw new ApiException(400, "Missing required parameter 'jobId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs/{jobId}/results";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (jobId != null)
        {
            localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<NuanceBotEntityListing>(localVarStatusCode,
            localVarHeaders,
            (NuanceBotEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NuanceBotEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get the result of an asynchronous Nuance bots GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of NuanceBotEntityListing</returns>

    public async Task<NuanceBotEntityListing> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResultsAsync(string nuanceIntegrationId, string jobId)
    {
        ApiResponse<NuanceBotEntityListing> localVarResponse = await GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResultsAsyncWithHttpInfo(nuanceIntegrationId, jobId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get the result of an asynchronous Nuance bots GET job 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="jobId">The asynchronous job ID</param>
    /// <returns>Task of ApiResponse (NuanceBotEntityListing)</returns>

    public async Task<ApiResponse<NuanceBotEntityListing>> GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResultsAsyncWithHttpInfo(string nuanceIntegrationId, string jobId)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null)
        {
            throw new ApiException(400, "Missing required parameter 'jobId' when calling IntegrationsApi->GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs/{jobId}/results";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (jobId != null)
        {
            localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobResults: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<NuanceBotEntityListing>(localVarStatusCode,
            localVarHeaders,
            (NuanceBotEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NuanceBotEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get details about a STT engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <returns>SttEngineEntity</returns>

    public SttEngineEntity GetIntegrationsSpeechSttEngine(string engineId)
    {
        ApiResponse<SttEngineEntity> localVarResponse = GetIntegrationsSpeechSttEngineWithHttpInfo(engineId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get details about a STT engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <returns>ApiResponse of SttEngineEntity</returns>

    public ApiResponse<SttEngineEntity> GetIntegrationsSpeechSttEngineWithHttpInfo(string engineId)
    {
        // verify the required parameter 'engineId' is set
        if (engineId == null)
        {
            throw new ApiException(400, "Missing required parameter 'engineId' when calling IntegrationsApi->GetIntegrationsSpeechSttEngine");
        }

        var localVarPath = "/api/v2/integrations/speech/stt/engines/{engineId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (engineId != null)
        {
            localVarPathParams.Add("engineId", Configuration.ApiClient.ParameterToString(engineId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechSttEngine: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechSttEngine: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<SttEngineEntity>(localVarStatusCode,
            localVarHeaders,
            (SttEngineEntity)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SttEngineEntity)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get details about a STT engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <returns>Task of SttEngineEntity</returns>

    public async Task<SttEngineEntity> GetIntegrationsSpeechSttEngineAsync(string engineId)
    {
        ApiResponse<SttEngineEntity> localVarResponse = await GetIntegrationsSpeechSttEngineAsyncWithHttpInfo(engineId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get details about a STT engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <returns>Task of ApiResponse (SttEngineEntity)</returns>

    public async Task<ApiResponse<SttEngineEntity>> GetIntegrationsSpeechSttEngineAsyncWithHttpInfo(string engineId)
    {
        // verify the required parameter 'engineId' is set
        if (engineId == null)
        {
            throw new ApiException(400, "Missing required parameter 'engineId' when calling IntegrationsApi->GetIntegrationsSpeechSttEngine");
        }

        var localVarPath = "/api/v2/integrations/speech/stt/engines/{engineId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (engineId != null)
        {
            localVarPathParams.Add("engineId", Configuration.ApiClient.ParameterToString(engineId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechSttEngine: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechSttEngine: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<SttEngineEntity>(localVarStatusCode,
            localVarHeaders,
            (SttEngineEntity)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SttEngineEntity)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of STT engines enabled for org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <returns>SttEngineEntityListing</returns>

    public SttEngineEntityListing GetIntegrationsSpeechSttEngines(int? pageNumber = null, int? pageSize = null, string name = null)
    {
        ApiResponse<SttEngineEntityListing> localVarResponse = GetIntegrationsSpeechSttEnginesWithHttpInfo(pageNumber, pageSize, name);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of STT engines enabled for org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <returns>ApiResponse of SttEngineEntityListing</returns>

    public ApiResponse<SttEngineEntityListing> GetIntegrationsSpeechSttEnginesWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null)
    {

        var localVarPath = "/api/v2/integrations/speech/stt/engines";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechSttEngines: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechSttEngines: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<SttEngineEntityListing>(localVarStatusCode,
            localVarHeaders,
            (SttEngineEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SttEngineEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of STT engines enabled for org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <returns>Task of SttEngineEntityListing</returns>

    public async Task<SttEngineEntityListing> GetIntegrationsSpeechSttEnginesAsync(int? pageNumber = null, int? pageSize = null, string name = null)
    {
        ApiResponse<SttEngineEntityListing> localVarResponse = await GetIntegrationsSpeechSttEnginesAsyncWithHttpInfo(pageNumber, pageSize, name);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of STT engines enabled for org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <returns>Task of ApiResponse (SttEngineEntityListing)</returns>

    public async Task<ApiResponse<SttEngineEntityListing>> GetIntegrationsSpeechSttEnginesAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, string name = null)
    {

        var localVarPath = "/api/v2/integrations/speech/stt/engines";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechSttEngines: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechSttEngines: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<SttEngineEntityListing>(localVarStatusCode,
            localVarHeaders,
            (SttEngineEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SttEngineEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get details about a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <returns>TtsEngineEntity</returns>

    public TtsEngineEntity GetIntegrationsSpeechTtsEngine(string engineId, bool? includeVoices = null)
    {
        ApiResponse<TtsEngineEntity> localVarResponse = GetIntegrationsSpeechTtsEngineWithHttpInfo(engineId, includeVoices);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get details about a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <returns>ApiResponse of TtsEngineEntity</returns>

    public ApiResponse<TtsEngineEntity> GetIntegrationsSpeechTtsEngineWithHttpInfo(string engineId, bool? includeVoices = null)
    {
        // verify the required parameter 'engineId' is set
        if (engineId == null)
        {
            throw new ApiException(400, "Missing required parameter 'engineId' when calling IntegrationsApi->GetIntegrationsSpeechTtsEngine");
        }

        var localVarPath = "/api/v2/integrations/speech/tts/engines/{engineId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (engineId != null)
        {
            localVarPathParams.Add("engineId", Configuration.ApiClient.ParameterToString(engineId));
        }

        // Query params
        if (includeVoices != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeVoices", Configuration.ApiClient.ParameterToString(includeVoices)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngine: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngine: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsEngineEntity>(localVarStatusCode,
            localVarHeaders,
            (TtsEngineEntity)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsEngineEntity)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get details about a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <returns>Task of TtsEngineEntity</returns>

    public async Task<TtsEngineEntity> GetIntegrationsSpeechTtsEngineAsync(string engineId, bool? includeVoices = null)
    {
        ApiResponse<TtsEngineEntity> localVarResponse = await GetIntegrationsSpeechTtsEngineAsyncWithHttpInfo(engineId, includeVoices);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get details about a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <returns>Task of ApiResponse (TtsEngineEntity)</returns>

    public async Task<ApiResponse<TtsEngineEntity>> GetIntegrationsSpeechTtsEngineAsyncWithHttpInfo(string engineId, bool? includeVoices = null)
    {
        // verify the required parameter 'engineId' is set
        if (engineId == null)
        {
            throw new ApiException(400, "Missing required parameter 'engineId' when calling IntegrationsApi->GetIntegrationsSpeechTtsEngine");
        }

        var localVarPath = "/api/v2/integrations/speech/tts/engines/{engineId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (engineId != null)
        {
            localVarPathParams.Add("engineId", Configuration.ApiClient.ParameterToString(engineId));
        }

        // Query params
        if (includeVoices != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeVoices", Configuration.ApiClient.ParameterToString(includeVoices)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngine: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngine: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsEngineEntity>(localVarStatusCode,
            localVarHeaders,
            (TtsEngineEntity)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsEngineEntity)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get details about a specific voice for a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="voiceId">The voice ID</param>
    /// <returns>TtsVoiceEntity</returns>

    public TtsVoiceEntity GetIntegrationsSpeechTtsEngineVoice(string engineId, string voiceId)
    {
        ApiResponse<TtsVoiceEntity> localVarResponse = GetIntegrationsSpeechTtsEngineVoiceWithHttpInfo(engineId, voiceId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get details about a specific voice for a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="voiceId">The voice ID</param>
    /// <returns>ApiResponse of TtsVoiceEntity</returns>

    public ApiResponse<TtsVoiceEntity> GetIntegrationsSpeechTtsEngineVoiceWithHttpInfo(string engineId, string voiceId)
    {
        // verify the required parameter 'engineId' is set
        if (engineId == null)
        {
            throw new ApiException(400, "Missing required parameter 'engineId' when calling IntegrationsApi->GetIntegrationsSpeechTtsEngineVoice");
        }
        // verify the required parameter 'voiceId' is set
        if (voiceId == null)
        {
            throw new ApiException(400, "Missing required parameter 'voiceId' when calling IntegrationsApi->GetIntegrationsSpeechTtsEngineVoice");
        }

        var localVarPath = "/api/v2/integrations/speech/tts/engines/{engineId}/voices/{voiceId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (engineId != null)
        {
            localVarPathParams.Add("engineId", Configuration.ApiClient.ParameterToString(engineId));
        }

        if (voiceId != null)
        {
            localVarPathParams.Add("voiceId", Configuration.ApiClient.ParameterToString(voiceId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngineVoice: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngineVoice: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsVoiceEntity>(localVarStatusCode,
            localVarHeaders,
            (TtsVoiceEntity)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsVoiceEntity)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get details about a specific voice for a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="voiceId">The voice ID</param>
    /// <returns>Task of TtsVoiceEntity</returns>

    public async Task<TtsVoiceEntity> GetIntegrationsSpeechTtsEngineVoiceAsync(string engineId, string voiceId)
    {
        ApiResponse<TtsVoiceEntity> localVarResponse = await GetIntegrationsSpeechTtsEngineVoiceAsyncWithHttpInfo(engineId, voiceId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get details about a specific voice for a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="voiceId">The voice ID</param>
    /// <returns>Task of ApiResponse (TtsVoiceEntity)</returns>

    public async Task<ApiResponse<TtsVoiceEntity>> GetIntegrationsSpeechTtsEngineVoiceAsyncWithHttpInfo(string engineId, string voiceId)
    {
        // verify the required parameter 'engineId' is set
        if (engineId == null)
        {
            throw new ApiException(400, "Missing required parameter 'engineId' when calling IntegrationsApi->GetIntegrationsSpeechTtsEngineVoice");
        }

        // verify the required parameter 'voiceId' is set
        if (voiceId == null)
        {
            throw new ApiException(400, "Missing required parameter 'voiceId' when calling IntegrationsApi->GetIntegrationsSpeechTtsEngineVoice");
        }

        var localVarPath = "/api/v2/integrations/speech/tts/engines/{engineId}/voices/{voiceId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (engineId != null)
        {
            localVarPathParams.Add("engineId", Configuration.ApiClient.ParameterToString(engineId));
        }

        if (voiceId != null)
        {
            localVarPathParams.Add("voiceId", Configuration.ApiClient.ParameterToString(voiceId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngineVoice: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngineVoice: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsVoiceEntity>(localVarStatusCode,
            localVarHeaders,
            (TtsVoiceEntity)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsVoiceEntity)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of voices for a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>TtsVoiceEntityListing</returns>

    public TtsVoiceEntityListing GetIntegrationsSpeechTtsEngineVoices(string engineId, int? pageNumber = null, int? pageSize = null)
    {
        ApiResponse<TtsVoiceEntityListing> localVarResponse = GetIntegrationsSpeechTtsEngineVoicesWithHttpInfo(engineId, pageNumber, pageSize);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of voices for a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>ApiResponse of TtsVoiceEntityListing</returns>

    public ApiResponse<TtsVoiceEntityListing> GetIntegrationsSpeechTtsEngineVoicesWithHttpInfo(string engineId, int? pageNumber = null, int? pageSize = null)
    {
        // verify the required parameter 'engineId' is set
        if (engineId == null)
        {
            throw new ApiException(400, "Missing required parameter 'engineId' when calling IntegrationsApi->GetIntegrationsSpeechTtsEngineVoices");
        }

        var localVarPath = "/api/v2/integrations/speech/tts/engines/{engineId}/voices";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (engineId != null)
        {
            localVarPathParams.Add("engineId", Configuration.ApiClient.ParameterToString(engineId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngineVoices: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngineVoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsVoiceEntityListing>(localVarStatusCode,
            localVarHeaders,
            (TtsVoiceEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsVoiceEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of voices for a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of TtsVoiceEntityListing</returns>

    public async Task<TtsVoiceEntityListing> GetIntegrationsSpeechTtsEngineVoicesAsync(string engineId, int? pageNumber = null, int? pageSize = null)
    {
        ApiResponse<TtsVoiceEntityListing> localVarResponse = await GetIntegrationsSpeechTtsEngineVoicesAsyncWithHttpInfo(engineId, pageNumber, pageSize);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of voices for a TTS engine 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="engineId">The engine ID</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <returns>Task of ApiResponse (TtsVoiceEntityListing)</returns>

    public async Task<ApiResponse<TtsVoiceEntityListing>> GetIntegrationsSpeechTtsEngineVoicesAsyncWithHttpInfo(string engineId, int? pageNumber = null, int? pageSize = null)
    {
        // verify the required parameter 'engineId' is set
        if (engineId == null)
        {
            throw new ApiException(400, "Missing required parameter 'engineId' when calling IntegrationsApi->GetIntegrationsSpeechTtsEngineVoices");
        }

        var localVarPath = "/api/v2/integrations/speech/tts/engines/{engineId}/voices";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (engineId != null)
        {
            localVarPathParams.Add("engineId", Configuration.ApiClient.ParameterToString(engineId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngineVoices: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngineVoices: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsVoiceEntityListing>(localVarStatusCode,
            localVarHeaders,
            (TtsVoiceEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsVoiceEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of TTS engines enabled for org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <param name="language">Filter on supported language. If includeVoices&#x3D;true then the voices are also filtered. (optional)</param>
    /// <returns>TtsEngineEntityListing</returns>

    public TtsEngineEntityListing GetIntegrationsSpeechTtsEngines(int? pageNumber = null, int? pageSize = null, bool? includeVoices = null, string name = null, string language = null)
    {
        ApiResponse<TtsEngineEntityListing> localVarResponse = GetIntegrationsSpeechTtsEnginesWithHttpInfo(pageNumber, pageSize, includeVoices, name, language);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of TTS engines enabled for org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <param name="language">Filter on supported language. If includeVoices&#x3D;true then the voices are also filtered. (optional)</param>
    /// <returns>ApiResponse of TtsEngineEntityListing</returns>

    public ApiResponse<TtsEngineEntityListing> GetIntegrationsSpeechTtsEnginesWithHttpInfo(int? pageNumber = null, int? pageSize = null, bool? includeVoices = null, string name = null, string language = null)
    {

        var localVarPath = "/api/v2/integrations/speech/tts/engines";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (includeVoices != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeVoices", Configuration.ApiClient.ParameterToString(includeVoices)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        if (language != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("language", Configuration.ApiClient.ParameterToString(language)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngines: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngines: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsEngineEntityListing>(localVarStatusCode,
            localVarHeaders,
            (TtsEngineEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsEngineEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of TTS engines enabled for org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <param name="language">Filter on supported language. If includeVoices&#x3D;true then the voices are also filtered. (optional)</param>
    /// <returns>Task of TtsEngineEntityListing</returns>

    public async Task<TtsEngineEntityListing> GetIntegrationsSpeechTtsEnginesAsync(int? pageNumber = null, int? pageSize = null, bool? includeVoices = null, string name = null, string language = null)
    {
        ApiResponse<TtsEngineEntityListing> localVarResponse = await GetIntegrationsSpeechTtsEnginesAsyncWithHttpInfo(pageNumber, pageSize, includeVoices, name, language);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of TTS engines enabled for org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="includeVoices">Include voices for the engine (optional, default to false)</param>
    /// <param name="name">Filter on engine name (optional)</param>
    /// <param name="language">Filter on supported language. If includeVoices&#x3D;true then the voices are also filtered. (optional)</param>
    /// <returns>Task of ApiResponse (TtsEngineEntityListing)</returns>

    public async Task<ApiResponse<TtsEngineEntityListing>> GetIntegrationsSpeechTtsEnginesAsyncWithHttpInfo(int? pageNumber = null, int? pageSize = null, bool? includeVoices = null, string name = null, string language = null)
    {

        var localVarPath = "/api/v2/integrations/speech/tts/engines";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (includeVoices != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("includeVoices", Configuration.ApiClient.ParameterToString(includeVoices)));
        }

        if (name != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("name", Configuration.ApiClient.ParameterToString(name)));
        }

        if (language != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("language", Configuration.ApiClient.ParameterToString(language)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngines: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsEngines: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsEngineEntityListing>(localVarStatusCode,
            localVarHeaders,
            (TtsEngineEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsEngineEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get TTS settings for an org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>TtsSettings</returns>

    public TtsSettings GetIntegrationsSpeechTtsSettings()
    {
        ApiResponse<TtsSettings> localVarResponse = GetIntegrationsSpeechTtsSettingsWithHttpInfo();
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get TTS settings for an org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of TtsSettings</returns>

    public ApiResponse<TtsSettings> GetIntegrationsSpeechTtsSettingsWithHttpInfo()
    {

        var localVarPath = "/api/v2/integrations/speech/tts/settings";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsSettings: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsSettings: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsSettings>(localVarStatusCode,
            localVarHeaders,
            (TtsSettings)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsSettings)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get TTS settings for an org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of TtsSettings</returns>

    public async Task<TtsSettings> GetIntegrationsSpeechTtsSettingsAsync()
    {
        ApiResponse<TtsSettings> localVarResponse = await GetIntegrationsSpeechTtsSettingsAsyncWithHttpInfo();
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get TTS settings for an org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Task of ApiResponse (TtsSettings)</returns>

    public async Task<ApiResponse<TtsSettings>> GetIntegrationsSpeechTtsSettingsAsyncWithHttpInfo()
    {

        var localVarPath = "/api/v2/integrations/speech/tts/settings";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsSettings: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsSpeechTtsSettings: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsSettings>(localVarStatusCode,
            localVarHeaders,
            (TtsSettings)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsSettings)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get integration type. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <returns>IntegrationType</returns>

    public IntegrationType GetIntegrationsType(string typeId)
    {
        ApiResponse<IntegrationType> localVarResponse = GetIntegrationsTypeWithHttpInfo(typeId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get integration type. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <returns>ApiResponse of IntegrationType</returns>

    public ApiResponse<IntegrationType> GetIntegrationsTypeWithHttpInfo(string typeId)
    {
        // verify the required parameter 'typeId' is set
        if (typeId == null)
        {
            throw new ApiException(400, "Missing required parameter 'typeId' when calling IntegrationsApi->GetIntegrationsType");
        }

        var localVarPath = "/api/v2/integrations/types/{typeId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (typeId != null)
        {
            localVarPathParams.Add("typeId", Configuration.ApiClient.ParameterToString(typeId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsType: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsType: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<IntegrationType>(localVarStatusCode,
            localVarHeaders,
            (IntegrationType)Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationType)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get integration type. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <returns>Task of IntegrationType</returns>

    public async Task<IntegrationType> GetIntegrationsTypeAsync(string typeId)
    {
        ApiResponse<IntegrationType> localVarResponse = await GetIntegrationsTypeAsyncWithHttpInfo(typeId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get integration type. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <returns>Task of ApiResponse (IntegrationType)</returns>

    public async Task<ApiResponse<IntegrationType>> GetIntegrationsTypeAsyncWithHttpInfo(string typeId)
    {
        // verify the required parameter 'typeId' is set
        if (typeId == null)
        {
            throw new ApiException(400, "Missing required parameter 'typeId' when calling IntegrationsApi->GetIntegrationsType");
        }

        var localVarPath = "/api/v2/integrations/types/{typeId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (typeId != null)
        {
            localVarPathParams.Add("typeId", Configuration.ApiClient.ParameterToString(typeId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsType: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsType: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<IntegrationType>(localVarStatusCode,
            localVarHeaders,
            (IntegrationType)Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationType)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get properties config schema for an integration type. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <param name="configType">Config schema type</param>
    /// <returns>JsonSchemaDocument</returns>

    public JsonSchemaDocument GetIntegrationsTypeConfigschema(string typeId, string configType)
    {
        ApiResponse<JsonSchemaDocument> localVarResponse = GetIntegrationsTypeConfigschemaWithHttpInfo(typeId, configType);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get properties config schema for an integration type. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <param name="configType">Config schema type</param>
    /// <returns>ApiResponse of JsonSchemaDocument</returns>

    public ApiResponse<JsonSchemaDocument> GetIntegrationsTypeConfigschemaWithHttpInfo(string typeId, string configType)
    {
        // verify the required parameter 'typeId' is set
        if (typeId == null)
        {
            throw new ApiException(400, "Missing required parameter 'typeId' when calling IntegrationsApi->GetIntegrationsTypeConfigschema");
        }
        // verify the required parameter 'configType' is set
        if (configType == null)
        {
            throw new ApiException(400, "Missing required parameter 'configType' when calling IntegrationsApi->GetIntegrationsTypeConfigschema");
        }

        var localVarPath = "/api/v2/integrations/types/{typeId}/configschemas/{configType}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (typeId != null)
        {
            localVarPathParams.Add("typeId", Configuration.ApiClient.ParameterToString(typeId));
        }

        if (configType != null)
        {
            localVarPathParams.Add("configType", Configuration.ApiClient.ParameterToString(configType));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsTypeConfigschema: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsTypeConfigschema: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<JsonSchemaDocument>(localVarStatusCode,
            localVarHeaders,
            (JsonSchemaDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSchemaDocument)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get properties config schema for an integration type. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <param name="configType">Config schema type</param>
    /// <returns>Task of JsonSchemaDocument</returns>

    public async Task<JsonSchemaDocument> GetIntegrationsTypeConfigschemaAsync(string typeId, string configType)
    {
        ApiResponse<JsonSchemaDocument> localVarResponse = await GetIntegrationsTypeConfigschemaAsyncWithHttpInfo(typeId, configType);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get properties config schema for an integration type. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="typeId">Integration Type Id</param>
    /// <param name="configType">Config schema type</param>
    /// <returns>Task of ApiResponse (JsonSchemaDocument)</returns>

    public async Task<ApiResponse<JsonSchemaDocument>> GetIntegrationsTypeConfigschemaAsyncWithHttpInfo(string typeId, string configType)
    {
        // verify the required parameter 'typeId' is set
        if (typeId == null)
        {
            throw new ApiException(400, "Missing required parameter 'typeId' when calling IntegrationsApi->GetIntegrationsTypeConfigschema");
        }

        // verify the required parameter 'configType' is set
        if (configType == null)
        {
            throw new ApiException(400, "Missing required parameter 'configType' when calling IntegrationsApi->GetIntegrationsTypeConfigschema");
        }

        var localVarPath = "/api/v2/integrations/types/{typeId}/configschemas/{configType}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (typeId != null)
        {
            localVarPathParams.Add("typeId", Configuration.ApiClient.ParameterToString(typeId));
        }

        if (configType != null)
        {
            localVarPathParams.Add("configType", Configuration.ApiClient.ParameterToString(configType));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsTypeConfigschema: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsTypeConfigschema: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<JsonSchemaDocument>(localVarStatusCode,
            localVarHeaders,
            (JsonSchemaDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSchemaDocument)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// List integration types 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>IntegrationTypeEntityListing</returns>

    public IntegrationTypeEntityListing GetIntegrationsTypes(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<IntegrationTypeEntityListing> localVarResponse = GetIntegrationsTypesWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;
    }

    /// <summary>
    /// List integration types 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of IntegrationTypeEntityListing</returns>

    public ApiResponse<IntegrationTypeEntityListing> GetIntegrationsTypesWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {

        var localVarPath = "/api/v2/integrations/types";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsTypes: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsTypes: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<IntegrationTypeEntityListing>(localVarStatusCode,
            localVarHeaders,
            (IntegrationTypeEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationTypeEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// List integration types 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of IntegrationTypeEntityListing</returns>

    public async Task<IntegrationTypeEntityListing> GetIntegrationsTypesAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<IntegrationTypeEntityListing> localVarResponse = await GetIntegrationsTypesAsyncWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;

    }

    /// <summary>
    /// List integration types 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (IntegrationTypeEntityListing)</returns>

    public async Task<ApiResponse<IntegrationTypeEntityListing>> GetIntegrationsTypesAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {

        var localVarPath = "/api/v2/integrations/types";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsTypes: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsTypes: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<IntegrationTypeEntityListing>(localVarStatusCode,
            localVarHeaders,
            (IntegrationTypeEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationTypeEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// UC integration client application configuration. 
    /// This endpoint returns basic UI configuration data for the specified Unified Communications integration client application.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">3rd Party Service Type</param>
    /// <returns>UnifiedCommunicationsIntegration</returns>

    public UnifiedCommunicationsIntegration GetIntegrationsUnifiedcommunicationsClientapp(string ucIntegrationId)
    {
        ApiResponse<UnifiedCommunicationsIntegration> localVarResponse = GetIntegrationsUnifiedcommunicationsClientappWithHttpInfo(ucIntegrationId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// UC integration client application configuration. 
    /// This endpoint returns basic UI configuration data for the specified Unified Communications integration client application.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">3rd Party Service Type</param>
    /// <returns>ApiResponse of UnifiedCommunicationsIntegration</returns>

    public ApiResponse<UnifiedCommunicationsIntegration> GetIntegrationsUnifiedcommunicationsClientappWithHttpInfo(string ucIntegrationId)
    {
        // verify the required parameter 'ucIntegrationId' is set
        if (ucIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'ucIntegrationId' when calling IntegrationsApi->GetIntegrationsUnifiedcommunicationsClientapp");
        }

        var localVarPath = "/api/v2/integrations/unifiedcommunications/clientapps/{ucIntegrationId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (ucIntegrationId != null)
        {
            localVarPathParams.Add("ucIntegrationId", Configuration.ApiClient.ParameterToString(ucIntegrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUnifiedcommunicationsClientapp: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUnifiedcommunicationsClientapp: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<UnifiedCommunicationsIntegration>(localVarStatusCode,
            localVarHeaders,
            (UnifiedCommunicationsIntegration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedCommunicationsIntegration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// UC integration client application configuration. 
    /// This endpoint returns basic UI configuration data for the specified Unified Communications integration client application.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">3rd Party Service Type</param>
    /// <returns>Task of UnifiedCommunicationsIntegration</returns>

    public async Task<UnifiedCommunicationsIntegration> GetIntegrationsUnifiedcommunicationsClientappAsync(string ucIntegrationId)
    {
        ApiResponse<UnifiedCommunicationsIntegration> localVarResponse = await GetIntegrationsUnifiedcommunicationsClientappAsyncWithHttpInfo(ucIntegrationId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// UC integration client application configuration. 
    /// This endpoint returns basic UI configuration data for the specified Unified Communications integration client application.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">3rd Party Service Type</param>
    /// <returns>Task of ApiResponse (UnifiedCommunicationsIntegration)</returns>

    public async Task<ApiResponse<UnifiedCommunicationsIntegration>> GetIntegrationsUnifiedcommunicationsClientappAsyncWithHttpInfo(string ucIntegrationId)
    {
        // verify the required parameter 'ucIntegrationId' is set
        if (ucIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'ucIntegrationId' when calling IntegrationsApi->GetIntegrationsUnifiedcommunicationsClientapp");
        }

        var localVarPath = "/api/v2/integrations/unifiedcommunications/clientapps/{ucIntegrationId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (ucIntegrationId != null)
        {
            localVarPathParams.Add("ucIntegrationId", Configuration.ApiClient.ParameterToString(ucIntegrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUnifiedcommunicationsClientapp: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUnifiedcommunicationsClientapp: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<UnifiedCommunicationsIntegration>(localVarStatusCode,
            localVarHeaders,
            (UnifiedCommunicationsIntegration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedCommunicationsIntegration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// List UC integration client application configurations. 
    /// This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>UnifiedCommunicationsIntegrationListing</returns>

    public UnifiedCommunicationsIntegrationListing GetIntegrationsUnifiedcommunicationsClientapps(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<UnifiedCommunicationsIntegrationListing> localVarResponse = GetIntegrationsUnifiedcommunicationsClientappsWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;
    }

    /// <summary>
    /// List UC integration client application configurations. 
    /// This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>ApiResponse of UnifiedCommunicationsIntegrationListing</returns>

    public ApiResponse<UnifiedCommunicationsIntegrationListing> GetIntegrationsUnifiedcommunicationsClientappsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {

        var localVarPath = "/api/v2/integrations/unifiedcommunications/clientapps";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUnifiedcommunicationsClientapps: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUnifiedcommunicationsClientapps: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<UnifiedCommunicationsIntegrationListing>(localVarStatusCode,
            localVarHeaders,
            (UnifiedCommunicationsIntegrationListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedCommunicationsIntegrationListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// List UC integration client application configurations. 
    /// This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of UnifiedCommunicationsIntegrationListing</returns>

    public async Task<UnifiedCommunicationsIntegrationListing> GetIntegrationsUnifiedcommunicationsClientappsAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {
        ApiResponse<UnifiedCommunicationsIntegrationListing> localVarResponse = await GetIntegrationsUnifiedcommunicationsClientappsAsyncWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage);
        return localVarResponse.Data;

    }

    /// <summary>
    /// List UC integration client application configurations. 
    /// This endpoint returns basic UI configuration data for all Unified Communications integrations client applications enabled.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <returns>Task of ApiResponse (UnifiedCommunicationsIntegrationListing)</returns>

    public async Task<ApiResponse<UnifiedCommunicationsIntegrationListing>> GetIntegrationsUnifiedcommunicationsClientappsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null)
    {

        var localVarPath = "/api/v2/integrations/unifiedcommunications/clientapps";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUnifiedcommunicationsClientapps: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUnifiedcommunicationsClientapps: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<UnifiedCommunicationsIntegrationListing>(localVarStatusCode,
            localVarHeaders,
            (UnifiedCommunicationsIntegrationListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnifiedCommunicationsIntegrationListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// List permitted user app integrations for the logged in user 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="appHost">The type of UserApp to filter by (optional)</param>
    /// <returns>UserAppEntityListing</returns>

    public UserAppEntityListing GetIntegrationsUserapps(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, string appHost = null)
    {
        ApiResponse<UserAppEntityListing> localVarResponse = GetIntegrationsUserappsWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, appHost);
        return localVarResponse.Data;
    }

    /// <summary>
    /// List permitted user app integrations for the logged in user 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="appHost">The type of UserApp to filter by (optional)</param>
    /// <returns>ApiResponse of UserAppEntityListing</returns>

    public ApiResponse<UserAppEntityListing> GetIntegrationsUserappsWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, string appHost = null)
    {

        var localVarPath = "/api/v2/integrations/userapps";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        if (appHost != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("appHost", Configuration.ApiClient.ParameterToString(appHost)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUserapps: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUserapps: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<UserAppEntityListing>(localVarStatusCode,
            localVarHeaders,
            (UserAppEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAppEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// List permitted user app integrations for the logged in user 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="appHost">The type of UserApp to filter by (optional)</param>
    /// <returns>Task of UserAppEntityListing</returns>

    public async Task<UserAppEntityListing> GetIntegrationsUserappsAsync(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, string appHost = null)
    {
        ApiResponse<UserAppEntityListing> localVarResponse = await GetIntegrationsUserappsAsyncWithHttpInfo(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, appHost);
        return localVarResponse.Data;

    }

    /// <summary>
    /// List permitted user app integrations for the logged in user 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="appHost">The type of UserApp to filter by (optional)</param>
    /// <returns>Task of ApiResponse (UserAppEntityListing)</returns>

    public async Task<ApiResponse<UserAppEntityListing>> GetIntegrationsUserappsAsyncWithHttpInfo(int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, string appHost = null)
    {

        var localVarPath = "/api/v2/integrations/userapps";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        if (appHost != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("appHost", Configuration.ApiClient.ParameterToString(appHost)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUserapps: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling GetIntegrationsUserapps: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<UserAppEntityListing>(localVarStatusCode,
            localVarHeaders,
            (UserAppEntityListing)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAppEntityListing)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Update an integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="body">Integration Update (optional)</param>
    /// <returns>Integration</returns>

    public Integration PatchIntegration(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, Integration body = null)
    {
        ApiResponse<Integration> localVarResponse = PatchIntegrationWithHttpInfo(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Update an integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="body">Integration Update (optional)</param>
    /// <returns>ApiResponse of Integration</returns>

    public ApiResponse<Integration> PatchIntegrationWithHttpInfo(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, Integration body = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->PatchIntegration");
        }

        var localVarPath = "/api/v2/integrations/{integrationId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegration: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegration: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Integration>(localVarStatusCode,
            localVarHeaders,
            (Integration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Integration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Update an integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="body">Integration Update (optional)</param>
    /// <returns>Task of Integration</returns>

    public async Task<Integration> PatchIntegrationAsync(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, Integration body = null)
    {
        ApiResponse<Integration> localVarResponse = await PatchIntegrationAsyncWithHttpInfo(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Update an integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="pageSize">The total page size requested (optional, default to 25)</param>
    /// <param name="pageNumber">The page number requested (optional, default to 1)</param>
    /// <param name="sortBy">variable name requested to sort by (optional)</param>
    /// <param name="expand">variable name requested by expand list (optional)</param>
    /// <param name="nextPage">next page token (optional)</param>
    /// <param name="previousPage">Previous page token (optional)</param>
    /// <param name="body">Integration Update (optional)</param>
    /// <returns>Task of ApiResponse (Integration)</returns>

    public async Task<ApiResponse<Integration>> PatchIntegrationAsyncWithHttpInfo(string integrationId, int? pageSize = null, int? pageNumber = null, string sortBy = null, List<string> expand = null, string nextPage = null, string previousPage = null, Integration body = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->PatchIntegration");
        }

        var localVarPath = "/api/v2/integrations/{integrationId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params
        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (sortBy != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("sortBy", Configuration.ApiClient.ParameterToString(sortBy)));
        }

        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        if (nextPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("nextPage", Configuration.ApiClient.ParameterToString(nextPage)));
        }

        if (previousPage != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("previousPage", Configuration.ApiClient.ParameterToString(previousPage)));
        }

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegration: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegration: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Integration>(localVarStatusCode,
            localVarHeaders,
            (Integration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Integration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Patch an Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Models.Action</returns>

    public Models.Action PatchIntegrationsAction(string actionId, UpdateActionInput body)
    {
        ApiResponse<Models.Action> localVarResponse = PatchIntegrationsActionWithHttpInfo(actionId, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Patch an Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>ApiResponse of Models.Action</returns>

    public ApiResponse<Models.Action> PatchIntegrationsActionWithHttpInfo(string actionId, UpdateActionInput body)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PatchIntegrationsAction");
        }
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PatchIntegrationsAction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegrationsAction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegrationsAction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Patch an Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Task of Models.Action</returns>

    public async Task<Models.Action> PatchIntegrationsActionAsync(string actionId, UpdateActionInput body)
    {
        ApiResponse<Models.Action> localVarResponse = await PatchIntegrationsActionAsyncWithHttpInfo(actionId, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Patch an Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    public async Task<ApiResponse<Models.Action>> PatchIntegrationsActionAsyncWithHttpInfo(string actionId, UpdateActionInput body)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PatchIntegrationsAction");
        }

        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PatchIntegrationsAction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegrationsAction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegrationsAction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Update an existing Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action Draft.</param>
    /// <returns>Models.Action</returns>

    public Models.Action PatchIntegrationsActionDraft(string actionId, UpdateDraftInput body)
    {
        ApiResponse<Models.Action> localVarResponse = PatchIntegrationsActionDraftWithHttpInfo(actionId, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Update an existing Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action Draft.</param>
    /// <returns>ApiResponse of Models.Action</returns>

    public ApiResponse<Models.Action> PatchIntegrationsActionDraftWithHttpInfo(string actionId, UpdateDraftInput body)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PatchIntegrationsActionDraft");
        }
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PatchIntegrationsActionDraft");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegrationsActionDraft: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegrationsActionDraft: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Update an existing Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action Draft.</param>
    /// <returns>Task of Models.Action</returns>

    public async Task<Models.Action> PatchIntegrationsActionDraftAsync(string actionId, UpdateDraftInput body)
    {
        ApiResponse<Models.Action> localVarResponse = await PatchIntegrationsActionDraftAsyncWithHttpInfo(actionId, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Update an existing Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action Draft.</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    public async Task<ApiResponse<Models.Action>> PatchIntegrationsActionDraftAsyncWithHttpInfo(string actionId, UpdateDraftInput body)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PatchIntegrationsActionDraft");
        }

        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PatchIntegrationsActionDraft");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Patch, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegrationsActionDraft: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PatchIntegrationsActionDraft: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Create an integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Integration (optional)</param>
    /// <returns>Integration</returns>

    public Integration PostIntegrations(CreateIntegrationRequest body = null)
    {
        ApiResponse<Integration> localVarResponse = PostIntegrationsWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Create an integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Integration (optional)</param>
    /// <returns>ApiResponse of Integration</returns>

    public ApiResponse<Integration> PostIntegrationsWithHttpInfo(CreateIntegrationRequest body = null)
    {

        var localVarPath = "/api/v2/integrations";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Integration>(localVarStatusCode,
            localVarHeaders,
            (Integration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Integration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Create an integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Integration (optional)</param>
    /// <returns>Task of Integration</returns>

    public async Task<Integration> PostIntegrationsAsync(CreateIntegrationRequest body = null)
    {
        ApiResponse<Integration> localVarResponse = await PostIntegrationsAsyncWithHttpInfo(body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Create an integration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Integration (optional)</param>
    /// <returns>Task of ApiResponse (Integration)</returns>

    public async Task<ApiResponse<Integration>> PostIntegrationsAsyncWithHttpInfo(CreateIntegrationRequest body = null)
    {

        var localVarPath = "/api/v2/integrations";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrations: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrations: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Integration>(localVarStatusCode,
            localVarHeaders,
            (Integration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Integration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Create a new Draft from existing Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Models.Action</returns>

    public Models.Action PostIntegrationsActionDraft(string actionId)
    {
        ApiResponse<Models.Action> localVarResponse = PostIntegrationsActionDraftWithHttpInfo(actionId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Create a new Draft from existing Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>ApiResponse of Models.Action</returns>

    public ApiResponse<Models.Action> PostIntegrationsActionDraftWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionDraft");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraft: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraft: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Create a new Draft from existing Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of Models.Action</returns>

    public async Task<Models.Action> PostIntegrationsActionDraftAsync(string actionId)
    {
        ApiResponse<Models.Action> localVarResponse = await PostIntegrationsActionDraftAsyncWithHttpInfo(actionId);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Create a new Draft from existing Action 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    public async Task<ApiResponse<Models.Action>> PostIntegrationsActionDraftAsyncWithHttpInfo(string actionId)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionDraft");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraft: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraft: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Create upload presigned URL for draft function package file. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to request URL upload.</param>
    /// <returns>FunctionUploadResponse</returns>

    public FunctionUploadResponse PostIntegrationsActionDraftFunctionUpload(string actionId, FunctionUploadRequest body)
    {
        ApiResponse<FunctionUploadResponse> localVarResponse = PostIntegrationsActionDraftFunctionUploadWithHttpInfo(actionId, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Create upload presigned URL for draft function package file. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to request URL upload.</param>
    /// <returns>ApiResponse of FunctionUploadResponse</returns>

    public ApiResponse<FunctionUploadResponse> PostIntegrationsActionDraftFunctionUploadWithHttpInfo(string actionId, FunctionUploadRequest body)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionDraftFunctionUpload");
        }
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionDraftFunctionUpload");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/function/upload";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftFunctionUpload: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftFunctionUpload: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<FunctionUploadResponse>(localVarStatusCode,
            localVarHeaders,
            (FunctionUploadResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunctionUploadResponse)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Create upload presigned URL for draft function package file. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to request URL upload.</param>
    /// <returns>Task of FunctionUploadResponse</returns>

    public async Task<FunctionUploadResponse> PostIntegrationsActionDraftFunctionUploadAsync(string actionId, FunctionUploadRequest body)
    {
        ApiResponse<FunctionUploadResponse> localVarResponse = await PostIntegrationsActionDraftFunctionUploadAsyncWithHttpInfo(actionId, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Create upload presigned URL for draft function package file. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to request URL upload.</param>
    /// <returns>Task of ApiResponse (FunctionUploadResponse)</returns>

    public async Task<ApiResponse<FunctionUploadResponse>> PostIntegrationsActionDraftFunctionUploadAsyncWithHttpInfo(string actionId, FunctionUploadRequest body)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionDraftFunctionUpload");
        }

        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionDraftFunctionUpload");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/function/upload";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftFunctionUpload: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftFunctionUpload: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<FunctionUploadResponse>(localVarStatusCode,
            localVarHeaders,
            (FunctionUploadResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunctionUploadResponse)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Publish a Draft and make it the active Action configuration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Models.Action</returns>

    public Models.Action PostIntegrationsActionDraftPublish(string actionId, PublishDraftInput body)
    {
        ApiResponse<Models.Action> localVarResponse = PostIntegrationsActionDraftPublishWithHttpInfo(actionId, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Publish a Draft and make it the active Action configuration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>ApiResponse of Models.Action</returns>

    public ApiResponse<Models.Action> PostIntegrationsActionDraftPublishWithHttpInfo(string actionId, PublishDraftInput body)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionDraftPublish");
        }
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionDraftPublish");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/publish";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftPublish: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftPublish: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Publish a Draft and make it the active Action configuration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Task of Models.Action</returns>

    public async Task<Models.Action> PostIntegrationsActionDraftPublishAsync(string actionId, PublishDraftInput body)
    {
        ApiResponse<Models.Action> localVarResponse = await PostIntegrationsActionDraftPublishAsyncWithHttpInfo(actionId, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Publish a Draft and make it the active Action configuration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to patch the Action.</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    public async Task<ApiResponse<Models.Action>> PostIntegrationsActionDraftPublishAsyncWithHttpInfo(string actionId, PublishDraftInput body)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionDraftPublish");
        }

        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionDraftPublish");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/publish";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftPublish: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftPublish: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>TestExecutionResult</returns>

    public TestExecutionResult PostIntegrationsActionDraftTest(string actionId, object body, bool? flatten = null)
    {
        ApiResponse<TestExecutionResult> localVarResponse = PostIntegrationsActionDraftTestWithHttpInfo(actionId, body, flatten);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>ApiResponse of TestExecutionResult</returns>

    public ApiResponse<TestExecutionResult> PostIntegrationsActionDraftTestWithHttpInfo(string actionId, object body, bool? flatten = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionDraftTest");
        }
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionDraftTest");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/test";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params
        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftTest: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftTest: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TestExecutionResult>(localVarStatusCode,
            localVarHeaders,
            (TestExecutionResult)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestExecutionResult)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of TestExecutionResult</returns>

    public async Task<TestExecutionResult> PostIntegrationsActionDraftTestAsync(string actionId, object body, bool? flatten = null)
    {
        ApiResponse<TestExecutionResult> localVarResponse = await PostIntegrationsActionDraftTestAsyncWithHttpInfo(actionId, body, flatten);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (TestExecutionResult)</returns>

    public async Task<ApiResponse<TestExecutionResult>> PostIntegrationsActionDraftTestAsyncWithHttpInfo(string actionId, object body, bool? flatten = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionDraftTest");
        }

        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionDraftTest");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/test";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params
        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftTest: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionDraftTest: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TestExecutionResult>(localVarStatusCode,
            localVarHeaders,
            (TestExecutionResult)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestExecutionResult)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Object</returns>

    public object PostIntegrationsActionExecute(string actionId, object body, bool? flatten = null)
    {
        ApiResponse<object> localVarResponse = PostIntegrationsActionExecuteWithHttpInfo(actionId, body, flatten);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>ApiResponse of Object</returns>

    public ApiResponse<object> PostIntegrationsActionExecuteWithHttpInfo(string actionId, object body, bool? flatten = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionExecute");
        }
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionExecute");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/execute";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params
        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionExecute: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionExecute: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            (object)Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of Object</returns>

    public async Task<object> PostIntegrationsActionExecuteAsync(string actionId, object body, bool? flatten = null)
    {
        ApiResponse<object> localVarResponse = await PostIntegrationsActionExecuteAsyncWithHttpInfo(actionId, body, flatten);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (Object)</returns>

    public async Task<ApiResponse<object>> PostIntegrationsActionExecuteAsyncWithHttpInfo(string actionId, object body, bool? flatten = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionExecute");
        }

        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionExecute");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/execute";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params
        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionExecute: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionExecute: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            (object)Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>TestExecutionResult</returns>

    public TestExecutionResult PostIntegrationsActionTest(string actionId, object body, bool? flatten = null)
    {
        ApiResponse<TestExecutionResult> localVarResponse = PostIntegrationsActionTestWithHttpInfo(actionId, body, flatten);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>ApiResponse of TestExecutionResult</returns>

    public ApiResponse<TestExecutionResult> PostIntegrationsActionTestWithHttpInfo(string actionId, object body, bool? flatten = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionTest");
        }
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionTest");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/test";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params
        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionTest: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionTest: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TestExecutionResult>(localVarStatusCode,
            localVarHeaders,
            (TestExecutionResult)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestExecutionResult)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of TestExecutionResult</returns>

    public async Task<TestExecutionResult> PostIntegrationsActionTestAsync(string actionId, object body, bool? flatten = null)
    {
        ApiResponse<TestExecutionResult> localVarResponse = await PostIntegrationsActionTestAsyncWithHttpInfo(actionId, body, flatten);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Map of parameters used for variable substitution.</param>
    /// <param name="flatten">Indicates the response should be reformatted, based on Architect&#39;s flattening format. (optional, default to false)</param>
    /// <returns>Task of ApiResponse (TestExecutionResult)</returns>

    public async Task<ApiResponse<TestExecutionResult>> PostIntegrationsActionTestAsyncWithHttpInfo(string actionId, object body, bool? flatten = null)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PostIntegrationsActionTest");
        }

        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionTest");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/test";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params
        if (flatten != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("flatten", Configuration.ApiClient.ParameterToString(flatten)));
        }

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionTest: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionTest: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TestExecutionResult>(localVarStatusCode,
            localVarHeaders,
            (TestExecutionResult)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestExecutionResult)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Create a new Action. Not supported for &#39;Function Integration&#39; actions. Function integrations must be created as drafts to allow managing of uploading required ZIP function package before they may be used as a published action. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action.</param>
    /// <returns>Models.Action</returns>

    public Models.Action PostIntegrationsActions(PostActionInput body)
    {
        ApiResponse<Models.Action> localVarResponse = PostIntegrationsActionsWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Create a new Action. Not supported for &#39;Function Integration&#39; actions. Function integrations must be created as drafts to allow managing of uploading required ZIP function package before they may be used as a published action. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action.</param>
    /// <returns>ApiResponse of Models.Action</returns>

    public ApiResponse<Models.Action> PostIntegrationsActionsWithHttpInfo(PostActionInput body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActions");
        }

        var localVarPath = "/api/v2/integrations/actions";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Create a new Action. Not supported for &#39;Function Integration&#39; actions. Function integrations must be created as drafts to allow managing of uploading required ZIP function package before they may be used as a published action. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action.</param>
    /// <returns>Task of Models.Action</returns>

    public async Task<Models.Action> PostIntegrationsActionsAsync(PostActionInput body)
    {
        ApiResponse<Models.Action> localVarResponse = await PostIntegrationsActionsAsyncWithHttpInfo(body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Create a new Action. Not supported for &#39;Function Integration&#39; actions. Function integrations must be created as drafts to allow managing of uploading required ZIP function package before they may be used as a published action. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action.</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    public async Task<ApiResponse<Models.Action>> PostIntegrationsActionsAsyncWithHttpInfo(PostActionInput body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActions");
        }

        var localVarPath = "/api/v2/integrations/actions";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActions: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActions: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Create a new Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action Draft.</param>
    /// <returns>Models.Action</returns>

    public Models.Action PostIntegrationsActionsDrafts(PostActionInput body)
    {
        ApiResponse<Models.Action> localVarResponse = PostIntegrationsActionsDraftsWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Create a new Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action Draft.</param>
    /// <returns>ApiResponse of Models.Action</returns>

    public ApiResponse<Models.Action> PostIntegrationsActionsDraftsWithHttpInfo(PostActionInput body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionsDrafts");
        }

        var localVarPath = "/api/v2/integrations/actions/drafts";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionsDrafts: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionsDrafts: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Create a new Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action Draft.</param>
    /// <returns>Task of Models.Action</returns>

    public async Task<Models.Action> PostIntegrationsActionsDraftsAsync(PostActionInput body)
    {
        ApiResponse<Models.Action> localVarResponse = await PostIntegrationsActionsDraftsAsyncWithHttpInfo(body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Create a new Draft 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Input used to create Action Draft.</param>
    /// <returns>Task of ApiResponse (Models.Action)</returns>

    public async Task<ApiResponse<Models.Action>> PostIntegrationsActionsDraftsAsyncWithHttpInfo(PostActionInput body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsActionsDrafts");
        }

        var localVarPath = "/api/v2/integrations/actions/drafts";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionsDrafts: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsActionsDrafts: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<Models.Action>(localVarStatusCode,
            localVarHeaders,
            (Models.Action)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Models.Action)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Create a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Credential (optional)</param>
    /// <returns>CredentialInfo</returns>

    public CredentialInfo PostIntegrationsCredentials(Credential body = null)
    {
        ApiResponse<CredentialInfo> localVarResponse = PostIntegrationsCredentialsWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Create a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Credential (optional)</param>
    /// <returns>ApiResponse of CredentialInfo</returns>

    public ApiResponse<CredentialInfo> PostIntegrationsCredentialsWithHttpInfo(Credential body = null)
    {

        var localVarPath = "/api/v2/integrations/credentials";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsCredentials: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsCredentials: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<CredentialInfo>(localVarStatusCode,
            localVarHeaders,
            (CredentialInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialInfo)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Create a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Credential (optional)</param>
    /// <returns>Task of CredentialInfo</returns>

    public async Task<CredentialInfo> PostIntegrationsCredentialsAsync(Credential body = null)
    {
        ApiResponse<CredentialInfo> localVarResponse = await PostIntegrationsCredentialsAsyncWithHttpInfo(body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Create a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Credential (optional)</param>
    /// <returns>Task of ApiResponse (CredentialInfo)</returns>

    public async Task<ApiResponse<CredentialInfo>> PostIntegrationsCredentialsAsyncWithHttpInfo(Credential body = null)
    {

        var localVarPath = "/api/v2/integrations/credentials";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsCredentials: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsCredentials: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<CredentialInfo>(localVarStatusCode,
            localVarHeaders,
            (CredentialInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialInfo)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a Nuance bot in the specified Integration asynchronously 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="body">targetChannel (optional)</param>
    /// <returns>AsyncJob</returns>

    public AsyncJob PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs(string nuanceIntegrationId, string botId, List<string> expand = null, string body = null)
    {
        ApiResponse<AsyncJob> localVarResponse = PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobsWithHttpInfo(nuanceIntegrationId, botId, expand, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a Nuance bot in the specified Integration asynchronously 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="body">targetChannel (optional)</param>
    /// <returns>ApiResponse of AsyncJob</returns>

    public ApiResponse<AsyncJob> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobsWithHttpInfo(string nuanceIntegrationId, string botId, List<string> expand = null, string body = null)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs");
        }
        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AsyncJob>(localVarStatusCode,
            localVarHeaders,
            (AsyncJob)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncJob)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a Nuance bot in the specified Integration asynchronously 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="body">targetChannel (optional)</param>
    /// <returns>Task of AsyncJob</returns>

    public async Task<AsyncJob> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobsAsync(string nuanceIntegrationId, string botId, List<string> expand = null, string body = null)
    {
        ApiResponse<AsyncJob> localVarResponse = await PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobsAsyncWithHttpInfo(nuanceIntegrationId, botId, expand, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a Nuance bot in the specified Integration asynchronously 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="botId">The Nuance bot ID</param>
    /// <param name="expand">expand (optional)</param>
    /// <param name="body">targetChannel (optional)</param>
    /// <returns>Task of ApiResponse (AsyncJob)</returns>

    public async Task<ApiResponse<AsyncJob>> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobsAsyncWithHttpInfo(string nuanceIntegrationId, string botId, List<string> expand = null, string body = null)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs");
        }

        // verify the required parameter 'botId' is set
        if (botId == null)
        {
            throw new ApiException(400, "Missing required parameter 'botId' when calling IntegrationsApi->PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/{botId}/jobs";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        if (botId != null)
        {
            localVarPathParams.Add("botId", Configuration.ApiClient.ParameterToString(botId));
        }

        // Query params
        if (expand != null)
        {
            expand.ForEach(obj => { localVarQueryParams.Add(new Tuple<string, string>("expand", Configuration.ApiClient.ParameterToString(obj))); });
        }

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AsyncJob>(localVarStatusCode,
            localVarHeaders,
            (AsyncJob)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncJob)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Get a list of Nuance bots in the specified Integration asynchronously 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>AsyncJob</returns>

    public AsyncJob PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null)
    {
        ApiResponse<AsyncJob> localVarResponse = PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobsWithHttpInfo(nuanceIntegrationId, pageNumber, pageSize, onlyRegisteredBots);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of Nuance bots in the specified Integration asynchronously 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>ApiResponse of AsyncJob</returns>

    public ApiResponse<AsyncJob> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobsWithHttpInfo(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (onlyRegisteredBots != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("onlyRegisteredBots", Configuration.ApiClient.ParameterToString(onlyRegisteredBots)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AsyncJob>(localVarStatusCode,
            localVarHeaders,
            (AsyncJob)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncJob)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Get a list of Nuance bots in the specified Integration asynchronously 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>Task of AsyncJob</returns>

    public async Task<AsyncJob> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobsAsync(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null)
    {
        ApiResponse<AsyncJob> localVarResponse = await PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobsAsyncWithHttpInfo(nuanceIntegrationId, pageNumber, pageSize, onlyRegisteredBots);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Get a list of Nuance bots in the specified Integration asynchronously 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="pageNumber">Page number (optional, default to 1)</param>
    /// <param name="pageSize">Page size (optional, default to 25)</param>
    /// <param name="onlyRegisteredBots">Limit bots to the ones configured for Genesys Cloud usage (optional, default to true)</param>
    /// <returns>Task of ApiResponse (AsyncJob)</returns>

    public async Task<ApiResponse<AsyncJob>> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobsAsyncWithHttpInfo(string nuanceIntegrationId, int? pageNumber = null, int? pageSize = null, bool? onlyRegisteredBots = null)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/jobs";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"
        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        // Query params
        if (pageNumber != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)));
        }

        if (pageSize != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("pageSize", Configuration.ApiClient.ParameterToString(pageSize)));
        }

        if (onlyRegisteredBots != null)
        {
            localVarQueryParams.Add(new Tuple<string, string>("onlyRegisteredBots", Configuration.ApiClient.ParameterToString(onlyRegisteredBots)));
        }

        // Header params

        // Form params

        // Body param


        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsJobs: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<AsyncJob>(localVarStatusCode,
            localVarHeaders,
            (AsyncJob)Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncJob)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Try out a single credential for a Nuance bot to know if the secret is correct 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns></returns>

    public void PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate(string nuanceIntegrationId, BotExecutionConfiguration settings)
    {
        PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidateWithHttpInfo(nuanceIntegrationId, settings);
    }

    /// <summary>
    /// Try out a single credential for a Nuance bot to know if the secret is correct 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>ApiResponse of Object(void)</returns>

    public ApiResponse<object> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidateWithHttpInfo(string nuanceIntegrationId, BotExecutionConfiguration settings)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate");
        }
        // verify the required parameter 'settings' is set
        if (settings == null)
        {
            throw new ApiException(400, "Missing required parameter 'settings' when calling IntegrationsApi->PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/launch/validate";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (settings != null && settings.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
        }
        else
        {
            localVarPostBody = settings; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Try out a single credential for a Nuance bot to know if the secret is correct 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>Task of void</returns>

    public async Task PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidateAsync(string nuanceIntegrationId, BotExecutionConfiguration settings)
    {
        await PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidateAsyncWithHttpInfo(nuanceIntegrationId, settings);

    }

    /// <summary>
    /// Try out a single credential for a Nuance bot to know if the secret is correct 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>Task of ApiResponse</returns>

    public async Task<ApiResponse<object>> PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidateAsyncWithHttpInfo(string nuanceIntegrationId, BotExecutionConfiguration settings)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate");
        }

        // verify the required parameter 'settings' is set
        if (settings == null)
        {
            throw new ApiException(400, "Missing required parameter 'settings' when calling IntegrationsApi->PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/launch/validate";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (settings != null && settings.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
        }
        else
        {
            localVarPostBody = settings; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchValidate: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Invoke Webhook 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tokenId">The token of the webhook to be invoked</param>
    /// <param name="body">Webhook Invocation Payload</param>
    /// <returns>WebhookInvocationResponse</returns>

    public WebhookInvocationResponse PostIntegrationsWebhookEvents(string tokenId, object body)
    {
        ApiResponse<WebhookInvocationResponse> localVarResponse = PostIntegrationsWebhookEventsWithHttpInfo(tokenId, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Invoke Webhook 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tokenId">The token of the webhook to be invoked</param>
    /// <param name="body">Webhook Invocation Payload</param>
    /// <returns>ApiResponse of WebhookInvocationResponse</returns>

    public ApiResponse<WebhookInvocationResponse> PostIntegrationsWebhookEventsWithHttpInfo(string tokenId, object body)
    {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null)
        {
            throw new ApiException(400, "Missing required parameter 'tokenId' when calling IntegrationsApi->PostIntegrationsWebhookEvents");
        }
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsWebhookEvents");
        }

        var localVarPath = "/api/v2/integrations/webhooks/{tokenId}/events";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (tokenId != null)
        {
            localVarPathParams.Add("tokenId", Configuration.ApiClient.ParameterToString(tokenId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsWebhookEvents: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsWebhookEvents: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<WebhookInvocationResponse>(localVarStatusCode,
            localVarHeaders,
            (WebhookInvocationResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookInvocationResponse)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Invoke Webhook 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tokenId">The token of the webhook to be invoked</param>
    /// <param name="body">Webhook Invocation Payload</param>
    /// <returns>Task of WebhookInvocationResponse</returns>

    public async Task<WebhookInvocationResponse> PostIntegrationsWebhookEventsAsync(string tokenId, object body)
    {
        ApiResponse<WebhookInvocationResponse> localVarResponse = await PostIntegrationsWebhookEventsAsyncWithHttpInfo(tokenId, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Invoke Webhook 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tokenId">The token of the webhook to be invoked</param>
    /// <param name="body">Webhook Invocation Payload</param>
    /// <returns>Task of ApiResponse (WebhookInvocationResponse)</returns>

    public async Task<ApiResponse<WebhookInvocationResponse>> PostIntegrationsWebhookEventsAsyncWithHttpInfo(string tokenId, object body)
    {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null)
        {
            throw new ApiException(400, "Missing required parameter 'tokenId' when calling IntegrationsApi->PostIntegrationsWebhookEvents");
        }

        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PostIntegrationsWebhookEvents");
        }

        var localVarPath = "/api/v2/integrations/webhooks/{tokenId}/events";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (tokenId != null)
        {
            localVarPathParams.Add("tokenId", Configuration.ApiClient.ParameterToString(tokenId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsWebhookEvents: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PostIntegrationsWebhookEvents: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<WebhookInvocationResponse>(localVarStatusCode,
            localVarHeaders,
            (WebhookInvocationResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookInvocationResponse)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Update integration configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="body">Integration Configuration (optional)</param>
    /// <returns>IntegrationConfiguration</returns>

    public IntegrationConfiguration PutIntegrationConfigCurrent(string integrationId, IntegrationConfiguration body = null)
    {
        ApiResponse<IntegrationConfiguration> localVarResponse = PutIntegrationConfigCurrentWithHttpInfo(integrationId, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Update integration configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="body">Integration Configuration (optional)</param>
    /// <returns>ApiResponse of IntegrationConfiguration</returns>

    public ApiResponse<IntegrationConfiguration> PutIntegrationConfigCurrentWithHttpInfo(string integrationId, IntegrationConfiguration body = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->PutIntegrationConfigCurrent");
        }

        var localVarPath = "/api/v2/integrations/{integrationId}/config/current";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationConfigCurrent: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationConfigCurrent: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<IntegrationConfiguration>(localVarStatusCode,
            localVarHeaders,
            (IntegrationConfiguration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationConfiguration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Update integration configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="body">Integration Configuration (optional)</param>
    /// <returns>Task of IntegrationConfiguration</returns>

    public async Task<IntegrationConfiguration> PutIntegrationConfigCurrentAsync(string integrationId, IntegrationConfiguration body = null)
    {
        ApiResponse<IntegrationConfiguration> localVarResponse = await PutIntegrationConfigCurrentAsyncWithHttpInfo(integrationId, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Update integration configuration. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">Integration Id</param>
    /// <param name="body">Integration Configuration (optional)</param>
    /// <returns>Task of ApiResponse (IntegrationConfiguration)</returns>

    public async Task<ApiResponse<IntegrationConfiguration>> PutIntegrationConfigCurrentAsyncWithHttpInfo(string integrationId, IntegrationConfiguration body = null)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->PutIntegrationConfigCurrent");
        }

        var localVarPath = "/api/v2/integrations/{integrationId}/config/current";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationConfigCurrent: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationConfigCurrent: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<IntegrationConfiguration>(localVarStatusCode,
            localVarHeaders,
            (IntegrationConfiguration)Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegrationConfiguration)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Update draft function settings. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to update function settings.</param>
    /// <returns>FunctionConfig</returns>

    public FunctionConfig PutIntegrationsActionDraftFunction(string actionId, Function body)
    {
        ApiResponse<FunctionConfig> localVarResponse = PutIntegrationsActionDraftFunctionWithHttpInfo(actionId, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Update draft function settings. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to update function settings.</param>
    /// <returns>ApiResponse of FunctionConfig</returns>

    public ApiResponse<FunctionConfig> PutIntegrationsActionDraftFunctionWithHttpInfo(string actionId, Function body)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PutIntegrationsActionDraftFunction");
        }
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PutIntegrationsActionDraftFunction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/function";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsActionDraftFunction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsActionDraftFunction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<FunctionConfig>(localVarStatusCode,
            localVarHeaders,
            (FunctionConfig)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunctionConfig)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Update draft function settings. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to update function settings.</param>
    /// <returns>Task of FunctionConfig</returns>

    public async Task<FunctionConfig> PutIntegrationsActionDraftFunctionAsync(string actionId, Function body)
    {
        ApiResponse<FunctionConfig> localVarResponse = await PutIntegrationsActionDraftFunctionAsyncWithHttpInfo(actionId, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Update draft function settings. 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="actionId">actionId</param>
    /// <param name="body">Input used to update function settings.</param>
    /// <returns>Task of ApiResponse (FunctionConfig)</returns>

    public async Task<ApiResponse<FunctionConfig>> PutIntegrationsActionDraftFunctionAsyncWithHttpInfo(string actionId, Function body)
    {
        // verify the required parameter 'actionId' is set
        if (actionId == null)
        {
            throw new ApiException(400, "Missing required parameter 'actionId' when calling IntegrationsApi->PutIntegrationsActionDraftFunction");
        }

        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PutIntegrationsActionDraftFunction");
        }

        var localVarPath = "/api/v2/integrations/actions/{actionId}/draft/function";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (actionId != null)
        {
            localVarPathParams.Add("actionId", Configuration.ApiClient.ParameterToString(actionId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsActionDraftFunction: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsActionDraftFunction: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<FunctionConfig>(localVarStatusCode,
            localVarHeaders,
            (FunctionConfig)Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunctionConfig)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Set a list of botConnector bots plus versions for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botList"></param>
    /// <returns></returns>

    public void PutIntegrationsBotconnectorIntegrationIdBots(string integrationId, BotList botList)
    {
        PutIntegrationsBotconnectorIntegrationIdBotsWithHttpInfo(integrationId, botList);
    }

    /// <summary>
    /// Set a list of botConnector bots plus versions for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botList"></param>
    /// <returns>ApiResponse of Object(void)</returns>

    public ApiResponse<object> PutIntegrationsBotconnectorIntegrationIdBotsWithHttpInfo(string integrationId, BotList botList)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->PutIntegrationsBotconnectorIntegrationIdBots");
        }
        // verify the required parameter 'botList' is set
        if (botList == null)
        {
            throw new ApiException(400, "Missing required parameter 'botList' when calling IntegrationsApi->PutIntegrationsBotconnectorIntegrationIdBots");
        }

        var localVarPath = "/api/v2/integrations/botconnector/{integrationId}/bots";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (botList != null && botList.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(botList); // http body (model) parameter
        }
        else
        {
            localVarPostBody = botList; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsBotconnectorIntegrationIdBots: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsBotconnectorIntegrationIdBots: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Set a list of botConnector bots plus versions for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botList"></param>
    /// <returns>Task of void</returns>

    public async Task PutIntegrationsBotconnectorIntegrationIdBotsAsync(string integrationId, BotList botList)
    {
        await PutIntegrationsBotconnectorIntegrationIdBotsAsyncWithHttpInfo(integrationId, botList);

    }

    /// <summary>
    /// Set a list of botConnector bots plus versions for this integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="integrationId">The integration ID for this group of bots</param>
    /// <param name="botList"></param>
    /// <returns>Task of ApiResponse</returns>

    public async Task<ApiResponse<object>> PutIntegrationsBotconnectorIntegrationIdBotsAsyncWithHttpInfo(string integrationId, BotList botList)
    {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'integrationId' when calling IntegrationsApi->PutIntegrationsBotconnectorIntegrationIdBots");
        }

        // verify the required parameter 'botList' is set
        if (botList == null)
        {
            throw new ApiException(400, "Missing required parameter 'botList' when calling IntegrationsApi->PutIntegrationsBotconnectorIntegrationIdBots");
        }

        var localVarPath = "/api/v2/integrations/botconnector/{integrationId}/bots";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (integrationId != null)
        {
            localVarPathParams.Add("integrationId", Configuration.ApiClient.ParameterToString(integrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (botList != null && botList.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(botList); // http body (model) parameter
        }
        else
        {
            localVarPostBody = botList; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsBotconnectorIntegrationIdBots: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsBotconnectorIntegrationIdBots: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Update a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <param name="body">Credential (optional)</param>
    /// <returns>CredentialInfo</returns>

    public CredentialInfo PutIntegrationsCredential(string credentialId, Credential body = null)
    {
        ApiResponse<CredentialInfo> localVarResponse = PutIntegrationsCredentialWithHttpInfo(credentialId, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Update a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <param name="body">Credential (optional)</param>
    /// <returns>ApiResponse of CredentialInfo</returns>

    public ApiResponse<CredentialInfo> PutIntegrationsCredentialWithHttpInfo(string credentialId, Credential body = null)
    {
        // verify the required parameter 'credentialId' is set
        if (credentialId == null)
        {
            throw new ApiException(400, "Missing required parameter 'credentialId' when calling IntegrationsApi->PutIntegrationsCredential");
        }

        var localVarPath = "/api/v2/integrations/credentials/{credentialId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (credentialId != null)
        {
            localVarPathParams.Add("credentialId", Configuration.ApiClient.ParameterToString(credentialId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsCredential: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsCredential: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<CredentialInfo>(localVarStatusCode,
            localVarHeaders,
            (CredentialInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialInfo)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Update a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <param name="body">Credential (optional)</param>
    /// <returns>Task of CredentialInfo</returns>

    public async Task<CredentialInfo> PutIntegrationsCredentialAsync(string credentialId, Credential body = null)
    {
        ApiResponse<CredentialInfo> localVarResponse = await PutIntegrationsCredentialAsyncWithHttpInfo(credentialId, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Update a set of credentials 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="credentialId">Credential ID</param>
    /// <param name="body">Credential (optional)</param>
    /// <returns>Task of ApiResponse (CredentialInfo)</returns>

    public async Task<ApiResponse<CredentialInfo>> PutIntegrationsCredentialAsyncWithHttpInfo(string credentialId, Credential body = null)
    {
        // verify the required parameter 'credentialId' is set
        if (credentialId == null)
        {
            throw new ApiException(400, "Missing required parameter 'credentialId' when calling IntegrationsApi->PutIntegrationsCredential");
        }

        var localVarPath = "/api/v2/integrations/credentials/{credentialId}";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (credentialId != null)
        {
            localVarPathParams.Add("credentialId", Configuration.ApiClient.ParameterToString(credentialId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsCredential: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsCredential: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<CredentialInfo>(localVarStatusCode,
            localVarHeaders,
            (CredentialInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialInfo)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns></returns>

    public void PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings(string nuanceIntegrationId, NuanceBotLaunchSettings settings)
    {
        PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettingsWithHttpInfo(nuanceIntegrationId, settings);
    }

    /// <summary>
    /// Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>ApiResponse of Object(void)</returns>

    public ApiResponse<object> PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettingsWithHttpInfo(string nuanceIntegrationId, NuanceBotLaunchSettings settings)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings");
        }
        // verify the required parameter 'settings' is set
        if (settings == null)
        {
            throw new ApiException(400, "Missing required parameter 'settings' when calling IntegrationsApi->PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/launch/settings";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (settings != null && settings.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
        }
        else
        {
            localVarPostBody = settings; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>Task of void</returns>

    public async Task PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettingsAsync(string nuanceIntegrationId, NuanceBotLaunchSettings settings)
    {
        await PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettingsAsyncWithHttpInfo(nuanceIntegrationId, settings);

    }

    /// <summary>
    /// Update the Nuance bot list for the specific bots made available to Genesys Cloud in the specified Integration 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="nuanceIntegrationId">The integration ID for this group of bots</param>
    /// <param name="settings"></param>
    /// <returns>Task of ApiResponse</returns>

    public async Task<ApiResponse<object>> PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettingsAsyncWithHttpInfo(string nuanceIntegrationId, NuanceBotLaunchSettings settings)
    {
        // verify the required parameter 'nuanceIntegrationId' is set
        if (nuanceIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'nuanceIntegrationId' when calling IntegrationsApi->PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings");
        }

        // verify the required parameter 'settings' is set
        if (settings == null)
        {
            throw new ApiException(400, "Missing required parameter 'settings' when calling IntegrationsApi->PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings");
        }

        var localVarPath = "/api/v2/integrations/speech/nuance/{nuanceIntegrationId}/bots/launch/settings";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (nuanceIntegrationId != null)
        {
            localVarPathParams.Add("nuanceIntegrationId", Configuration.ApiClient.ParameterToString(nuanceIntegrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (settings != null && settings.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(settings); // http body (model) parameter
        }
        else
        {
            localVarPostBody = settings; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsSpeechNuanceNuanceIntegrationIdBotsLaunchSettings: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<object>(localVarStatusCode,
            localVarHeaders,
            null,
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Update TTS settings for an org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Updated TtsSettings</param>
    /// <returns>TtsSettings</returns>

    public TtsSettings PutIntegrationsSpeechTtsSettings(TtsSettings body)
    {
        ApiResponse<TtsSettings> localVarResponse = PutIntegrationsSpeechTtsSettingsWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Update TTS settings for an org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Updated TtsSettings</param>
    /// <returns>ApiResponse of TtsSettings</returns>

    public ApiResponse<TtsSettings> PutIntegrationsSpeechTtsSettingsWithHttpInfo(TtsSettings body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PutIntegrationsSpeechTtsSettings");
        }

        var localVarPath = "/api/v2/integrations/speech/tts/settings";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsSpeechTtsSettings: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsSpeechTtsSettings: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsSettings>(localVarStatusCode,
            localVarHeaders,
            (TtsSettings)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsSettings)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Update TTS settings for an org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Updated TtsSettings</param>
    /// <returns>Task of TtsSettings</returns>

    public async Task<TtsSettings> PutIntegrationsSpeechTtsSettingsAsync(TtsSettings body)
    {
        ApiResponse<TtsSettings> localVarResponse = await PutIntegrationsSpeechTtsSettingsAsyncWithHttpInfo(body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Update TTS settings for an org 
    /// 
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Updated TtsSettings</param>
    /// <returns>Task of ApiResponse (TtsSettings)</returns>

    public async Task<ApiResponse<TtsSettings>> PutIntegrationsSpeechTtsSettingsAsyncWithHttpInfo(TtsSettings body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PutIntegrationsSpeechTtsSettings");
        }

        var localVarPath = "/api/v2/integrations/speech/tts/settings";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsSpeechTtsSettings: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsSpeechTtsSettings: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<TtsSettings>(localVarStatusCode,
            localVarHeaders,
            (TtsSettings)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TtsSettings)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



    /// <summary>
    /// Bulk integration presence ingestion 
    /// This endpoint accepts bulk presence updates from a 3rd-party presence integration and maps the 3rd-party user to a Genesys Cloud user via the matching email address. The 3rd-party presence value will be mapped to a Genesys Cloud organization presence definition value.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">UC Integration ID</param>
    /// <param name="body">List of User presences</param>
    /// <returns>string</returns>

    public string PutIntegrationsUnifiedcommunicationThirdpartypresences(string ucIntegrationId, List<UCThirdPartyPresence> body)
    {
        ApiResponse<string> localVarResponse = PutIntegrationsUnifiedcommunicationThirdpartypresencesWithHttpInfo(ucIntegrationId, body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Bulk integration presence ingestion 
    /// This endpoint accepts bulk presence updates from a 3rd-party presence integration and maps the 3rd-party user to a Genesys Cloud user via the matching email address. The 3rd-party presence value will be mapped to a Genesys Cloud organization presence definition value.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">UC Integration ID</param>
    /// <param name="body">List of User presences</param>
    /// <returns>ApiResponse of string</returns>

    public ApiResponse<string> PutIntegrationsUnifiedcommunicationThirdpartypresencesWithHttpInfo(string ucIntegrationId, List<UCThirdPartyPresence> body)
    {
        // verify the required parameter 'ucIntegrationId' is set
        if (ucIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'ucIntegrationId' when calling IntegrationsApi->PutIntegrationsUnifiedcommunicationThirdpartypresences");
        }
        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PutIntegrationsUnifiedcommunicationThirdpartypresences");
        }

        var localVarPath = "/api/v2/integrations/unifiedcommunications/{ucIntegrationId}/thirdpartypresences";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (ucIntegrationId != null)
        {
            localVarPathParams.Add("ucIntegrationId", Configuration.ApiClient.ParameterToString(ucIntegrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsUnifiedcommunicationThirdpartypresences: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsUnifiedcommunicationThirdpartypresences: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<string>(localVarStatusCode,
            localVarHeaders,
            (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }


    /// <summary>
    /// Bulk integration presence ingestion 
    /// This endpoint accepts bulk presence updates from a 3rd-party presence integration and maps the 3rd-party user to a Genesys Cloud user via the matching email address. The 3rd-party presence value will be mapped to a Genesys Cloud organization presence definition value.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">UC Integration ID</param>
    /// <param name="body">List of User presences</param>
    /// <returns>Task of string</returns>

    public async Task<string> PutIntegrationsUnifiedcommunicationThirdpartypresencesAsync(string ucIntegrationId, List<UCThirdPartyPresence> body)
    {
        ApiResponse<string> localVarResponse = await PutIntegrationsUnifiedcommunicationThirdpartypresencesAsyncWithHttpInfo(ucIntegrationId, body);
        return localVarResponse.Data;

    }

    /// <summary>
    /// Bulk integration presence ingestion 
    /// This endpoint accepts bulk presence updates from a 3rd-party presence integration and maps the 3rd-party user to a Genesys Cloud user via the matching email address. The 3rd-party presence value will be mapped to a Genesys Cloud organization presence definition value.
    /// </summary>
    /// <exception cref="PureCloudPlatform.Client.V2.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="ucIntegrationId">UC Integration ID</param>
    /// <param name="body">List of User presences</param>
    /// <returns>Task of ApiResponse (string)</returns>

    public async Task<ApiResponse<string>> PutIntegrationsUnifiedcommunicationThirdpartypresencesAsyncWithHttpInfo(string ucIntegrationId, List<UCThirdPartyPresence> body)
    {
        // verify the required parameter 'ucIntegrationId' is set
        if (ucIntegrationId == null)
        {
            throw new ApiException(400, "Missing required parameter 'ucIntegrationId' when calling IntegrationsApi->PutIntegrationsUnifiedcommunicationThirdpartypresences");
        }

        // verify the required parameter 'body' is set
        if (body == null)
        {
            throw new ApiException(400, "Missing required parameter 'body' when calling IntegrationsApi->PutIntegrationsUnifiedcommunicationThirdpartypresences");
        }

        var localVarPath = "/api/v2/integrations/unifiedcommunications/{ucIntegrationId}/thirdpartypresences";
        var localVarPathParams = new Dictionary<string, string>();
        var localVarQueryParams = new List<Tuple<string, string>>();
        var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
        var localVarFormParams = new Dictionary<string, string>();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] {
            "application/json"

        };
        string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] {

            "application/json"


        };
        string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
        if (localVarHttpHeaderAccept != null)
        {
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
        }

        // set "format" to json by default
        // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
        localVarPathParams.Add("format", "json");

        // Path params
        if (ucIntegrationId != null)
        {
            localVarPathParams.Add("ucIntegrationId", Configuration.ApiClient.ParameterToString(ucIntegrationId));
        }

        // Query params

        // Header params

        // Form params

        // Body param
        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }



        // authentication (PureCloudEnvironment OAuth) required
        // oauth required
        if (!string.IsNullOrEmpty(Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
            Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        Dictionary<string, string> localVarHeaders = localVarResponse.Headers?
                                                         .GroupBy(header => header?.Name)
                                                         .Select(header => new
                                                         {
                                                             Name = header?.FirstOrDefault()?.Name,
                                                             Value = header.Select(x => x?.Value)?.ToList()
                                                         }).ToDictionary(header => header?.Name?.ToString(), header => string.Join(", ", header?.Value?.ToArray()))
                                                    ?? new Dictionary<string, string>();

        if (localVarStatusCode >= 400)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsUnifiedcommunicationThirdpartypresences: " + localVarResponse.Content, localVarResponse.Content, localVarHeaders);
        }
        else if (localVarStatusCode == 0)
        {
            throw new ApiException(localVarStatusCode, "Error calling PutIntegrationsUnifiedcommunicationThirdpartypresences: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);
        }

        return new ApiResponse<string>(localVarStatusCode,
            localVarHeaders,
            (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)),
            localVarResponse.Content,
            localVarResponse.StatusDescription);
    }



}
