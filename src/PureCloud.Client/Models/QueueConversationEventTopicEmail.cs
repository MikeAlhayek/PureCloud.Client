using System.Text;
using System.Text.Json.Serialization;

namespace PureCloud.Client.Models;

public sealed class QueueConversationEventTopicEmail
{
    /// <summary>
    /// Gets or Sets State
    /// </summary>
    public QueueConversationEventTopicEmailState2Enum? State { get; set; }

    /// <summary>
    /// Gets or Sets InitialState
    /// </summary>
    public QueueConversationEventTopicEmailInitialStateEnum? InitialState { get; set; }

    /// <summary>
    /// System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
    /// </summary>
    /// <value>System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.</value>
    public QueueConversationEventTopicEmailDisconnectTypeEnum? DisconnectType { get; set; }

    /// <summary>
    /// Whether an email is inbound or outbound.
    /// </summary>
    /// <value>Whether an email is inbound or outbound.</value>
    public QueueConversationEventTopicEmailDirectionEnum? Direction { get; set; }

    /// <summary>
    /// A globally unique identifier for this communication.
    /// </summary>
    /// <value>A globally unique identifier for this communication.</value>
    public string Id { get; set; }

    /// <summary>
    /// True if this call is held and the person on this side hears silence.
    /// </summary>
    /// <value>True if this call is held and the person on this side hears silence.</value>
    public bool? Held { get; set; }

    /// <summary>
    /// Indicates that the email was auto-generated like an Out of Office reply.
    /// </summary>
    /// <value>Indicates that the email was auto-generated like an Out of Office reply.</value>
    public bool? AutoGenerated { get; set; }

    /// <summary>
    /// The subject for the initial email that started this conversation.
    /// </summary>
    /// <value>The subject for the initial email that started this conversation.</value>
    public string Subject { get; set; }

    /// <summary>
    /// The source provider of the email.
    /// </summary>
    /// <value>The source provider of the email.</value>
    public string Provider { get; set; }

    /// <summary>
    /// The UUID of the script to use.
    /// </summary>
    /// <value>The UUID of the script to use.</value>
    public string ScriptId { get; set; }

    /// <summary>
    /// The id of the peer communication corresponding to a matching leg for this communication.
    /// </summary>
    /// <value>The id of the peer communication corresponding to a matching leg for this communication.</value>
    public string PeerId { get; set; }

    /// <summary>
    /// The number of email messages sent by this participant.
    /// </summary>
    /// <value>The number of email messages sent by this participant.</value>
    public long? MessagesSent { get; set; }

    /// <summary>
    /// Detailed information about an error response.
    /// </summary>
    /// <value>Detailed information about an error response.</value>
    public QueueConversationEventTopicErrorDetails ErrorInfo { get; set; }

    /// <summary>
    /// The timestamp the email was placed on hold in the cloud clock if the email is currently on hold.
    /// </summary>
    /// <value>The timestamp the email was placed on hold in the cloud clock if the email is currently on hold.</value>
    public DateTime? StartHoldTime { get; set; }

    /// <summary>
    /// The timestamp when this communication was connected in the cloud clock.
    /// </summary>
    /// <value>The timestamp when this communication was connected in the cloud clock.</value>
    public DateTime? ConnectedTime { get; set; }

    /// <summary>
    /// The timestamp when this communication disconnected from the conversation in the provider clock.
    /// </summary>
    /// <value>The timestamp when this communication disconnected from the conversation in the provider clock.</value>
    public DateTime? DisconnectedTime { get; set; }

    /// <summary>
    /// A globally unique identifier for the stored content of this communication.
    /// </summary>
    /// <value>A globally unique identifier for the stored content of this communication.</value>
    public string MessageId { get; set; }

    /// <summary>
    /// A list of uploaded attachments on the email draft.
    /// </summary>
    /// <value>A list of uploaded attachments on the email draft.</value>
    public IEnumerable<QueueConversationEventTopicAttachment> DraftAttachments { get; set; }

    /// <summary>
    /// Indicates if the inbound email was marked as spam.
    /// </summary>
    /// <value>Indicates if the inbound email was marked as spam.</value>
    public bool? Spam { get; set; }

    /// <summary>
    /// Call wrap up or disposition data.
    /// </summary>
    /// <value>Call wrap up or disposition data.</value>
    public QueueConversationEventTopicWrapup Wrapup { get; set; }

    /// <summary>
    /// A communication&#39;s after-call work data.
    /// </summary>
    /// <value>A communication&#39;s after-call work data.</value>
    public QueueConversationEventTopicAfterCallWork AfterCallWork { get; set; }

    /// <summary>
    /// Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested.
    /// </summary>
    /// <value>Indicates if after-call is required for a communication. Only used when the ACW Setting is Agent Requested.</value>
    public bool? AfterCallWorkRequired { get; set; }

    /// <summary>
    /// Represents the queue setting for this media.
    /// </summary>
    /// <value>Represents the queue setting for this media.</value>
    public QueueConversationEventTopicQueueMediaSettings QueueMediaSettings { get; set; }

    /// <summary>
    /// The time when a parked email should resume.
    /// </summary>
    /// <value>The time when a parked email should resume.</value>
    public DateTime? ResumeTime { get; set; }

    /// <summary>
    /// The time when an  parked email was parked.
    /// </summary>
    /// <value>The time when an  parked email was parked.</value>
    public DateTime? ParkTime { get; set; }
}
