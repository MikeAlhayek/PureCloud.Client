using System.Text;
using System.Text.Json.Serialization;

namespace PureCloud.Client.Models;

/// <summary>
/// Browser
/// </summary>

public partial class Browser : IEquatable<Browser>
{

    /// <summary>
    /// Initializes a new instance of the <see cref="Browser" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected Browser() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Browser" /> class.
    /// </summary>
    /// <param name="Family">Browser family (e.g. Chrome, Safari, Firefox). (required).</param>
    /// <param name="Version">Browser version (e.g. 68.0.3440.84). (required).</param>
    /// <param name="Lang">Language the browser is set to. Must conform to BCP 47..</param>
    /// <param name="Fingerprint">Fingerprint generated by looking at the individual browser features..</param>
    /// <param name="IsMobile">(Deprecated, use Device.isMobile instead) Flag that is true for mobile devices..</param>
    /// <param name="ViewHeight">Browser&#39;s viewport height..</param>
    /// <param name="ViewWidth">Browser&#39;s viewport width..</param>
    /// <param name="FeaturesFlash">Whether Flash is installed. (required).</param>
    /// <param name="FeaturesJava">Whether Java is installed. (required).</param>
    /// <param name="FeaturesPdf">Whether the browser recognizes PDFs. (required).</param>
    /// <param name="FeaturesWebrtc">Whether WebRTC is supported. (required).</param>
    public Browser(string Family = null, string Version = null, string Lang = null, string Fingerprint = null, bool? IsMobile = null, int? ViewHeight = null, int? ViewWidth = null, bool? FeaturesFlash = null, bool? FeaturesJava = null, bool? FeaturesPdf = null, bool? FeaturesWebrtc = null)
    {
        this.Family = Family;
        this.Version = Version;
        this.Lang = Lang;
        this.Fingerprint = Fingerprint;
        this.IsMobile = IsMobile;
        this.ViewHeight = ViewHeight;
        this.ViewWidth = ViewWidth;
        this.FeaturesFlash = FeaturesFlash;
        this.FeaturesJava = FeaturesJava;
        this.FeaturesPdf = FeaturesPdf;
        this.FeaturesWebrtc = FeaturesWebrtc;

    }



    /// <summary>
    /// Browser family (e.g. Chrome, Safari, Firefox).
    /// </summary>
    /// <value>Browser family (e.g. Chrome, Safari, Firefox).</value>
    [JsonPropertyName("family")]
    public string Family { get; set; }



    /// <summary>
    /// Browser version (e.g. 68.0.3440.84).
    /// </summary>
    /// <value>Browser version (e.g. 68.0.3440.84).</value>
    [JsonPropertyName("version")]
    public string Version { get; set; }



    /// <summary>
    /// Language the browser is set to. Must conform to BCP 47.
    /// </summary>
    /// <value>Language the browser is set to. Must conform to BCP 47.</value>
    [JsonPropertyName("lang")]
    public string Lang { get; set; }



    /// <summary>
    /// Fingerprint generated by looking at the individual browser features.
    /// </summary>
    /// <value>Fingerprint generated by looking at the individual browser features.</value>
    [JsonPropertyName("fingerprint")]
    public string Fingerprint { get; set; }



    /// <summary>
    /// (Deprecated, use Device.isMobile instead) Flag that is true for mobile devices.
    /// </summary>
    /// <value>(Deprecated, use Device.isMobile instead) Flag that is true for mobile devices.</value>
    [JsonPropertyName("isMobile")]
    public bool? IsMobile { get; set; }



    /// <summary>
    /// Browser&#39;s viewport height.
    /// </summary>
    /// <value>Browser&#39;s viewport height.</value>
    [JsonPropertyName("viewHeight")]
    public int? ViewHeight { get; set; }



    /// <summary>
    /// Browser&#39;s viewport width.
    /// </summary>
    /// <value>Browser&#39;s viewport width.</value>
    [JsonPropertyName("viewWidth")]
    public int? ViewWidth { get; set; }



    /// <summary>
    /// Whether Flash is installed.
    /// </summary>
    /// <value>Whether Flash is installed.</value>
    [JsonPropertyName("featuresFlash")]
    public bool? FeaturesFlash { get; set; }



    /// <summary>
    /// Whether Java is installed.
    /// </summary>
    /// <value>Whether Java is installed.</value>
    [JsonPropertyName("featuresJava")]
    public bool? FeaturesJava { get; set; }



    /// <summary>
    /// Whether the browser recognizes PDFs.
    /// </summary>
    /// <value>Whether the browser recognizes PDFs.</value>
    [JsonPropertyName("featuresPdf")]
    public bool? FeaturesPdf { get; set; }



    /// <summary>
    /// Whether WebRTC is supported.
    /// </summary>
    /// <value>Whether WebRTC is supported.</value>
    [JsonPropertyName("featuresWebrtc")]
    public bool? FeaturesWebrtc { get; set; }


    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Browser {\n");

        sb.Append("  Family: ").Append(Family).Append("\n");
        sb.Append("  Version: ").Append(Version).Append("\n");
        sb.Append("  Lang: ").Append(Lang).Append("\n");
        sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
        sb.Append("  IsMobile: ").Append(IsMobile).Append("\n");
        sb.Append("  ViewHeight: ").Append(ViewHeight).Append("\n");
        sb.Append("  ViewWidth: ").Append(ViewWidth).Append("\n");
        sb.Append("  FeaturesFlash: ").Append(FeaturesFlash).Append("\n");
        sb.Append("  FeaturesJava: ").Append(FeaturesJava).Append("\n");
        sb.Append("  FeaturesPdf: ").Append(FeaturesPdf).Append("\n");
        sb.Append("  FeaturesWebrtc: ").Append(FeaturesWebrtc).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        return Equals(obj as Browser);
    }

    /// <summary>
    /// Returns true if Browser instances are equal
    /// </summary>
    /// <param name="other">Instance of Browser to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Browser other)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        if (other == null)
        {
            return false;
        }

        return true &&
            (
                Family == other.Family ||
                Family != null &&
                Family.Equals(other.Family)
            ) &&
            (
                Version == other.Version ||
                Version != null &&
                Version.Equals(other.Version)
            ) &&
            (
                Lang == other.Lang ||
                Lang != null &&
                Lang.Equals(other.Lang)
            ) &&
            (
                Fingerprint == other.Fingerprint ||
                Fingerprint != null &&
                Fingerprint.Equals(other.Fingerprint)
            ) &&
            (
                IsMobile == other.IsMobile ||
                IsMobile != null &&
                IsMobile.Equals(other.IsMobile)
            ) &&
            (
                ViewHeight == other.ViewHeight ||
                ViewHeight != null &&
                ViewHeight.Equals(other.ViewHeight)
            ) &&
            (
                ViewWidth == other.ViewWidth ||
                ViewWidth != null &&
                ViewWidth.Equals(other.ViewWidth)
            ) &&
            (
                FeaturesFlash == other.FeaturesFlash ||
                FeaturesFlash != null &&
                FeaturesFlash.Equals(other.FeaturesFlash)
            ) &&
            (
                FeaturesJava == other.FeaturesJava ||
                FeaturesJava != null &&
                FeaturesJava.Equals(other.FeaturesJava)
            ) &&
            (
                FeaturesPdf == other.FeaturesPdf ||
                FeaturesPdf != null &&
                FeaturesPdf.Equals(other.FeaturesPdf)
            ) &&
            (
                FeaturesWebrtc == other.FeaturesWebrtc ||
                FeaturesWebrtc != null &&
                FeaturesWebrtc.Equals(other.FeaturesWebrtc)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        // credit: http://stackoverflow.com/a/263416/677735
        unchecked // Overflow is fine, just wrap
        {
            int hash = 41;
            // Suitable nullity checks etc, of course :)
            if (Family != null)
            {
                hash = hash * 59 + Family.GetHashCode();
            }

            if (Version != null)
            {
                hash = hash * 59 + Version.GetHashCode();
            }

            if (Lang != null)
            {
                hash = hash * 59 + Lang.GetHashCode();
            }

            if (Fingerprint != null)
            {
                hash = hash * 59 + Fingerprint.GetHashCode();
            }

            if (IsMobile != null)
            {
                hash = hash * 59 + IsMobile.GetHashCode();
            }

            if (ViewHeight != null)
            {
                hash = hash * 59 + ViewHeight.GetHashCode();
            }

            if (ViewWidth != null)
            {
                hash = hash * 59 + ViewWidth.GetHashCode();
            }

            if (FeaturesFlash != null)
            {
                hash = hash * 59 + FeaturesFlash.GetHashCode();
            }

            if (FeaturesJava != null)
            {
                hash = hash * 59 + FeaturesJava.GetHashCode();
            }

            if (FeaturesPdf != null)
            {
                hash = hash * 59 + FeaturesPdf.GetHashCode();
            }

            if (FeaturesWebrtc != null)
            {
                hash = hash * 59 + FeaturesWebrtc.GetHashCode();
            }

            return hash;
        }
    }
}
