using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;

namespace PureCloud.Client.Models;

/// <summary>
/// SpeechTextAnalyticsConversationSummary
/// </summary>

public partial class SpeechTextAnalyticsConversationSummary : IEquatable<SpeechTextAnalyticsConversationSummary>
{
    /// <summary>
    /// The type of summary
    /// </summary>
    /// <value>The type of summary</value>
    
    public enum SummaryTypeEnum
    {
        /// <summary>
        /// Your SDK version is out of date and an unknown enum value was encountered. 
        /// Please upgrade the SDK using the command "Upgrade-Package PureCloudApiSdk" 
        /// in the Package Manager Console
        /// </summary>
        [EnumMember(Value = "OUTDATED_SDK_VERSION")]
        OutdatedSdkVersion,

        /// <summary>
        /// Enum Conversation for "Conversation"
        /// </summary>
        [EnumMember(Value = "Conversation")]
        Conversation,

        /// <summary>
        /// Enum Agent for "Agent"
        /// </summary>
        [EnumMember(Value = "Agent")]
        Agent
    }
    /// <summary>
    /// The media type of the associated interaction
    /// </summary>
    /// <value>The media type of the associated interaction</value>
    
    public enum MediaTypeEnum
    {
        /// <summary>
        /// Your SDK version is out of date and an unknown enum value was encountered. 
        /// Please upgrade the SDK using the command "Upgrade-Package PureCloudApiSdk" 
        /// in the Package Manager Console
        /// </summary>
        [EnumMember(Value = "OUTDATED_SDK_VERSION")]
        OutdatedSdkVersion,

        /// <summary>
        /// Enum Unknown for "Unknown"
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown,

        /// <summary>
        /// Enum Message for "Message"
        /// </summary>
        [EnumMember(Value = "Message")]
        Message,

        /// <summary>
        /// Enum Call for "Call"
        /// </summary>
        [EnumMember(Value = "Call")]
        Call,

        /// <summary>
        /// Enum Email for "Email"
        /// </summary>
        [EnumMember(Value = "Email")]
        Email
    }
    /// <summary>
    /// The type of summary
    /// </summary>
    /// <value>The type of summary</value>
    [JsonPropertyName("summaryType")]
    public SummaryTypeEnum? SummaryType { get; set; }
    /// <summary>
    /// The media type of the associated interaction
    /// </summary>
    /// <value>The media type of the associated interaction</value>
    [JsonPropertyName("mediaType")]
    public MediaTypeEnum? MediaType { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="SpeechTextAnalyticsConversationSummary" /> class.
    /// </summary>
    /// <param name="SummaryType">The type of summary.</param>
    /// <param name="MediaType">The media type of the associated interaction.</param>
    /// <param name="Language">Language of the summary.</param>
    /// <param name="AgentId">The id of the agent associated with the summary.</param>
    /// <param name="Summary">A summarization of the conversation transcription.</param>
    /// <param name="Generated">Indicates whether or not the summary was generated by AI.</param>
    /// <param name="DateCreated">Timestamp of when the summary was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z.</param>
    public SpeechTextAnalyticsConversationSummary(SummaryTypeEnum? SummaryType = null, MediaTypeEnum? MediaType = null, string Language = null, string AgentId = null, string Summary = null, bool? Generated = null, DateTime? DateCreated = null)
    {
        this.SummaryType = SummaryType;
        this.MediaType = MediaType;
        this.Language = Language;
        this.AgentId = AgentId;
        this.Summary = Summary;
        this.Generated = Generated;
        this.DateCreated = DateCreated;

    }







    /// <summary>
    /// Language of the summary
    /// </summary>
    /// <value>Language of the summary</value>
    [JsonPropertyName("language")]
    public string Language { get; set; }



    /// <summary>
    /// The id of the agent associated with the summary
    /// </summary>
    /// <value>The id of the agent associated with the summary</value>
    [JsonPropertyName("agentId")]
    public string AgentId { get; set; }



    /// <summary>
    /// A summarization of the conversation transcription
    /// </summary>
    /// <value>A summarization of the conversation transcription</value>
    [JsonPropertyName("summary")]
    public string Summary { get; set; }



    /// <summary>
    /// Indicates whether or not the summary was generated by AI
    /// </summary>
    /// <value>Indicates whether or not the summary was generated by AI</value>
    [JsonPropertyName("generated")]
    public bool? Generated { get; set; }



    /// <summary>
    /// Timestamp of when the summary was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    /// </summary>
    /// <value>Timestamp of when the summary was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z</value>
    [JsonPropertyName("dateCreated")]
    public DateTime? DateCreated { get; set; }


    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class SpeechTextAnalyticsConversationSummary {\n");

        sb.Append("  SummaryType: ").Append(SummaryType).Append("\n");
        sb.Append("  MediaType: ").Append(MediaType).Append("\n");
        sb.Append("  Language: ").Append(Language).Append("\n");
        sb.Append("  AgentId: ").Append(AgentId).Append("\n");
        sb.Append("  Summary: ").Append(Summary).Append("\n");
        sb.Append("  Generated: ").Append(Generated).Append("\n");
        sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }


    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        return Equals(obj as SpeechTextAnalyticsConversationSummary);
    }

    /// <summary>
    /// Returns true if SpeechTextAnalyticsConversationSummary instances are equal
    /// </summary>
    /// <param name="other">Instance of SpeechTextAnalyticsConversationSummary to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(SpeechTextAnalyticsConversationSummary other)
    {
        // credit: http://stackoverflow.com/a/10454552/677735
        if (other == null)
        {
            return false;
        }

        return true &&
            (
                SummaryType == other.SummaryType ||
                SummaryType != null &&
                SummaryType.Equals(other.SummaryType)
            ) &&
            (
                MediaType == other.MediaType ||
                MediaType != null &&
                MediaType.Equals(other.MediaType)
            ) &&
            (
                Language == other.Language ||
                Language != null &&
                Language.Equals(other.Language)
            ) &&
            (
                AgentId == other.AgentId ||
                AgentId != null &&
                AgentId.Equals(other.AgentId)
            ) &&
            (
                Summary == other.Summary ||
                Summary != null &&
                Summary.Equals(other.Summary)
            ) &&
            (
                Generated == other.Generated ||
                Generated != null &&
                Generated.Equals(other.Generated)
            ) &&
            (
                DateCreated == other.DateCreated ||
                DateCreated != null &&
                DateCreated.Equals(other.DateCreated)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        // credit: http://stackoverflow.com/a/263416/677735
        unchecked // Overflow is fine, just wrap
        {
            int hash = 41;
            // Suitable nullity checks etc, of course :)
            if (SummaryType != null)
            {
                hash = hash * 59 + SummaryType.GetHashCode();
            }

            if (MediaType != null)
            {
                hash = hash * 59 + MediaType.GetHashCode();
            }

            if (Language != null)
            {
                hash = hash * 59 + Language.GetHashCode();
            }

            if (AgentId != null)
            {
                hash = hash * 59 + AgentId.GetHashCode();
            }

            if (Summary != null)
            {
                hash = hash * 59 + Summary.GetHashCode();
            }

            if (Generated != null)
            {
                hash = hash * 59 + Generated.GetHashCode();
            }

            if (DateCreated != null)
            {
                hash = hash * 59 + DateCreated.GetHashCode();
            }

            return hash;
        }
    }
}
